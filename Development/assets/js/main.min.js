$(window).on('load', function () {
    init_btn_with_tooltips();
});
// Set datatables error throw console log
$.fn.dataTable.ext.errMode = 'throw';
$.fn.dataTableExt.oStdClasses.sWrapper = 'dataTables_wrapper form-inline dt-bootstrap table-loading';

Dropzone.options.newsFeedDropzone = false;
Dropzone.options.salesUpload = false;

if (("Notification" in window) && app_desktop_notifications == '1') {
    Notification.requestPermission();
}

$.validator.setDefaults({
    highlight: function (element) {
        $(element).closest('.form-group').addClass('has-error');
    },
    unhighlight: function (element) {
        $(element).closest('.form-group').removeClass('has-error');
    },
    errorElement: 'p',
    errorClass: 'text-danger',
    errorPlacement: function (error, element) {
        if (element.parent('.input-group').length || element.parents('.chk').length) {
            if (!element.parents('.chk').length) {
                error.insertAfter(element.parent());
            } else {
                error.insertAfter(element.parents('.chk'));
            }
        } else {
            error.insertAfter(element);
        }
    }
});

$.validator.addMethod('filesize', function (value, element, param) {
    return this.optional(element) || (element.files[0].size <= param);
}, appLang.file_exceeds_max_filesize);

$.validator.addMethod("extension", function (value, element, param) {
    param = typeof param === "string" ? param.replace(/,/g, "|") : "png|jpe?g|gif";
    return this.optional(element) || value.match(new RegExp("\\.(" + param + ")$", "i"));
}, $.validator.format(appLang.validation_extension_not_allowed));

$('body').on('loaded.bs.select change', 'select.ajax-search', function (e) {
    if ($(this).selectpicker('val')) {
        var $elmWrapper = $(this).parents('.bootstrap-select.ajax-search');
        if ($elmWrapper.find('.ajax-clear-values').length === 0) {
            $elmWrapper.addClass('ajax-remove-values-option').find('button.dropdown-toggle').after('<span class="pointer ajax-clear-values" onclick="deselect_ajax_search(this); return false;" data-id="' + $(this).attr('id') + '"><i class="fa fa-remove"></i></span>');
        }
    }
});

// Delay function
var delay = (function () {
    var timer = 0;
    return function (callback, ms) {
        clearTimeout(timer);
        timer = setTimeout(callback, ms);
    };
})();

var original_top_search_val,
    tab_active = get_url_param('tab'),
    tab_group = get_url_param('group'),
    side_bar = $('#side-menu'),
    content_wrapper = $('#wrapper'),
    setup_menu = $('#setup-menu-wrapper'),
    menu_href_selector,
    calendar_selector = $('#calendar'),
    notifications_wrapper = $('#header li.notifications-wrapper'),
    doc_initial_title = document.title,
    total_new_post_files = 0,
    newsfeed_posts_page = 0,
    track_load_post_likes = 0,
    track_load_comment_likes = 0,
    post_likes_total_pages = 0,
    comment_likes_total_pages = 0,
    postid = 0,
    available_reminders_table = [
        '.table-reminders',
        '.table-invoices',
        '.table-reminders-leads',
        '.table-estimates',
        '.table-proposals',
        '.table-expenses',
        '.table-my-reminders',
    ],
    setup_menu_item = $('#setup-menu-item');

$(window).on("load resize", function (e) {
    /*if (!$("body").hasClass('page-small')) {*/
    // Add special class to minimalize page elements when screen is less than 768px
    setBodySmall();
    /*}*/
    setCardviewForMobile();
    // Waint until metsiMenu, collapse and other effect finish and set wrapper height
    setTimeout(function () {
        mainWrapperHeightFix();
    }, 150);
});

$(function () {

    if (total_unread_notifications > 0) {
        document.title = '(' + total_unread_notifications + ') ' + doc_initial_title;
    }

    /** Create New Customer **/
    // add_hotkey('Shift+C', function() {
    //     var $leadModal = $('#lead-modal');
    //     var $taskModal = $('#task-modal');
    //     if ($leadModal.is(':visible')) {
    //         convert_lead_to_customer($leadModal.find('input[name="leadid"]').val());
    //     } else if ($taskModal.is(':visible')) {
    //         var $taskCommentsWrapper = $taskModal.find('.tasks-comments');
    //         if (!$taskCommentsWrapper.is(':visible')) {
    //             $taskCommentsWrapper.css('display', 'block');
    //         }
    //         $taskModal.find('#task_comment').click();
    //     } else {
    //         window.location.href = admin_url + 'clients/client';
    //     }
    // });
    /** Create New Invoice **/
    // add_hotkey('Shift+I', function() {
    //     window.location.href = admin_url + 'invoices/invoice';
    // });

    /** Create New Estimate **/
    // add_hotkey('Shift+E', function() {
    //     var $leadModal = $('#lead-modal');
    //     var $taskModal = $('#task-modal');
    //     if (!$leadModal.is(':visible') && !$taskModal.is(':visible')) {
    //         window.location.href = admin_url + 'estimates/estimate';
    //     } else {
    //         if ($leadModal.is(':visible')) {
    //             $('a[lead-edit]').click();
    //         } else if ($taskModal.is(':visible')) {
    //             edit_task($taskModal.find('[data-task-single-id]').attr('data-task-single-id'));
    //         }
    //     }
    // });

    /** Marks task as finished when modal is opened **/
    // add_hotkey('Shift+F', function() {
    //     var $taskModal = $('#task-modal');
    //     if ($taskModal.is(':visible')) {
    //         var $taskSingleBody = $taskModal.find('[data-task-single-id]');
    //         if ($taskSingleBody.attr('data-status') != 5) {
    //             mark_complete($taskSingleBody.attr('data-task-single-id'));
    //         }
    //     }
    // });

    /** Create New Proposal **/
    // add_hotkey('Ctrl+Shift+P', function() {
    //     window.location.href = admin_url + 'proposals/proposal';
    // });
    /** Create New Expense **/
    // add_hotkey('Ctrl+Shift+E', function() {
    //     window.location.href = admin_url + 'expenses/expense';
    // });

    /** Create New Lead **/
    // add_hotkey('Shift+L', function() {
    //     init_lead();
    // });
    /** Create New Task **/
    // add_hotkey('Shift+T', function() {
    //     var $newTaskRelationBtn = $('.new-task-relation');
    //     if ($newTaskRelationBtn.length > 0) {
    //         new_task(admin_url + 'tasks/task?rel_id=' + $newTaskRelationBtn.attr('data-rel-id') + '&rel_type=' + $newTaskRelationBtn.attr('data-rel-type'));
    //     } else if ($('body').hasClass('project')) {
    //         new_task(admin_url + 'tasks/task?rel_id=' + project_id + '&rel_type=project');
    //     } else {
    //         new_task();
    //     }
    // });
    /** Create New Project **/
    // add_hotkey('Shift+P', function() {
    //     window.location.href = admin_url + 'projects/project';
    // });
    /** Create New Ticket **/
    // add_hotkey('Shift+S', function() {
    //     window.location.href = admin_url + 'tickets/add';
    // });
    /** Create New Staff Member **/
    // add_hotkey('Ctrl+Shift+S', function() {
    //     window.location.href = admin_url + 'staff/member';
    // });

    /** User logout **/
    // add_hotkey('Ctrl+Shift+L', function() {
    //     logout();
    // });

    /**
     * List shortcuts
     */

    /** Go to dashbaord **/
    // add_hotkey('Alt+D', function() {
    //     window.location.href = admin_url;
    // });
    /** List Customers **/
    // add_hotkey('Alt+C', function() {
    //     window.location.href = admin_url + 'clients';
    // });
    /** List Tasks **/
    // add_hotkey('Alt+T', function() {
    //     window.location.href = admin_url + 'tasks/list_tasks';
    // });
    /** List Invoices **/
    // add_hotkey('Alt+I', function() {
    //     window.location.href = admin_url + 'invoices/list_invoices';
    // });
    /** List Estimates **/
    // add_hotkey('Alt+E', function() {
    //     window.location.href = admin_url + 'estimates/list_estimates';
    // });
    /** List Projects **/
    // add_hotkey('Alt+P', function() {
    //     window.location.href = admin_url + 'projects';
    // });
    /** List Leads **/
    // add_hotkey('Alt+L', function() {
    //     window.location.href = admin_url + 'leads';
    // });
    /** List Tickets **/
    // add_hotkey('Ctrl+Alt+T', function() {
    //     window.location.href = admin_url + 'tickets';
    // });
    /** List Expenses **/
    // add_hotkey('Ctrl+Alt+E', function() {
    //     window.location.href = admin_url + 'expenses/list_expenses';
    // });

    /** Sales Report **/
    // add_hotkey('Alt+R', function() {
    //     window.location.href = admin_url + 'reports/sales';
    // });

    /** Settings **/
    // add_hotkey('Alt+S', function() {
    //     window.location.href = admin_url + 'settings';
    // });

    /** Top Search Focus **/
    // add_hotkey('Shift+K', function() {
    //     $('#search_input').focus();
    // });

    /* Focus on seacrh on first datatable found in the DOM */
    // add_hotkey('Shift+D', function() {
    //     $('body .dataTables_wrapper').eq(0).find('.dataTables_filter input').focus();
    // });
    //$.Shortcuts.start();

    $(document).on('focusin', function (e) {
        if ($(e.target).closest(".mce-window").length) {
            e.stopImmediatePropagation();
        }
    });

    if (app_show_setup_menu_item_only_on_hover == 1 && !is_mobile()) {
        side_bar.hover(
            function () {
                setTimeout(function () {
                    setup_menu_item.css("display", "block");
                }, 200);
            },
            function () {
                setTimeout(function () {
                    setup_menu_item.css("display", "none");
                }, 1000);
            }
        );
    }

    var $navTabs = $('body').find('ul.nav-tabs');
    // Check for active tab if any found in url so we can set this tab to active - Tab active is defined on top
    if (tab_active) {
        $navTabs.find('[href="#' + tab_active + '"]').click();
    }
    // Check for active tab groups (this is custom made) and not related to boostrap - tab_group is defined on top
    if (tab_group) {
        // Do not track bootstrap default tabs
        $navTabs.find('li').not('[role="presentation"]').removeClass('active');
        // Add the class active to this group manually so the tab can be highlighted
        $navTabs.find('[data-group="' + tab_group + '"]').parents('li').addClass('active');

        /**
         * Added By : Vaidehi
         * Dt : 11/29/2017
         * to disable submit button on email tab load for brand settings
         */
        if (tab_group == 'email') {
            $(".btn-info").addClass('disabled');
            $('form').unbind('submit');
        }
    }
    // Set datetimepicker locale
    jQuery.datetimepicker.setLocale(locale);
    // Set moment locale
    moment.locale(locale);
    // Set timezone locale
    moment().tz(app_timezone).format();
    // Init tinymce editors
    init_editor();
    // Dont close dropdown on timer top click
    $('body').on('click', '#started-timers-top,.popover-top-timer-note', function (e) {
        e.stopPropagation();
    });
    // Init inputs used for tags
    init_tags_inputs();
    // Init all color pickers
    init_color_pickers();
    // Init tables offline (no serverside)
    initDataTableOffline();
    initMailDataTableOffline();

    // Bootstrap switch active or inactive global function
    $('body').on('change', '.onoffswitch input', function (event, state) {
        var switch_url = $(this).data('switch-url');
        if (!switch_url) {
            return;
        }
        switch_field(this);
    });
    /* Custom fields hyperlink */
    custom_fields_hyperlink();
    // Init lightboxes if found
    init_lightbox();
    // Init progress bars
    init_progress_bars();
    // Init datepickers
    init_datepicker();
    // Init bootstrap selectpicker
    init_selectpicker();
    // Optimize body
    setBodySmall();
    // Validate all form for reminders
    init_form_reminder();

    init_ajax_search('customer', '#clientid.ajax-search');

    // Check for active class in sidebar links
    var sidebar_links = side_bar.find('li > a');
    $.each(sidebar_links, function (i, data) {
        var href = $(data).attr('href');
        var lochref = $(location).attr('href');

        // Check if the url matches so we can add the active class        
        if (i == 0) {
            if (location == href) {
                var $hrefSelector = side_bar.find('a[href="' + href + '"]');
                // Do not add on the top quick links
                $hrefSelector.parents('li').not('.quick-links').addClass('active');
                // Set aria expanded to true
                $hrefSelector.prop('aria-expanded', true);
                $hrefSelector.parents('ul.nav-second-level').prop('aria-expanded', true);
                $hrefSelector.parents('li').find('a:first-child').prop('aria-expanded', true);
            }
        } else if (lochref.indexOf(href) >= 0) {
            var $hrefSelector = side_bar.find('a[href="' + href + '"]');
            // Do not add on the top quick links
            $hrefSelector.parents('li').not('.quick-links').addClass('active');
            // Set aria expanded to true
            $hrefSelector.prop('aria-expanded', true);
            $hrefSelector.parents('ul.nav-second-level').prop('aria-expanded', true);
            $hrefSelector.parents('li').find('a:first-child').prop('aria-expanded', true);
        } else if (href.indexOf("setup") >= 0 && (lochref.indexOf("tags") >= 0 || lochref.indexOf("taxes") >= 0 || lochref.indexOf("teams") >= 0 || lochref.indexOf("roles") >= 0 || lochref.indexOf("staff") >= 0 || lochref.indexOf("brand_settings") >= 0) || lochref.indexOf("paymentmodes") >= 0 || lochref.indexOf("agreements") >= 0 || lochref.indexOf("emails") >= 0 || lochref.indexOf("paymentschedules") >= 0 || lochref.indexOf("invoice_items") >= 0 || (lochref.indexOf("proposaltemplates") >= 0 && lochref.indexOf("pid") <= 0) || lochref.indexOf("statuses") >= 0 || lochref.indexOf("manage_subscription") >= 0 || lochref.indexOf("subscription") >= 0 || lochref.indexOf("sources") >= 0 || lochref.indexOf("event_types") >= 0) {
            var $hrefSelector = side_bar.find('a[href="' + href + '"]');
            var setuphref = $hrefSelector.attr('href');
            if (setuphref.indexOf('setup') >= 0) {
                // Do not add on the top quick links
                $hrefSelector.parents('li').not('.quick-links').addClass('active');
                // Set aria expanded to true
                $hrefSelector.prop('aria-expanded', true);
                $hrefSelector.parents('ul.nav-second-level').prop('aria-expanded', true);
                $hrefSelector.parents('li').find('a:first-child').prop('aria-expanded', true);
            }
        } else if (lochref.indexOf("venues") >= 0) {
            var $hrefSelector = side_bar.find('a[href="' + href + '"]');
            var setuphref = $hrefSelector.attr('href');
            if (setuphref.indexOf('addressbooks') >= 0) {
                // Do not add on the top quick links
                $hrefSelector.parents('li').not('.quick-links').addClass('active');
                // Set aria expanded to true
                $hrefSelector.prop('aria-expanded', true);
                $hrefSelector.parents('ul.nav-second-level').prop('aria-expanded', true);
                $hrefSelector.parents('li').find('a:first-child').prop('aria-expanded', true);
            }
        }
    });

    // Check for customizer active class
    if (setup_menu.hasClass('display-block')) {
        var setup_menu_links = setup_menu.find('li > a');
        $.each(setup_menu_links, function (i, data) {
            var href = $(data).attr('href');
            if (location == href) {
                var $hrefSelector = setup_menu.find('a[href="' + href + '"]');
                $hrefSelector.parents('li').addClass('active');
                $hrefSelector.prev('active');
                $hrefSelector.parents('ul.nav-second-level').prop('aria-expanded', true);
                $hrefSelector.parents('li').find('a:first-child').prop('aria-expanded', true);
            }
        });
    }
    // Init now metisMenu for the main admin sidebar
    side_bar.metisMenu();
    // Init setup menu
    setup_menu.metisMenu();
    // Handle minimalize sidebar menu
    $('.hide-menu').click(function (event) {
        event.preventDefault();
        if ($(window).width() < 769) {
            $("body").toggleClass("show-sidebar");
        } else {
            $("body").toggleClass("hide-sidebar");
        }
        if (setup_menu.hasClass('display-block')) {
            $('.close-customizer').click();
        }
    });
    if (is_mobile()) {
        content_wrapper.on('click', function () {
            if ($('body').hasClass('show-sidebar')) {
                $('body').removeClass('show-sidebar');
            }
            if (setup_menu.hasClass('display-block')) {
                $('.close-customizer').click();
            }
        });
    }
    // Optimize wrapper height
    mainWrapperHeightFix();
    // Top search input fetch results
    $('#search_input').on('keyup paste', function () {
        var q = $(this).val().trim();
        var search_results = $('#search_results');
        var top_search_button = $('#top_search_button button');

        if (q.length < 2) {
            return;
        }
        if (q === '') {
            content_wrapper.unhighlight();
            search_results.html('');
            original_top_search_val = '';
            top_search_button.html('<i class="fa fa-search"></i>');
            top_search_button.removeClass('search_remove');
            return;
        }
        top_search_button.html('<i class="fa fa-remove"></i>');
        top_search_button.addClass('search_remove');
        delay(function () {
            if (q == original_top_search_val) {
                return;
            }
            $.post(admin_url + 'misc/search', {
                q: q
            }).done(function (results) {
                content_wrapper.unhighlight();
                search_results.html(results);
                content_wrapper.highlight(q);
                original_top_search_val = q;
            });
        }, 700);
    });

    $('body').on('hidden.bs.modal', '.modal-reminder', function (e) {
        var rel_id = $(this).find('input[name="rel_id"]').val();
        var rel_type = $(this).find('input[name="rel_type"]').val();
        $(this).find('form').attr('action', admin_url + 'misc/add_reminder/' + rel_id + '/' + rel_type);
        $(this).find(':input:not([type=hidden]), textarea').val('');
        $(this).find('input[type="checkbox"]').prop('checked', false);
        $(this).find('select').selectpicker('val', '');
    });

    // On delete reminder reload the tables
    // $('body').on('click', '.delete-reminder', function() {

    //     var r = confirm(appLang.confirm_action_prompt);
    //     if (r === false) {
    //         return false;
    //     } else {
    //         $.get($(this).attr('href'), function(response) {
    //             var remindertabcount = $(".remindertab .badge").html();
    //              remindertabcount = parseInt(remindertabcount) - parseInt(1);
    //             $(".remindertab .badge").html(remindertabcount);
    //             alert_float(response.alert_type, response.message);
    //             reload_reminders_tables();
    //         }, 'json');
    //     }
    //     return false;
    // });

    $('body').on('click', '.delete-reminder', function (e) {

        /*var r = confirm(appLang.confirm_action_prompt);
        if (r == true) {
            return true;
        } else {
            return false;
        }*/

        var link = e.currentTarget['href'];

        /**
         * Added By : Vaidehi
         * Dt : 11/22/2017
         * to submit form without calling swal for staff member delete
         */
        if ($("#delete_staff").is(":visible")) {
            $(".dirty").submit();
        } else {
            swal({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonClass: 'btn btn-danger',
                confirmButtonText: 'Yes, delete it!',
                showLoaderOnConfirm: true,
                preConfirm: function () {
                    return new Promise(function (resolve, reject) {
                        $.ajax({
                            url: link,
                            type: 'get'
                        })
                            .done(function (response) {
                                if (response.indexOf(':') > -1) {
                                    /**
                                     * Modified By : Vaidehi
                                     * Dt : 11/20/2017
                                     * to show correct message if delete operation is not successful
                                     */
                                    swal('Oops...', response.substring(response.indexOf(':') + 1), 'warning');
                                } else {
                                    swal('Deleted!', response.message, response.status);
                                    setTimeout(
                                        function () {
                                            swal.close()
                                            var remindertabcount = $(".remindertab .badge").html();
                                            if (remindertabcount != "") {
                                                remindertabcount = parseInt(remindertabcount) - parseInt(1);
                                                $(".remindertab .badge").html(remindertabcount);
                                            }
                                            reload_reminders_tables();
                                        }, 1000);

                                }
                            })
                            .fail(function () {
                                swal('Oops...', 'Something went wrong !', 'error');
                            });
                    });
                },
                allowOutsideClick: false
            }).catch(swal.noop);
            return false;
        }

    });


    // Insert new checklist items on enter press
    $("body").on('keypress', 'textarea[name="checklist-description"]', function (event) {
        if (event.which == '13') {
            $(this).focusout();
            add_task_checklist_item($(this).attr('data-taskid'));
            return false;
        }
    });

    // Update taks checklist items when focusing out
    $('body').on('blur', 'textarea[name="checklist-description"]', function () {

        var textArea = $(this);
        var description = textArea.val();
        description = description.trim();
        var listid = textArea.parents('.checklist').data('checklist-id');

        $.post(admin_url + 'tasks/update_checklist_item', {
            description: description,
            listid: listid,
        }).done(function (response) {
            response = JSON.parse(response);
            if (response.can_be_template === true) {
                textArea.parents('.checklist').find('.save-checklist-template').removeClass('hide');
            }
            if (description === '') {
                $('#checklist-items').find('.checklist[data-checklist-id="' + listid + '"]').remove();
            }
        });
    });

    $('body').on('rendered.bs.select,refreshed.bs.select', 'select.checklist-items-template-select', function () {
        if (has_permission_tasks_checklist_items_delete == '1') {
            setTimeout(function () {
                var itemsHtml = $('body').find('.checklist-items-template-select ul.dropdown-menu li').not(':first-child');
                var itemsSelect = $('body').find('.checklist-items-template-select select option').not(':first-child');
                $.each(itemsSelect, function (i, item) {
                    var $item = $(item);
                    if ($(itemsHtml[i]).find('.checklist-item-template-remove').length == 0) {
                        $(itemsHtml[i]).find('a > span.text').after('<small class="checklist-item-template-remove" onclick="remove_checklist_item_template(' + $item.attr('value') + '); event.stopPropagation();"><i class="fa fa-remove"></i></small>');
                    }
                });
            }, 100);
        }
    });

    $('body').on('change', '#task-modal #checklist_items_templates', function () {
        var val = $(this).val();
        var $taskModal = $('#task-modal');
        add_task_checklist_item(
            $taskModal.find('[data-task-single-id]').attr('data-task-single-id'),
            $(this).find('option[value="' + val + '"]').html().trim());

        $(this).selectpicker('val', '');
    });
    $('body').on('click', '.task-date-as-comment-id', function (e) {
        e.preventDefault();
        var task_comment_temp = $(this).attr('href').split('#');
        var comment_position = $('#' + task_comment_temp[task_comment_temp.length - 1]).position();
        $("#task-modal").scrollTop(comment_position.top);
    });


    // Search by tags from the tables for any tag clicked.
    $('body').on('click', 'table.dataTable tbody .tags-labels .label-tag', function () {
        $(this).parents('table').DataTable().search($(this).find('.tag').text()).draw();
        $('div.dataTables_filter input').focus();
    });

    // Search by customer groups from the tables for any group clicked.
    $('body').on('click', 'table.dataTable tbody .customer-group-list', function () {
        $(this).parents('table').DataTable().search($(this).text()).draw();
        $('div.dataTables_filter input').focus();
    });

    // Search by lead status from the tables for any status clicked.
    $('body').on('click', 'table.dataTable tbody .lead-status', function () {
        var lead_status_name = $.trim($(this).text());
        var lead_status_select = $('#view_status');
        lead_status_select.find('option').filter(function () {
            return this.text == lead_status_name;
        }).attr('selected', true);
        lead_status_select.selectpicker('refresh');
        $('.table-leads').DataTable().ajax.reload();
    });

    $('body').on('click', 'table.dataTable tbody .lead-pin, .kan-ban-content .lead-pin', function () {
        var lead_id = $(this).attr('lead_id');
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("leads"));
        $.ajax({
            type: 'POST',
            data: {
                lead_id: lead_id
            },
            url: shortUrl + "leads/pinlead"
        }).done(function (response) {
            if (response == 1) {
                $('#' + lead_id).addClass('pinned');
                alert_float('success', 'Lead is Pined to Home');
            } else {
                $('#' + lead_id).removeClass('pinned');
                alert_float('success', 'Lead is Unpined from Home');
            }
        });
    });

    /**
     * Added By : Vaidehi
     * Dt : 12/20/2017
     * to pin project into dashboard
     */
    $('body').on('click', 'table.dataTable tbody .project-pin, .kan-ban-content .project-pin', function () {
        var project_id = $(this).attr('project_id');
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("projects"));
        $.ajax({
            type: 'POST',
            data: {
                project_id: project_id
            },
            url: shortUrl + "projects/pinproject"
        }).done(function (response) {
            if (response == 1) {
                $('#' + project_id).addClass('pinned');
                alert_float('success', 'Project is Pined to Home');
            } else {
                $('#' + project_id).removeClass('pinned');
                alert_float('success', 'Project is Unpined from Home');
            }
        });

    });

    $('body').on('change', 'table.dataTable tbody .selectpicker.leadstatus', function () {
        var lead_id = $(this).attr('lead_id');
        var status_id = $(this).val();
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("leads"));
        $.ajax({
            type: 'POST',
            data: {
                status_id: status_id,
                lead_id: lead_id
            },
            url: shortUrl + "leads/statuschange"
        }).done(function (response) {
            $.ajax({
                type: 'POST',
                data: {},
                url: shortUrl + "leads/leadoverviewupdate"
            }).done(function (response) {
                $(".leads-overview").html(response);
                $('.table-leads').DataTable().ajax.reload();
                alert_float('success', "Status Updated!");
            });
        });
    });

    /**
     * Added By : Vaidehi
     * Dt : 12/20/2017
     * for project status change
     */
    $('body').on('change', 'table.dataTable tbody .selectpicker.projectstatus, .selectpicker.projectstatus', function () {
        var project_id = $(this).attr('project_id');
        var status_id = $(this).val();
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("projects"));
        $.ajax({
            type: 'POST',
            data: {
                status_id: status_id,
                project_id: project_id
            },
            url: shortUrl + "projects/statuschange"
        }).done(function (response) {
            $.ajax({
                type: 'POST',
                data: {},
                url: shortUrl + "projects/projectoverviewupdate"
            }).done(function (response) {
                $(".projects-overview").html(response);
                $('.table-projects').DataTable().ajax.reload();
                alert_float('success', "Status updated successfully!");
            });
        });
    });

    $('body').on('click', '.leaddashboard .lead-pin', function () {
        var lead_id = $(this).attr('lead_id');
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("leads"));
        $.ajax({
            type: 'POST',
            data: {
                lead_id: lead_id
            },
            url: shortUrl + "leads/pinlead"
        }).done(function (response) {
            if (response == 1) {
                $(".leaddashboard .lead-pin").addClass('pinned');
                $(".leaddashboard .lead-pin").siblings('i').addClass('pinned');
                $(".leaddashboard .lead-pin").html('Unpin from Home');
            } else {
                $(".leaddashboard .lead-pin").removeClass('pinned');
                $(".leaddashboard .lead-pin").siblings('i').removeClass('pinned');
                $(".leaddashboard .lead-pin").html('Pin to Home');
            }
        });
    });

    /**
     * Added By : Vaidehi
     * Dt : 12/20/2017
     * for reloading project dashboard after pin/unpin and status change
     */
    $('body').on('click', '.projectdashboard .project-pin', function () {
        var project_id = $(this).attr('project_id');
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("projects"));
        $.ajax({
            type: 'POST',
            data: {
                project_id: project_id
            },
            url: shortUrl + "projects/pinproject"
        }).done(function (response) {
            if (response == 1) {
                $(".projectdashboard .project-pin").addClass('pinned');
                $(".projectdashboard .project-pin").siblings('i').addClass('pinned');
                $(".projectdashboard .project-pin").html('Unpin from Home');
            } else {
                $(".projectdashboard .project-pin").removeClass('pinned');
                $(".projectdashboard .project-pin").siblings('i').removeClass('pinned');
                $(".projectdashboard .project-pin").html('Pin to Home');
            }
        });
    });

    $('body').on('change', '.leaddashboard .selectpicker', function () {
        var lead_id = $(this).attr('lead_id');
        var status_id = $(this).val();
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("leads"));
        $.ajax({
            type: 'POST',
            data: {
                status_id: status_id,
                lead_id: lead_id
            },
            url: shortUrl + "leads/statuschange"
        }).done(function (response) {
            if (response == 1) {
                alert_float('success', "Status Updated!");
            } else {
                alert_float('error', "Status not updated!");
            }
        });
    });

    /* Added by Purvi on 11-10-2017 */
    $('body').on('click', 'table.dataTable tbody .task-pin, .task-pin', function () {
        var task_id = $(this).attr('task_id');
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("tasks"));
        $.ajax({
            type: 'POST',
            data: {
                task_id: task_id
            },
            url: shortUrl + "tasks/pintask"
        }).done(function (response) {
            if (response == 1) {
                $('#' + task_id).addClass('pinned');
                alert_float('success', 'Task is Pined to Home');
            } else {
                $('#' + task_id).removeClass('pinned');
                alert_float('success', 'Task is Unpined from Home');
            }
        });
    });

    /**
     * Added By: Vaidehi
     * Dt: 02/27/2018
     * for pinned contact
     */
    $('body').on('click', 'table.dataTable tbody .contact-pin, .contact-pin', function () {
        var contact_id = $(this).attr('contact_id');
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("addressbooks"));
        $.ajax({
            type: 'POST',
            data: {
                contact_id: contact_id
            },
            url: shortUrl + "addressbooks/pincontact"
        }).done(function (response) {
            if (response == 1) {
                $('#' + contact_id).addClass('pinned');
                alert_float('success', 'Contact is Pined to Home');
            } else {
                $('#' + contact_id).removeClass('pinned');
                alert_float('success', 'Contact is Unpined from Home');
            }
        });
    });

    /**
     * Added By: Vaidehi
     * Dt: 02/27/2018
     * for pinned venue
     */
    $('body').on('click', 'table.dataTable tbody .venue-pin, #kan-ban .venue-pin, .venue-pin', function () {
        var venue_id = $(this).attr('venue_id');
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("venues"));
        $.ajax({
            type: 'POST',
            data: {
                venue_id: venue_id
            },
            url: shortUrl + "venues/pinvenue"
        }).done(function (response) {
            if (response == 1) {
                $('#' + venue_id).addClass('pinned');
                alert_float('success', 'Venue is Pined to Home');
            } else {
                $('#' + venue_id).removeClass('pinned');
                alert_float('success', 'Venue is Unpined from Home');
            }
        });
    });

    /**
     * Added By: Vaidehi
     * Dt: 02/28/2018
     * for pinned message
     */
    $('body').on('click', 'table.dataTable tbody .message-pin, .message-pin', function () {
        var message_id = $(this).attr('message_id');
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("messages"));
        $.ajax({
            type: 'POST',
            data: {
                message_id: message_id
            },
            url: shortUrl + "messages/pinmessage"
        }).done(function (response) {
            if (response == 1) {
                $('#' + message_id).addClass('pinned');
                alert_float('success', 'Message is Pined to Home');
            } else {
                $('#' + message_id).removeClass('pinned');
                alert_float('success', 'Message is Unpined from Home');
            }
        });
    });

    $('[data-can-view-own],[data-can-view]').on('change', function () {
        var is_own_attr = $(this).attr('data-can-view-own');
        view_chk_selector = $(this).parents('tr').find('td input[' + (typeof is_own_attr !== typeof undefined && is_own_attr !== false ? 'data-can-view' : 'data-can-view-own') + ']');
        view_chk_selector.prop('checked', false);
        if ($(this).prop('checked') === true) {
            view_chk_selector.prop('disabled', true);
        } else {
            view_chk_selector.prop('disabled', false);
        }
    });

    /* Tasks */
    // Init single task data
    if (typeof (taskid) !== 'undefined' && taskid !== '') {
        init_task_modal(taskid);
    }

    $('body').on('change', 'input[name="checklist-box"]', function () {
        var listid = $(this).parents('.checklist').data('checklist-id');
        $.get(admin_url + 'tasks/checkbox_action/' + listid + '/' + ($(this).prop('checked') === true ? 1 : 0));
        recalculate_checklist_items_progress();

        /**
         * Added By : Vaidehi
         * Dt : 11/17/2017
         * to make visible 0% on task dashboard
         */
        if ($(".task-progress-bar").html() == '0%') {
            $(".task-progress-bar").addClass('zero-progress');
        } else {
            $(".task-progress-bar").removeClass('zero-progress');
        }
    });

    $("body").on('keyup paste click', "textarea[name='checklist-description']", function (e) {
        do_task_checklist_items_height($(this));
    });

    $('#privacy').on('change', function () {
        var privacy_selected = $(this).val();
        var selected_option = $('#message_to option:selected');
        var exist = false;
        $(selected_option).each(function () {
            if ($(this).val() == privacy_selected) {
                exist = true;
            }
        });

        if (exist == false) {
            $("#message_to").val([]);
            $(".selectpicker").selectpicker('refresh');
        }
        var privacy_option_selected = $('#privacy option:selected');
        //console.log(privacy_option_selected);
        $("#message_to option").hide();
        //var privacy_selected = [];
        $(privacy_option_selected).each(function () {
            //privacy_selected.push($(this).val());
            $("#message_to option[value^=" + $(this).val() + "]").show();
            $(".selectpicker").selectpicker('refresh');
        });
        $("#message_to").val(privacy_selected);
        $(".selectpicker").selectpicker('refresh');
        if (privacy_option_selected.length <= 0) {
            $("#message_to option").show();
            $(".selectpicker").selectpicker('refresh');
        }
    });

    // $('body').on('click', '#task_comment', function() {
    //     if (tinymce.editors.task_comment) {
    //         tinymce.remove('#task_comment');
    //     }
    //     init_editor('#task_comment', {
    //         height: 150,
    //         auto_focus: true
    //     });
    // });

    $('body').on('click', '.task-single-delete-timesheet', function (e) {
        e.preventDefault();
        var r = confirm(appLang.confirm_action_prompt);
        if (r == false) {
            return false;
        } else {
            var _delete_timesheet_task_id = $(this).data('task-id');
            $.get($(this).attr('href'), function () {
                init_task_modal(_delete_timesheet_task_id);
                setTimeout(function () {
                    reload_tasks_tables();
                    init_timers();
                }, 20);
            });
        }
    });

    $('body').on('click', '.task-single-add-timesheet', function (e) {
        e.preventDefault();
        var start_time = $('body').find('#task-modal input[name="timesheet_start_time"]').val();
        var end_time = $('body').find('#task-modal input[name="timesheet_end_time"]').val();
        if (start_time != '' && end_time != '') {
            var data = {};
            data.start_time = start_time;
            data.end_time = end_time;
            data.timesheet_task_id = $(this).data('task-id');
            data.note = $('body').find('#task_single_timesheet_note').val();
            data.timesheet_staff_id = $('body').find('#task-modal select[name="single_timesheet_staff_id"]').val();
            $.post(admin_url + 'tasks/log_time', data).done(function (response) {
                response = JSON.parse(response);
                if (response.success == true) {
                    init_task_modal(data.timesheet_task_id);
                    alert_float('success', response.message);
                    setTimeout(function () {
                        reload_tasks_tables();
                    }, 20);
                } else {
                    alert_float('warning', response.message);
                }
            });
        }
    });

    $('body').on('click', '.copy_task_action', function () {
        var data = {};
        data.copy_from = $(this).data('task-copy-from');
        data.copy_task_assignees = $('body').find('#copy_task_assignees').prop('checked');
        data.copy_task_followers = $('body').find('#copy_task_followers').prop('checked');
        data.copy_task_checklist_items = $('body').find('#copy_task_checklist_items').prop('checked');
        data.copy_task_attachments = $('body').find('#copy_task_attachments').prop('checked');
        data.copy_task_status = $('body').find('input[name="copy_task_status"]:checked').val();
        $.post(admin_url + 'tasks/copy', data).done(function (response) {
            response = JSON.parse(response);
            if (response.success == true) {
                var $taskModal = $('#_task_modal');
                if ($taskModal.is(':visible')) {
                    $taskModal.modal('hide');
                }
                // init_task_modal(response.new_task_id);
                // reload_tasks_tables();

            }
            window.location.reload();
            alert_float(response.alert_type, response.message);
        });
        return false;
    });

    $('body').on('click', '.new-task-to-milestone', function (e) {
        e.preventDefault();
        var milestone_id = $(this).parents('.milestone-column').data('milestone-id');
        new_task(admin_url + 'tasks/task?rel_type=project&rel_id=' + project_id + '&milestone_id=' + milestone_id);
    });

    $('body').on('shown.bs.modal', '#_task_modal', function (e) {
        if (!$(e.currentTarget).hasClass('edit')) {
            $('body').find('#_task_modal #name').focus();
        } else {
            if ($(this).find('.tinymce-task').val().trim() !== '') {
                init_editor('.tinymce-task', {height: 200});
            }
        }
        init_tags_inputs();
    });

    // Remove the tinymce description task editor
    $('body').on('hidden.bs.modal', '#_task_modal', function () {
        tinyMCE.remove('.tinymce-task');
        // Clear _ticket_message from single tickets in case user tried to convert ticket to task to prevent populating the fields again with the last ticket message click
        if (typeof (_ticket_message) != 'undefined') {
            _ticket_message = undefined;
        }
        if ($(this).attr('data-lead-id') != undefined && !$(this).attr('data-task-created')) {
            init_lead($(this).attr('data-lead-id'));
        }
        $('body #_task_modal .datepicker').datetimepicker('destroy');
        $('#_task').empty();
    });

    // Don't allow the task modal to close if lightbox is visible in for the task attachments
    // Used when user hit the ESC button
    // Empty task data
    $('body').on('hide.bs.modal', '#task-modal', function () {
        if ($('#lightbox').is(':visible') == true) {
            return false;
        }
        if (typeof (taskAttachmentDropzone) != 'undefined') {
            taskAttachmentDropzone.destroy();
        }
        tinyMCE.remove('#task_view_description');

    });
    $('body').on('hidden.bs.modal', '#task-modal', function () {
        $('#task-modal .data').empty();
    });

    $('body').on('shown.bs.modal', '#task-modal', function () {
        init_tags_inputs();
        fix_task_modal_left_col_height();
        $(document).off('focusin.modal');
        var current_url = window.location.href;
        if (current_url.indexOf('#comment_') > -1) {
            var task_comment_id = current_url.split('#comment_');
            task_comment_id = task_comment_id[task_comment_id.length - 1];
            $('[data-task-comment-href-id="' + task_comment_id + '"]').click();
        }
    });

    // On focus out on the taks modal single update the tags in case changes are found
    $('body').on('blur', '#task-modal ul.tagit li.tagit-new input', function () {
        setTimeout(function () {
            task_single_update_tags();
        }, 100);
    });

    // Assign task to staff member
    $('body').on('change', 'select[name="select-assignees"]', function () {
        $('body').append('<div class="dt-loader"></div>');
        var data = {};
        data.assignee = $('select[name="select-assignees"]').val();
        if (data.assignee != '') {
            data.taskid = $(this).attr('data-task-id');
            $.post(admin_url + 'tasks/add_task_assignees', data).done(function (response) {
                $('body').find('.dt-loader').remove();
                response = JSON.parse(response);
                // reload_tasks_tables();
                // init_task_modal(data.taskid);
                window.location.reload();
                alert_float('success', "Task assignee added successfully.");
            });
        }
    });

    // Add follower to task
    $('body').on('change', 'select[name="select-followers"]', function () {
        var data = {};
        data.follower = $('select[name="select-followers"]').val();
        if (data.follower != '') {
            data.taskid = $(this).attr('data-task-id');
            $('body').append('<div class="dt-loader"></div>');
            $.post(admin_url + 'tasks/add_task_followers', data).done(function (response) {
                response = JSON.parse(response);
                $('body').find('.dt-loader').remove();
                init_task_modal(data.taskid);
            });
        }
    });


    $('body').on('click', '.close-task-stats', function () {
        $('#task-tracking-stats-modal').modal('hide');
    });

    // Remove tracking status div because its appended automatically to the DOM on each click
    $('body').on('hidden.bs.modal', '#task-tracking-stats-modal', function () {
        $('#tracking-stats').remove();
    });

    // Task modal single chart for logged time by assigned users
    $('body').on('show.bs.modal', '#task-tracking-stats-modal', function () {
        var tracking_chart_selector = $('body').find('#task-tracking-stats-chart');
        setTimeout(function () {
            if (typeof (task_track_chart) != 'undefined') {
                task_track_chart.destroy();
            }
            task_track_chart = new Chart(tracking_chart_selector, {
                type: 'line',
                data: task_tracking_stats_data,
                options: {
                    legend: {
                        display: false,
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                    tooltips: {
                        enabled: true,
                        mode: 'single',
                        callbacks: {
                            label: function (tooltipItems, data) {
                                return decimalToHM(tooltipItems.yLabel);
                            }
                        }
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                min: 0,
                                userCallback: function (label, index, labels) {
                                    return decimalToHM(label);
                                },
                            }
                        }]
                    },
                }
            });
        }, 800);
    });

    /* Tasks End */
    $('body').on('shown.bs.modal', '#sync_data_proposal_data', function () {
        if ($('#sync_data_proposal_data').data('rel-type') == 'lead') {
            $('#lead-modal .data').eq(0).css('height', ($('#sync_data_proposal_data .modal-content').height() + 80) + 'px').css('overflow-x', 'hidden');
        }
    });

    $('body').on('hidden.bs.modal', '#sync_data_proposal_data', function () {
        if ($('#sync_data_proposal_data').data('rel-type') == 'lead') {
            $('#lead-modal .data').prop('style', '');
        }
    });

    if (typeof (c_leadid) != 'undefined' && c_leadid != '') {
        init_lead(c_leadid);
    }

    // Status color change
    $('body').on('click', '.leads-kan-ban .cpicker', function () {
        var color = $(this).data('color');
        var status_id = $(this).parents('.panel-heading-bg').data('status-id');
        $.post(admin_url + 'leads/change_status_color', {
            color: color,
            status_id: status_id
        });
    });

    $('body').on('click', '[lead-edit]', function (e) {
        e.preventDefault();
        $('body .lead-view').toggleClass('hide');
        $('body .lead-edit').toggleClass('hide');
    });

    $('body').on('click', '.new-lead-from-status', function (e) {
        e.preventDefault();
        var status_id = $(this).parents('.kan-ban-col').data('col-status-id');
        init_lead_modal_data(undefined, admin_url + 'leads/lead?status_id=' + status_id);
    });

    $('body').on('change', 'input.include_leads_custom_fields', function () {
        var val = $(this).val();
        var fieldid = $(this).data('field-id');
        if (val == 2) {
            $('#merge_db_field_' + fieldid).removeClass('hide');
        } else {
            $('#merge_db_field_' + fieldid).addClass('hide');
        }
        if (val == 3) {
            $('#merge_db_contact_field_' + fieldid).removeClass('hide');
        } else {
            $('#merge_db_contact_field_' + fieldid).addClass('hide');
        }
    });

    if (calendar_selector.length > 0) {
        validate_calendar_form();
        var calendar_settings = {
            customButtons: {},
            header: {
                left: 'prev,next today',
                center: 'title',
                right: 'month,agendaWeek,agendaDay,viewFullCalendar,calendarFilter'
            },
            editable: false,
            eventLimit: parseInt(app_calendar_events_limit) + 1,

            views: {
                day: {
                    eventLimit: false
                }
            },
            defaultView: app_default_view_calendar,
            isRTL: (isRTL == 'true' ? true : false),
            eventStartEditable: false,
            timezone: app_timezone,
            firstDay: parseInt(app_calendar_first_day),
            year: moment.tz(app_timezone).format("YYYY"),
            month: moment.tz(app_timezone).format("M"),
            date: moment.tz(app_timezone).format("DD"),
            loading: function (isLoading, view) {
                if (!isLoading) { // isLoading gives boolean value
                    $('.dt-loader').addClass('hide');
                } else {
                    $('.dt-loader').removeClass('hide');
                }
            },
            // eventSources: [{
            //     url: admin_url + 'calendar/get_calendar_data',
            //     data: function () {
            //         var filterParams = {};
            //         $('#calendar_filters').find('input:checkbox:checked').map(function () {
            //             filterParams[$(this).attr('name')] = true;
            //         }).get();
            //         if (!jQuery.isEmptyObject(filterParams)) {
            //             filterParams['calendar_filters'] = true;
            //             return filterParams;
            //         }
            //     },
            //     type: 'POST',
            //     error: function () {
            //         console.error('There was error fetching calendar data');
            //     },
            // }],
            eventLimitClick: function (cellInfo, jsEvent) {
                $('#calendar').fullCalendar('gotoDate', cellInfo.date);
                $('#calendar').fullCalendar('changeView', 'basicDay');
            },
            eventRender: function (event, element) {
                element.attr('title', event._tooltip);
                element.attr('onclick', event.onclick);
                element.attr('data-toggle', 'tooltip');
                element.attr('data-html', 'true');
                if (!event.url) {
                    element.click(function () {
                        view_event(event.eventid);
                    });
                }
            },
            dayClick: function (date, jsEvent, view) {
                var formatted = moment(date.format()).locale('en').format('YYYY-MM-DD');
                var formatted1 = moment(date.format()).locale('en').format('MM/DD/YYYY');
                $("input[name='current_date']").val(formatted);
                $('#date-select').html('<b>Date Chosen: </b>' + formatted1);

                $('#newEventModal').modal('show');
                // $.post(admin_url + 'misc/format_date', {date:  moment(date.format()).locale('en').format('YYYY-MM-DD')}).done(function (formatted) {
                //     $("input[name='current_date'].datetimepicker").val(formatted);
                // });

                /*
                ** Added By Sanjay on 02/12/2018 
                ** open new item popup on calender day
                */
                //$('#create_list').modal('show');
                // $.post(admin_url + 'misc/format_date', {date: moment(date.format()).locale('en').format('YYYY-MM-DD')}).done(function (formatted) {
                //     $("input[name='current_date']").val(formatted);
                // });

                // return false;
            }
        }
        if ($('body').hasClass('home')) {
            calendar_settings.customButtons.viewFullCalendar = {
                text: appLang.calendar_expand,
                click: function () {
                    window.location.href = admin_url + 'calendar/index';
                }
            }
        }
        calendar_settings.customButtons.calendarFilter = {
            text: appLang.filter_by.toLowerCase(),
            click: function () {
                slideToggle('#calendar_filters');
            }
        }
        if (is_staff_member == 1) {
            if (google_api != '') {
                calendar_settings.googleCalendarApiKey = google_api;
            }
            if (calendarIDs != '') {
                calendarIDs = JSON.parse(calendarIDs);
                if (calendarIDs.length != 0) {
                    if (google_api != '') {
                        for (var i = 0; i < calendarIDs.length; i++) {
                            var _gcal = {};
                            _gcal.googleCalendarId = calendarIDs[i];
                            calendar_settings.eventSources.push(_gcal);
                        }
                    } else {
                        console.error('You have setup Google Calendar IDs but you dont have specified Google API key. To setup Google API key navigate to Setup->Settings->Misc');
                    }
                }
            }
        }
        // Init calendar
        calendar_selector.fullCalendar(calendar_settings);
        var new_event = get_url_param('new_event');
        if (new_event) {
            $('#newEventModal').modal('show');
            $("input[name='current_date']").val(get_url_param('date'));
        }
    }
    $('body').on('change', 'select[name="tax"]', function () {
        var sp_tax_2 = $('body').find('select[name="tax2"]');
        var sp_tax_1 = $(this);
        if (sp_tax_1.val() != '') {
            sp_tax_2.prop('disabled', false);
        } else {
            sp_tax_2.prop('disabled', true);
            if (sp_tax_2.val() != '') {
                sp_tax_1.val(sp_tax_2.val());
                sp_tax_2.val('');
                sp_tax_1.selectpicker('refresh');
            }
        }
        sp_tax_2.selectpicker('refresh');
    });

    $('input[name="notify_type"]').on('change', function () {
        var val = $(this).val();
        var specific_staff_notify = $('#specific_staff_notify');
        var role_notify = $('#role_notify');
        if (val == 'specific_staff') {
            specific_staff_notify.removeClass('hide');
            role_notify.addClass('hide');
        } else if (val == 'roles') {
            specific_staff_notify.addClass('hide');
            role_notify.removeClass('hide');
        } else if (val == 'assigned') {
            specific_staff_notify.addClass('hide');
            role_notify.addClass('hide');
        }
    });

    // Auto focus the lead name if user is adding new lead
    $('body').on('shown.bs.modal', '#lead-modal', function (e) {
        custom_fields_hyperlink();
        if ($('body').find('#lead-modal input[name="leadid"]').length == 0) {
            $('body').find('#lead-modal input[name="name"]').focus();
        }
    });

    // On hidden lead modal some actions need to be operated here
    $('#lead-modal').on('hidden.bs.modal', function (event) {
        $(this).data('bs.modal', null);
        $('#lead_reminder_modal').html('');
        // clear the hash
        if (!$('#lead-modal').is(':visible')) {
            history.pushState("", document.title, window.location.pathname + window.location.search);
        }
        $('body #lead-modal .datetimepicker').datetimepicker('destroy');
        if (typeof (leadAttachmentsDropzone) != 'undefined') {
            leadAttachmentsDropzone.destroy();
        }
    });

    // + button for adding more attachments
    var addMoreAttachmentsInputKey = 1;
    $('body').on('click', '.add_more_attachments', function () {
        if ($(this).hasClass('disabled')) {
            return false;
        }
        var total_attachments = $('.attachments input[name*="attachments"]').length;
        if ($(this).data('ticket') && total_attachments >= app_maximum_allowed_ticket_attachments) {
            return false;
        }
        var newattachment = $('.attachments').find('.attachment').eq(0).clone().appendTo('.attachments');
        newattachment.find('input').removeAttr('aria-describedby aria-invalid');
        newattachment.find('.has-error').removeClass('has-error');
        newattachment.find('input').attr('name', 'attachments[' + addMoreAttachmentsInputKey + ']').val('');
        newattachment.find('input').attr('name', 'attachments[' + addMoreAttachmentsInputKey + ']').parent().parent().find('.form-control').html('');
        newattachment.find('p[id*="error"]').remove();
        newattachment.find('i').removeClass('fa-plus').addClass('fa-minus');
        newattachment.find('button').removeClass('add_more_attachments').addClass('remove_attachment').removeClass('btn-success').addClass('btn-danger');
        addMoreAttachmentsInputKey++;
    });
    // Remove attachment
    $('body').on('click', '.remove_attachment', function () {
        $(this).parents('.attachment').remove();
    });

    $('body').on('hidden.bs.modal', '#convert_lead_to_client_modal', function (event) {
        $(this).data('bs.modal', null);
    });

    // Set hash on modal tab change
    $('body').on('click', '#lead-modal a[data-toggle="tab"]', function () {
        if (this.hash == '#tab_lead_profile' || this.hash == '#attachments' || this.hash == '#lead_notes' || this.hash == '#lead_activity') {
            window.location.hash = this.hash;
        } else {
            history.pushState("", document.title, window.location.pathname + window.location.search);
        }
    });
    $('body').on('click', '#lead_enter_activity', function () {
        var message = $('#lead_activity_textarea').val();
        var aLeadId = $('#leadid').val();
        if (message == '') {
            return;
        }
        $.post(admin_url + 'leads/add_activity', {
            leadid: aLeadId,
            activity: message
        }).done(function () {
            window.location.reload();
            alert_float('success', "activity added successfully.");
        }).fail(function (data) {
            alert_float('danger', data.responseText);
        });
    });
    // Submit notes on lead modal do ajax not the regular request
    $('body').on('submit', '#lead-modal #lead-notes', function () {
        var form = $(this);
        var data = $(form).serialize();
        $.post(form.attr('action'), data).done(function (lead_id) {
            init_lead_modal_data(lead_id);
        }).fail(function (data) {
            $('#lead-modal').modal('hide');
            alert_float('danger', data.responseText);
        });
        return false;
    });

    // Add additional server params $_POST
    var LeadsServerParams = {
        "custom_view": "[name='custom_view']",
        "assigned": "[name='view_assigned']",
        "status": "[name='view_status']",
        "source": "[name='view_source']",
        "eventtype": "[name='view_eventtype']",
        "eventdate": "[name='view_eventdate']",
        "inquireddate": "[name='view_inquireddate']"
    }

    /**
     * Added By : Vaidehi
     * Dt : 20/12/2017
     * Additional server params $_POST
     */
    var ProjectsServerParams = {
        "custom_view": "[name='project_custom_view']",
        "assigned": "[name='view_project_assigned']",
        "status": "[name='view_project_status']",
        "eventtype": "[name='view_project_eventtype']",
        "eventdate": "[name='view_projects_eventdate']"
    }

    // Init the table
    var _tableLeads = $('.table-leads');
    if (_tableLeads.length) {
        var headers_leads = _tableLeads.find('th');
        initDataTable('.table-leads', admin_url + 'leads?table_leads=true', [headers_leads.length - 1, 0], [headers_leads.length - 1, 0, 1], LeadsServerParams, [_tableLeads.find('th.date-created').index(), 'DESC']);
        $.each(LeadsServerParams, function (i, obj) {
            $('select' + obj).on('change', function () {
                _tableLeads.DataTable().ajax.reload();
            });
        });
        $('body').on('click', '.ranges .applyBtn', function () {
            _tableLeads.DataTable().ajax.reload();
        });
    }

    var _tableProjects = $('.table-projects');
    if (_tableProjects.length) {
        var headers_projects = _tableProjects.find('th');
        initDataTable('.table-projects', admin_url + 'projects?table_projects=true', [headers_projects.length - 1, 0], [headers_projects.length - 1, 0], ProjectsServerParams, [_tableProjects.find('th.date-created').index(), 'DESC']);
        $.each(ProjectsServerParams, function (i, obj) {
            $('select' + obj).on('change', function () {
                _tableProjects.DataTable().ajax.reload();
            });
        });
        $('body').on('click', '.ranges .applyBtn', function () {
            _tableProjects.DataTable().ajax.reload();
        });
    }
    var _tableMeetings = $('.table-meetings');
    if (_tableMeetings.length) {
        var headers_meetings = _tableMeetings.find('th');
        initDataTable('.table-meetings', admin_url + 'meetings?table_meetings=true', [headers_meetings.length - 1, 0], [headers_meetings.length - 1, 0], ProjectsServerParams, [_tableMeetings.find('th.date-created').index(), 'DESC']);
        $.each(ProjectsServerParams, function (i, obj) {
            $('select' + obj).on('change', function () {
                _tableMeetings.DataTable().ajax.reload();
            });
        });
        $('body').on('click', '.ranges .applyBtn', function () {
            _tableMeetings.DataTable().ajax.reload();
        });
    }

    $('body').ready(function () {
        $("#view_inquireddate").val("");
        $("#view_eventdate").val("");
        $("#view_projects_eventdate").val("");
    });

    // $(".summary_status").on("click",function(){
    //     var statusid = $(this).attr("statusid");
    //     alert(statusid);
    // });

    // When adding if lead is contacted today
    $('body').on('change', 'input[name="contacted_today"]', function () {
        var checked = $(this).prop('checked');
        var lsdc = $('.lead-select-date-contacted');
        (checked == false ? lsdc.removeClass('hide') : lsdc.addClass('hide'));
    });

    $('body').on('change', 'input[name="contacted_indicator"]', function () {
        var lsdc = $('.lead-select-date-contacted');
        ($(this).val() == 'yes' ? lsdc.removeClass('hide') : lsdc.addClass('hide'));
    });

    // Fix for checkboxes ID duplicate when table goes responsive
    $('body').on('click', 'table.dataTable tbody td:first-child', function () {
        var tr = $(this).parents('tr');
        if ($(this).parents('table').DataTable().row(tr).child.isShown()) {
            var switchBox = $(tr).next().find('input.onoffswitch-checkbox');
            if (switchBox.length > 0) {
                var switchBoxId = Math.random().toString(16).slice(2);
                switchBox.attr('id', switchBoxId).next().attr('for', switchBoxId);
            }
        }
    });

    // Show please wait text on button where data-loading-text is added
    $('body').on('click', '[data-loading-text]', function () {
        var form = $(this).data('form');
        if (form != null) {
            if ($(form).valid()) {
                $(this).button('loading');
            }
        } else {
            $(this).button('loading');
        }
    });

    // Custom close function for reminder modals in case is modal in modal
    $('body').on('click', '.close-reminder-modal', function () {
        $(".reminder-modal-" + $(this).data('rel-type') + '-' + $(this).data('rel-id')).modal('hide');
    });
    // Recalculate responsive for hidden tables
    $('body').on('shown.bs.tab', 'a[data-toggle="tab"]', function (e) {
        $($.fn.dataTable.tables(true)).DataTable().responsive.recalc();
    });

    // Init are you sure on forms
    $('form').not('#single-ticket-form,#calendar-event-form,#proposal-form').areYouSure();


    // For inline tinymce editors when content is blank a message is shown, on click this message should be hidden.
    $('body').on('click', '.editor-add-content-notice', function () {
        $(this).remove();
        tinymce.triggerSave();
    });

    // Global on change for mass delete to hide all other elements for bulk actions
    $('.bulk_actions').on('change', 'input[name="mass_delete"]', function () {
        var $bulkChange = $('#bulk_change');
        if ($(this).prop('checked') == true) {
            $bulkChange.find('select').selectpicker('val', '');
        }
        $bulkChange.toggleClass('hide');
        $('.mass_delete_separator').toggleClass('hide');
    });
    // Clear todo modal values when modal is hidden
    $('body').on('hidden.bs.modal', '#__todo', function () {
        var $toDo = $('#__todo');
        $toDo.find('input[name="todoid"]').val('');
        $toDo.find('textarea[name="description"]').val('');
        $toDo.find('.add-title').addClass('hide');
        $toDo.find('.edit-title').addClass('hide');
    });

    // Focus staff todo description
    $('body').on('shown.bs.modal', '#__todo', function () {
        var $toDo = $('#__todo');
        $toDo.find('textarea[name="description"]').focus();
        if ($toDo.find('input[name="todoid"]').val() != '') {
            $toDo.find('.add-title').addClass('hide');
            $toDo.find('.edit-title').removeClass('hide');
        } else {
            $toDo.find('.add-title').removeClass('hide');
            $toDo.find('.edit-title').addClass('hide');
        }
    });

    // Focus search input on click
    $('#top_search_button button').on('click', function () {
        var $searchInput = $('#search_input');
        $searchInput.focus();
        if ($(this).hasClass('search_remove')) {
            $(this).html('<i class="fa fa-search"></i>').removeClass('search_remove');
            original_top_search_val = '';
            $('#search_results').html('');
            $searchInput.val('');
        }
    });

    // Fix for dropdown search to close if user click anyhere on html except on dropdown
    $("body").click(function (e) {
        if (!$(e.target).parents('#top_search_dropdown').hasClass('search-results')) {
            $('#top_search_dropdown').remove();
        }
    });

    // Init tooltips
    $('body').tooltip({
        selector: '[data-toggle="tooltip"]'
    });

    // Init popovers
    $('body').popover({
        selector: '[data-toggle="popover"]',
    });

    // Remove tooltip fix on body click (in case user clicked link and tooltip stays open)
    $('body').on('click', function () {
        $('.tooltip').remove();
    });
    // Close all popovers if user click on body and the click is not inside the popover content area
    $('body').on('click', function (e) {
        $('[data-toggle="popover"],.manual-popover').each(function () {
            //the 'is' for buttons that trigger popups
            //the 'has' for icons within a button that triggers a popup
            if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
                $(this).popover('hide');
            }
        });
    });
    // Do not close the dropdownmenu for filter when filtering
    $('body').on('click', '._filter_data ul.dropdown-menu li a,.not-mark-as-read-inline,.not_mark_all_as_read a', function (e) {
        e.stopPropagation();
        e.preventDefault();
    });

    // Add are you sure on all delete links (onclick is not included here)
    $('body').on('click', '._delete', function (e) {

        /*var r = confirm(appLang.confirm_action_prompt);
        if (r == true) {
            return true;
        } else {
            return false;
        }*/

        var link = e.currentTarget['href'];

        if (link.indexOf('removevendor') >= 0) {
            var alertTitle = 'Please ensure all your outstanding invoices are cleared. Are you sure?';
            var confirmText = 'Yes, delete it!';
        } else if (link.indexOf('subscription') >= 0) {
            var alertTitle = 'Your subscription will be cancelled. Are you sure?';
            var confirmText = 'Yes, cancel it!';
        } else {
            var alertTitle = 'Are you sure?';
            var confirmText = 'Yes, delete it!';
        }
        /**
         * Added By : Vaidehi
         * Dt : 11/22/2017
         * to submit form without calling swal for staff member delete
         */
        if ($("#delete_staff").is(":visible")) {
            $(".dirty").submit();
        } else {
            swal({
                title: alertTitle,
                text: "You won't be able to revert this!",
                type: 'warning',
                showCancelButton: true,
                confirmButtonClass: 'btn btn-danger',
                confirmButtonText: confirmText,
                showLoaderOnConfirm: true,
                preConfirm: function () {
                    return new Promise(function (resolve, reject) {
                        $.ajax({
                            url: link,
                            type: 'get'
                        })
                            .done(function (response) {
                                //console.log(response);return false;
                                if (response.indexOf(':') > -1) {
                                    /*
                                    * Modified By : Vaidehi
                                    * Dt : 11/20/2017
                                    * to show correct message if delete operation is not successful
                                    */
                                    swal('Oops...', response.substring(response.indexOf(':') + 1), 'warning');
                                } else if (response == "in_package") {
                                    if (link.indexOf('subscription') >= 0) {
                                        swal('Oops...', "Something went wrong. ", 'warning');
                                    } else {
                                        swal('Oops...', "This Product/service is already being used. Please remove from the existing references. ", 'warning');
                                    }
                                } else {
                                    if (link.indexOf('subscription') >= 0) {
                                        swal('Cancelled!', response.message, response.status);
                                        window.location.reload();
                                    } else {
                                        swal('Deleted!', response.message, response.status);
                                        window.location.reload();
                                    }
                                }
                            })
                            .fail(function () {
                                swal('Oops...', 'Something went wrong !', 'error');
                            });
                    });
                },
                allowOutsideClick: false
            }).catch(swal.noop);
            return false;
        }

    });

    // Add are you sure on all delete links (onclick is not included here)
    $('body').on('click', '.parent_message_delete', function (e) {
        var qs = getQueryStrings();
        var myLidParam = qs["lid"];
        var myPidParam = qs["pid"];
        var myEidParam = qs["eid"];

        var link = e.currentTarget['href'];

        swal({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonClass: 'btn btn-danger',
            confirmButtonText: 'Yes, delete it!',
            showLoaderOnConfirm: true,
            preConfirm: function () {
                return new Promise(function (resolve, reject) {
                    $.ajax({
                        url: link,
                        type: 'Get',
                    })
                        .done(function (response) {
                            if (response.indexOf(':') > -1) {
                                swal('Oops...', response.substring(response.indexOf(':') + 1), 'warning');
                            } else {
                                swal('Deleted!', response.message, response.status);
                                if (myLidParam > 0) {
                                    window.location.href = admin_url + 'messages?lid=' + myLidParam;
                                } else if (myPidParam > 0) {
                                    window.location.href = admin_url + 'messages?pid=' + myPidParam;
                                } else if (myEidParam > 0) {
                                    window.location.href = admin_url + 'messages?eid=' + myEidParam;
                                } else {
                                    window.location.href = admin_url + 'messages';
                                }
                            }
                        })
                        .fail(function () {
                            swal('Oops...', 'Something went wrong !', 'error');
                        });
                });
            },
            allowOutsideClick: false
        }).catch(swal.noop);
        return false;

    });
    // Add are you sure on all delete links (onclick is not included here)
    $('body').on('click', '._invoicedelete', function (e) {

        var link = e.currentTarget['href'];

        swal({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonClass: 'btn btn-danger',
            confirmButtonText: 'Yes, delete it!',
            showLoaderOnConfirm: true,
            preConfirm: function () {
                return new Promise(function (resolve, reject) {
                    $.ajax({
                        url: link,
                        type: 'Get',
                    })
                        .done(function (response) {
                            if (response.indexOf(':') > -1) {
                                swal('Oops...', response.substring(response.indexOf(':') + 1), 'warning');
                            } else {
                                swal('Deleted!', response.message, response.status);
                                if (window.location.search != "") {
                                    window.location.href = admin_url + 'invoices' + window.location.search;
                                } else {
                                    window.location.href = admin_url + 'invoices';
                                }
                            }
                        })
                        .fail(function () {
                            swal('Oops...', 'Something went wrong !', 'error');
                        });
                });
            },
            allowOutsideClick: false
        }).catch(swal.noop);
        return false;

    });
    // Fix for all modals scroll..
    $('body').on('shown.bs.modal', '.modal', function () {
        $('body').addClass('modal-open');
        // Close the top timers dropdown in case user click on some task
        $('body').find('#started-timers-top').parents('li').removeClass('open');
    });

    $('body').on('hidden.bs.modal', '.modal', function (event) {
        $('.modal:visible').length && $(document.body).addClass('modal-open');
        $(this).data('bs.modal', null);
    });

    $('.datepicker.activity-log-date').on('change', function () {
        $('.table-activity-log').DataTable().ajax.reload();
    });

    // For expenses and recurring tasks
    $('body').on('change', '[name="repeat_every"],[name="recurring"]', function () {
        var val = $(this).val();
        val == 'custom' ? $('.recurring_custom').removeClass('hide') : $('.recurring_custom').addClass('hide');
        if (val != '' && val != 0) {
            $('body').find('#recurring_ends_on').removeClass('hide');
        } else {
            $('body').find('#recurring_ends_on').addClass('hide');
            $('body').find('#recurring_ends_on input').val('');
        }
    });

    $('select[name="range"]').on('change', function () {
        var $period = $('.period');
        if ($(this).val() == 'period') {
            $period.removeClass('hide');
        } else {
            $period.addClass('hide');
            $period.find('input').val('');
        }
    });

    // Validating the knowledge group form
    _validate_form($('#kb_group_form'), {
        name: 'required'
    }, manage_kb_groups);

    // On hidden modal reset the values
    $('#kb_group_modal').on('hidden.bs.modal', function (event) {
        $('#additional').html('');
        $('#kb_group_modal input').val('');
        $('.add-title').removeClass('hide');
        $('.edit-title').removeClass('hide');
        $('#kb_group_modal input[name="group_order"]').val($('table tbody tr').length + 1);
    });

    // On mass_select all select all the availble rows in the tables.
    $('body').on('change', '#mass_select_all', function () {
        var to, rows, checked;
        to = $(this).data('to-table');

        rows = $('.table-' + to).find('tbody tr');
        checked = $(this).prop('checked');
        $.each(rows, function () {
            var checkbox = $($(this).find('td').eq(0)).find('input').prop('checked', checked);
        });
    });
    // Init the editor for email templates where changing data is allowed
    $('body').on('show.bs.modal', '.modal.email-template', function () {
        init_editor($(this).data('editor-id'), {
            urlconverter_callback: 'merge_field_format_url'
        });
    });
    // Remove the editor inited for the email sending templates where changing the email template data is allowed
    $('body').on('hidden.bs.modal', '.modal.email-template', function () {
        tinymce.remove($(this).data('editor-id'));
    });

    // Customizer close and remove open from session
    $('.close-customizer').on('click', function (e) {
        e.preventDefault();

        setup_menu.addClass(isRTL == 'true' ? "fadeOutRight" : "fadeOutLeft");
        // Clear the session for setup menu so in reload wont be closed
        $.get(admin_url + 'misc/set_setup_menu_closed');
    });

    // Open customizer and add that is open to session
    $('.open-customizer').on('click', function (e) {
        e.preventDefault();

        if (setup_menu.hasClass(isRTL == 'true' ? "fadeOutRight" : "fadeOutLeft")) {
            setup_menu.removeClass(isRTL == 'true' ? "fadeOutRight" : "fadeOutLeft");
        }
        setup_menu.addClass(isRTL == 'true' ? "fadeInRight" : "fadeInLeft");
        setup_menu.addClass('display-block');
        // Set session that the setup menu is open in case of reload
        if (!is_mobile()) {
            $.get(admin_url + 'misc/set_setup_menu_open');
        }
        mainWrapperHeightFix();
    });
    // Change live the colors for colorpicker in kanban/pipeline
    $('body').on('click', '.cpicker', function () {
        var color = $(this).data('color');
        // Clicked on the same selected color
        if ($(this).hasClass('cpicker-big')) {
            return false;
        }
        $(this).parents('.cpicker-wrapper').find('.cpicker-big').removeClass('cpicker-big').addClass('cpicker-small');
        $(this).removeClass('cpicker-small', 'fast').addClass('cpicker-big', 'fast');
        if ($(this).hasClass('kanban-cpicker')) {
            $(this).parents('.panel-heading-bg').css('background', color);
            $(this).parents('.panel-heading-bg').css('border', '1px solid ' + color);
        } else if ($(this).hasClass('calendar-cpicker')) {
            $('body').find('input[name="color"]').val(color);
        }
    });

    // Notification profile link click
    $('body').on('click', '.notification_link', function () {
        var link = $(this).data('link');
        var not_href;
        not_href = link.split('#');
        if (!not_href[1]) {
            window.location.href = link;
        }
    });

    /* Check if postid in notification url to open the newsfeed */
    $('body').on('click', '.notifications a.notification-top, .notification_link', function (e) {

        e.preventDefault();
        var $notLink = $(this);
        var not_href, not_href_id;
        if ($notLink.hasClass('notification_link')) {
            not_href = $notLink.data('link');
        } else {
            not_href = e.currentTarget.href;
        }
        not_href = not_href.split('#');
        var notRedirect = true;

        if (not_href[1] && not_href[1].indexOf('=') > -1) {
            notRedirect = false;
            not_href_id = not_href[1].split('=')[1];
            if (not_href[1].indexOf('postid') > -1) {
                postid = not_href_id;
                $('.open_newsfeed').click();
            } else if (not_href[1].indexOf('taskid') > -1) {
                notRedirect = true;
                not_href = admin_url + "tasks/dashboard/" + not_href_id;
                //init_task_modal(not_href_id);
            } else if (not_href[1].indexOf('leadid') > -1) {
                notRedirect = true;
                not_href = admin_url + "leads/dashboard/" + not_href_id;
                //init_lead(not_href_id);
            } else if (not_href[1].indexOf('eventid') > -1) {
                view_event(not_href_id);
            }
        }
        if (!$notLink.hasClass('desktopClick')) {
            $notLink.parent('li').find('.not-mark-as-read-inline').click();
        }
        if (notRedirect) {
            setTimeout(function () {
                window.location.href = not_href;
            }, 50);
        }
    });

    // Set notifications to read when notifictions dropdown is opened
    $('.notifications-wrapper').on('show.bs.dropdown', function () {
        clearInterval(autocheck_notifications_timer_id);
        var total = notifications_wrapper.find('.notifications').attr('data-total-unread');
        if (total > 0) {
            $.post(admin_url + 'misc/set_notifications_read').done(function (response) {
                response = JSON.parse(response);
                if (response.success == true) {
                    document.title = doc_initial_title;
                    $(".icon-notifications").addClass('hide');
                }
            });
        }
    });

    // Auto check for new notifications
    if (app_auto_check_for_new_notifications != 0) {
        autocheck_notifications_timer_id = setInterval(function () {
            fetch_notifications();
        }, app_auto_check_for_new_notifications * 1000); //time in milliseconds
    }

    // Tables
    init_table_tickets();
    init_table_announcements();
    init_table_staff_projects();

    // Ticket pipe log and system activity log
    var ActivityLogServerParams = [];
    ActivityLogServerParams['activity_log_date'] = '[name="activity_log_date"]';
    initDataTable('.table-activity-log', window.location.href, 'undefined', 'undefined', ActivityLogServerParams, [1, 'DESC']);
    // if ($('.table-invoices').length > 0 || $('.table-estimates').length > 0) {
    //     // Invoices additional server params
    //     var Invoices_Estimates_ServerParams = {};
    //     var Invoices_Estimates_Filter = $('._hidden_inputs._filters input')
    //     $.each(Invoices_Estimates_Filter, function() {
    //         Invoices_Estimates_ServerParams[$(this).attr('name')] = '[name="' + $(this).attr('name') + '"]';
    //     });
    //     // Invoices tables
    //     initDataTable('.table-invoices', admin_url + 'invoices/list_invoices', 'undefined', 'undefined', Invoices_Estimates_ServerParams, [
    //         [3, 'DESC'],
    //         [0, 'DESC']
    //     ]);

    //     // Estimates table
    //     initDataTable('.table-estimates', admin_url + 'estimates/list_estimates', 'undefined', 'undefined', Invoices_Estimates_ServerParams, [
    //         [3, 'DESC'],
    //         [0, 'DESC']
    //     ]);
    // }

    // var TasksServerParams = {},
    //     Tasks_Filters;
    // Tasks_Filters = $('._hidden_inputs._filters._tasks_filters input');
    // $.each(Tasks_Filters, function() {
    //     TasksServerParams[$(this).attr('name')] = '[name="' + $(this).attr('name') + '"]';
    // });

    // Add additional server params $_POST
    var TasksServerParams = {
        "custom_view": "[name='custom_view']",
        "assigned": "[name='view_assigned']",
        "status": "[name='view_status']",
        "taskdate": "[name='view_taskdate']"
    }

    // Init the table
    var _tableTasks = $('.table-tasks');
    if (_tableTasks.length) {
        var qs = getQueryStrings();
        var myLidParam = qs["lid"];
        var myPidParam = qs["pid"];
        var myEidParam = qs["eid"];
        var headers_tasks = _tableTasks.find('th');
        if (myLidParam > 0) {
            initDataTable('.table-tasks', admin_url + 'tasks?table_tasks=true&lid=' + myLidParam, [headers_tasks.length - 1, 0], [headers_tasks.length - 1, 0, 1], TasksServerParams);
        } else if (myPidParam > 0) {
            initDataTable('.table-tasks', admin_url + 'tasks?table_tasks=true&pid=' + myPidParam, [headers_tasks.length - 1, 0], [headers_tasks.length - 1, 0, 1], TasksServerParams);
        } else if (myEidParam > 0) {
            initDataTable('.table-tasks', admin_url + 'tasks?table_tasks=true&eid=' + myEidParam, [headers_tasks.length - 1, 0], [headers_tasks.length - 1, 0, 1], TasksServerParams);
        } else {
            initDataTable('.table-tasks', admin_url + 'tasks?table_tasks=true', [headers_tasks.length - 1, 0], [headers_tasks.length - 1, 0, 1], TasksServerParams);
        }
        $.each(TasksServerParams, function (i, obj) {
            $('select' + obj).on('change', function () {
                _tableTasks.DataTable().ajax.reload();
            });
        });

        $('body').on('click', '.ranges .applyBtn', function () {
            _tableTasks.DataTable().ajax.reload();
        });
    }

    $('body').ready(function () {
        $("#view_taskdate").val("");
        $("#view_invoicedate").val("");
    });

    // Tasks not sortable
    var _tns = [($('.table-tasks').find('th').length - 1)];

    var tasks_sort = 2;
    var _tasks_table_url = admin_url + 'tasks';

    if ($('body').hasClass('tasks_page')) {
        _tns.push(0);
        tasks_sort = 3;
        _tasks_table_url += '?bulk_actions=true';
    }
    _table_api = initDataTable('.table-tasks', _tasks_table_url, _tns, _tns, TasksServerParams, [tasks_sort, 'ASC']);
    if (_table_api && $('body').hasClass('home')) {
        _table_api.column(4).visible(false, false)
            .column(5).visible(false, false)
            .column(6).visible(false, false)
            .columns.adjust();
    }

    // Added by Avni on 11/22/2017
    // Add additional server params $_POST

    var InvoiceServerParams = {
        "assigned": "[name='view_assigned']",
        "status": "[name='view_status']",
        "invoicedate": "[name='view_invoicedate']"
    }

    // Init the table
    var _tableInvoice = $('.table-invoices');
    if (_tableInvoice.length) {
        var qs = getQueryStrings();
        var myLidParam = qs["lid"];
        var myPidParam = qs["pid"];
        var myEidParam = qs["eid"];
        var headers_invoice = _tableInvoice.find('th');
        if (myLidParam > 0) {
            initDataTable('.table-invoices', admin_url + 'invoices?lid=' + myLidParam, [], [], InvoiceServerParams);
        } else if (myPidParam > 0) {
            initDataTable('.table-invoices', admin_url + 'invoices?pid=' + myPidParam, [], [], InvoiceServerParams);
        } else if (myEidParam > 0) {
            initDataTable('.table-invoices', admin_url + 'invoices?eid=' + myEidParam, [], [], InvoiceServerParams);
        } else {
            initDataTable('.table-invoices', admin_url + 'invoices', [], [], InvoiceServerParams);
        }
        $.each(InvoiceServerParams, function (i, obj) {
            $('select' + obj).on('change', function () {
                _tableInvoice.DataTable().ajax.reload();
            });
        });

        $('body').on('click', '.ranges .applyBtn', function () {
            _tableInvoice.DataTable().ajax.reload();
        });
    }

    // Send file modal populate the hidden files when is shown
    $('#send_file').on('show.bs.modal', function (e) {
        var $sendFile = $('#send_file');
        $sendFile.find('input[name="filetype"]').val($($(e.relatedTarget)).data('filetype'));
        $sendFile.find('input[name="file_path"]').val($($(e.relatedTarget)).data('path'));
        $sendFile.find('input[name="file_name"]').val($($(e.relatedTarget)).data('file-name'));
        if ($('input[name="email"]').length > 0) {
            $sendFile.find('input[name="send_file_email"]').val($('input[name="email"]').val());
        }
    });

    // Set password checkbox change
    $('body').on('change', 'input[name="send_set_password_email"]', function () {
        $('body').find('.client_password_set_wrapper').toggleClass('hide');
    });

    // Todo status change checkbox click
    $('body').on('change', '.todo input[type="checkbox"]', function () {
        var finished = $(this).prop('checked') === true ? 1 : 0;
        var id = $(this).val();
        window.location.href = admin_url + 'todo/change_todo_status/' + id + '/' + finished;
    });

    var todos_sortable = $(".todos-sortable");
    if (todos_sortable.length > 0) {
        // Makes todos sortable
        todos_sortable = todos_sortable.sortable({
            connectWith: ".todo",
            items: "li",
            handle: '.dragger',
            appendTo: "body",
            update: function (event, ui) {
                if (this === ui.item.parent()[0]) {
                    update_todo_items();
                }
            }
        });
    }

    /* NEWSFEED JS */
    $('body').on('click', '.open_newsfeed,.close_newsfeed', function (e) {
        e.preventDefault();
        if (typeof ($(this).data('close')) == 'undefined') {
            var url = admin_url + 'newsfeed/get_data';
            $.get(url, function (response) {
                $('#newsfeed').html(response);
                load_newsfeed(postid);
                init_newsfeed_form();
                init_selectpicker();
                init_lightbox();
            });
        } else if ($(this).data('close') === true) {
            newsFeedDropzone.destroy();
            $('#newsfeed').html('');
            total_new_post_files = 0;
            newsfeed_posts_page = 0;
            track_load_post_likes = 0;
            track_load_comment_likes = 0;
            postid = undefined;
        }
        $('#newsfeed').toggleClass('hide');
        $('body').toggleClass('noscroll');
    });

    if ($('[data-newsfeed-auto]').length > 0) {
        $('.open_newsfeed').click();
    }

    // When adding comment if user press enter to submit comment too
    $("body").on('keyup', '.comment-input input', function (event) {
        if (event.keyCode == 13) {
            add_comment(this);
        }
    });

    // Showing post likes modal
    $('#modal_post_likes').on('show.bs.modal', function (e) {
        track_load_post_likes = 0;
        $('#modal_post_likes_wrapper').empty();
        $('.likes_modal .modal-footer').removeClass('hide');
        var invoker = $(e.relatedTarget);
        var postid = $(invoker).data('postid')
        post_likes_total_pages = $(invoker).data('total-pages');
        $(".load_more_post_likes").attr('data-postid', postid);
        load_post_likes(postid);
    });

    // Showing comment likes modal
    $('#modal_post_comment_likes').on('show.bs.modal', function (e) {
        $('#modal_comment_likes_wrapper').empty();
        track_load_comment_likes = 0;
        $('.likes_modal .modal-footer').removeClass('hide');
        var invoker = $(e.relatedTarget);
        var commentid = $(invoker).data('commentid');
        comment_likes_total_pages = $(invoker).data('total-pages');
        $(".load_more_post_comment_likes").attr('data-commentid', commentid);
        load_comment_likes(commentid);
    });

    // Load more post likes from modal
    $('.load_more_post_likes').on('click', function (e) {
        e.preventDefault();
        load_post_likes($(this).data('postid'));
    });

    // Load more comment likes from modal
    $('.load_more_post_comment_likes').on('click', function (e) {
        e.preventDefault();
        load_comment_likes($(this).data('commentid'));
    });

    // Add post attachment used for dropzone
    $('.add-attachments').on('click', function (e) {
        e.preventDefault();
        $('#post-attachments').toggleClass('hide');
    });

    // Set post visibility on change select by department
    $('body').on('change', '#post-visibility', function () {
        var value = $(this).val();
        if (value != null) {
            if (value.indexOf('all') > -1) {
                if (value.length > 1) {
                    value.splice(0, 1);
                    $(this).selectpicker('val', value);
                }
            }
        }
    });

    /* SALES PART JS */

    // Init invoices top stats
    init_invoices_total();
    // Init expenses total
    init_expenses_total();
    // Make items sortable
    init_estimates_total();
    // Make items sortable
    init_items_sortable();

    $('.settings-textarea-merge-field').on('click', function (e) {
        e.preventDefault();
        var mergeField = $(this).text().trim();
        var textArea = $('textarea[name="settings[' + $(this).data('to') + ']"]');
        textArea.val(textArea.val() + "\n" + mergeField);
    });

    if ($('body').hasClass('estimates-pipeline')) {
        var estimate_id = $('input[name="estimateid"]').val();
        estimate_pipeline_open(estimate_id);
    }

    if ($('body').hasClass('proposals-pipeline')) {
        var proposal_id = $('input[name="proposalid"]').val();
        proposal_pipeline_open(proposal_id);
    }

    // Remove the disabled attribute from the currency input becuase the form dont read it
    $('body').on('submit', '._transaction_form', function () {
        // On submit re-calculate total and reorder the items for all cases
        calculate_total();
        reorder_items();
        $('select[name="currency"]').prop('disabled', false);
        $('select[name="project_id"]').prop('disabled', false);
        return true;
    });

    $('body').on('click', '.estimate-form-submit,.proposal-form-submit, .invoice-form-submit', function () {
        var form = $(this).parents('form:first');
        if ($(this).hasClass('invoice-form-submit')) {
            if (form.valid()) {
                if ($(this).hasClass('save-as-draft')) {
                    form.append(hidden_input('save_as_draft', 'true'));
                } else if ($(this).hasClass('save-and-send')) {
                    form.append(hidden_input('save_and_send', 'true'));
                }
                $(this).attr('disabled', true);
            }
            form.submit();
        } else {
            //alert(form);
            if (form.valid()) {

                if ($(this).hasClass('save-and-send')) {
                    form.append(hidden_input('save_and_send', 'true'));
                }
                $(this).attr('disabled', true);
            }
        }
        form.submit();
    });

    // add estimate_note
    $('body').on('submit', '#estimate-notes', function () {
        var est_notes = $('#estimate-notes');
        if (est_notes.find('textarea[name="description"]').val() == '') {
            return;
        }
        var form = $(this);
        var data = $(form).serialize();
        $.post(form.attr('action'), data).done(function (estimate_id) {
            // Reload the notes
            get_estimate_notes(estimate_id);
            // Reset the note textarea value
            est_notes.find('textarea[name="description"]').val('');
        });
        return false;
    });
    // Show quantity as change we need to change on the table QTY heading for better user experience
    $('body').on('change', 'input[name="show_quantity_as"]', function () {
        $('body').find('th.qty').html($(this).data('text'));
    });

    $('body').on('change', 'div.estimate input[name="date"]', function () {
        do_prefix_year($(this).val());
    });

    $('body').on('change', 'div.invoice input[name="date"],div.estimate input[name="date"]', function () {

        var date = $(this).val();
        do_prefix_year(date);
        // This function not work on edit
        if ($('input[name="isedit"]').length > 0) {
            return;
        }
        var due_date_input_name = 'duedate';
        var due_calc_url = admin_url + 'invoices/get_due_date';
        if ($('body').find('div.estimate').length > 0) {
            due_calc_url = admin_url + 'estimates/get_due_date';
            due_date_input_name = 'expirydate';
        }

        if (date != '') {
            $.post(due_calc_url, {
                date: date
            }).done(function (formatted) {
                if (formatted) {
                    $('input[name="' + due_date_input_name + '"]').val(formatted);
                }
            });
        } else {
            $('input[name="' + due_date_input_name + '"]').val('');
        }
    });

    $('#sales_attach_file').on('hidden.bs.modal', function (e) {
        $('#sales_uploaded_files_preview').empty();
        $('.dz-file-preview').empty();
    });

    if (typeof (Dropbox) != 'undefined') {
        if ($('#dropbox-chooser-sales').length > 0) {
            document.getElementById("dropbox-chooser-sales").appendChild(Dropbox.createChooseButton({
                success: function (files) {
                    var _data = {};
                    _data.rel_id = $('body').find('input[name="_attachment_sale_id"]').val();
                    _data.type = $('body').find('input[name="_attachment_sale_type"]').val();
                    _data.files = files;
                    _data.external = 'dropbox';
                    $.post(admin_url + 'misc/add_sales_external_attachment', _data).done(function () {
                        if (_data.type == 'invoice') {
                            init_invoice(_data.rel_id);
                        } else if (_data.type == 'estimate') {
                            if ($('body').hasClass('estimates-pipeline')) {
                                estimate_pipeline_open(_data.rel_id);
                            } else {
                                init_estimate(_data.rel_id);
                            }
                        } else if (_data.type == 'proposal') {
                            if ($('body').hasClass('proposals-pipeline')) {
                                proposal_pipeline_open(_data.rel_id);
                            } else {
                                init_proposal(_data.rel_id);
                            }
                        }
                        $('#sales_attach_file').modal('hide');
                    });
                },
                linkType: "preview",
                extensions: app_allowed_files.split(','),
            }));
        }
    }

    if ($('#sales-upload').length > 0) {
        new Dropzone('#sales-upload', {
            createImageThumbnails: true,
            dictFileTooBig: appLang.file_exceeds_maxfile_size_in_form,
            dictDefaultMessage: appLang.drop_files_here_to_upload,
            dictFallbackMessage: appLang.browser_not_support_drag_and_drop,
            dictRemoveFile: appLang.remove_file,
            sending: function (file, xhr, formData) {
                formData.append("rel_id", $('body').find('input[name="_attachment_sale_id"]').val());
                formData.append("type", $('body').find('input[name="_attachment_sale_type"]').val());
            },
            complete: function (file) {
                this.removeFile(file);
            },
            success: function (files, response) {
                response = JSON.parse(response);
                var type = $('body').find('input[name="_attachment_sale_type"]').val();
                var dl_url, delete_function;
                dl_url = 'download/file/sales_attachment/';
                delete_function = 'delete_' + type + '_attachment';
                if (type == 'invoice') {
                    init_invoice(response.rel_id);
                } else if (type == 'estimate') {
                    if ($('body').hasClass('estimates-pipeline')) {
                        estimate_pipeline_open(response.rel_id);
                    } else {
                        init_estimate(response.rel_id);
                    }
                } else if (type == 'proposal') {
                    if ($('body').hasClass('proposals-pipeline')) {
                        proposal_pipeline_open(response.rel_id);
                    } else {
                        init_proposal(response.rel_id);
                    }
                }

                var data = '';
                if (response.success == true) {

                    data += '<div class="display-block sales-attach-file-preview" data-attachment-id="' + response.attachment_id + '">';
                    data += '<div class="col-sm-10">';
                    data += '<div class="pull-left"><i class="attachment-icon-preview fa fa-file-o"></i></div>'
                    data += '<a href="' + site_url + dl_url + response.key + '" target="_blank">' + response.file_name + '</a>';
                    data += '<p class="text-muted">' + response.filetype + '</p>';
                    data += '</div>';
                    data += '<div class="col-sm-2 text-right">';
                    data += '<a href="#" class="text-danger" onclick="' + delete_function + '(' + response.attachment_id + '); return false;"><i class="fa fa-times"></i></a>';
                    data += '</div>';
                    data += '<div class="clearfix"></div><hr/>';
                    data += '</div>';
                    $('#sales_uploaded_files_preview').append(data);
                }
            },
            maxFilesize: (max_php_ini_upload_size_bytes / (1024 * 1024)).toFixed(0),
            acceptedFiles: app_allowed_files,
            error: function (file, response) {
                alert_float('danger', response);
            },

        });
    }

    // Items modal show action

    $('body').on('show.bs.modal', '#sales_item_modal', function (event) {
        // Set validation for invoice item form
        _validate_form($('#invoice_item_form'), {
            description: {
                required: true,
                remote: {
                    url: admin_url + "invoice_items/invoice_name_exists",
                    type: 'post',
                    data: {
                        itemid: function () {
                            return $('input[name="itemid"]').val();
                        }
                    }
                }
            },
            rate: {
                required: true,
            }
        }, manage_invoice_items);


        $('.affect-warning').addClass('hide');

        var $itemModal = $('#sales_item_modal');
        $itemModal.find('input').val('');
        $itemModal.find('textarea').val('');
        $itemModal.find('select').selectpicker('val', '');
        $('select[name="tax2"]').selectpicker('val', '').change();
        $('select[name="tax"]').selectpicker('val', '').change();
        $itemModal.find('.add-title').removeClass('hide');
        $itemModal.find('.edit-title').addClass('hide');

        var id = $(event.relatedTarget).data('id');
        // If id found get the text from the datatable
        if (typeof (id) !== 'undefined') {

            $('.affect-warning').removeClass('hide');
            $('input[name="itemid"]').val(id);

            $.get(admin_url + 'invoice_items/get_item_by_id/' + id, function (response) {
                $itemModal.find('input[name="description"]').val(response.description);
                $itemModal.find('input[name="long_description"]').val(response.long_description.replace(/(<|&lt;)br\s*\/*(>|&gt;)/g, " "));
                $itemModal.find('input[name="rate"]').val(response.rate);
                $itemModal.find('input[name="unit"]').val('');
                $('select[name="tax"]').selectpicker('val', response.taxid).change();
                $('select[name="tax2"]').selectpicker('val', response.taxid_2).change();
                $itemModal.find('#group_id').selectpicker('val', response.group_id);
                $.each(response, function (column, value) {
                    if (column.indexOf('rate_currency_') > -1) {
                        $itemModal.find('input[name="' + column + '"]').val(value);
                    }
                });
                $itemModal.find('.add-title').addClass('hide');
                $itemModal.find('.edit-title').removeClass('hide');
            }, 'json');
        }
    });

    $('body').on('hidden.bs.modal', '#sales_item_modal', function (event) {
        $('#item_select').selectpicker('val', '');
    });

    // Show send to email invoice modal
    $('body').on('click', '.invoice-send-to-client', function (e) {
        e.preventDefault();
        $('#invoice_send_to_client_modal').modal('show');
    });
    // Show send to email estimate modal
    $('body').on('click', '.estimate-send-to-client', function (e) {
        e.preventDefault();
        $('#estimate_send_to_client_modal').modal('show');
    });
    // Send templaate modal custom close function causing problems if is on pipeline view
    $('body').on('click', '.close-send-template-modal', function () {
        $('#estimate_send_to_client_modal').modal('hide');
        $('#proposal_send_to_customer').modal('hide');
    });
    // Include shipping show/hide details
    $('body').on('change', '#include_shipping', function () {
        var $sd = $('#shipping_details');
        $(this).prop('checked') == true ? $sd.removeClass('hide') : $sd.addClass('hide');
    });
    // Init the billing and shipping details in the field - estimates and invoices
    $('body').on('click', '.save-shipping-billing', function (e) {
        init_billing_and_shipping_details();
    });

    // On change currency recalculate price and change symbol
    $('body').on('change', 'select[name="currency"]', function () {
        init_currency_symbol();
    });

    // Recaulciate total on these changes
    $('body').on('change', 'input[name="adjustment"],select.tax', function () {
        calculate_total();
    });
    // Discount type for estimate/invoice
    $('body').on('change', 'select[name="discount_type"]', function () {
        // if discount_type == ''
        if ($(this).val() == '') {
            $('input[name="discount_percent"]').val(0);
        }
        // Recalculate the total
        calculate_total();
    });
    // In case user enter discount percent but there is no discount type set
    $('body').on('change', 'input[name="discount_percent"]', function () {
        if ($('select[name="discount_type"]').val() == '' && $(this).val() != 0) {
            alert('You need to select discount type');
            $('html,body').animate({
                    scrollTop: 0
                },
                'slow');
            $('#wrapper').highlight($('label[for="discount_type"]').text());
            setTimeout(function () {
                $('#wrapper').unhighlight();
            }, 3000);
            return false;
        }
        if ($(this).valid() == true) {
            calculate_total();
        }
    });
    // Add item to preview from the dropdown for invoices estimates
    $('body').on('change', 'select[name="item_select"]', function () {
        var itemid = $(this).selectpicker('val');
        if (itemid != '' && itemid !== 'newitem') {
            add_item_to_preview(itemid);

        } else if (itemid == 'newitem') {
            // New item
            $('#sales_item_modal').modal('show');
        }
    });

    /**
     * Added By : Vaidehi
     * Dt : 12/01/2017
     * Add item to preview from the dropdown for invoices estimates
     */
    $('body').on('change', 'select[name="item_group_select"]', function () {

        var itemid = $(this).selectpicker('val');
        if (itemid != '' && itemid !== 'newitem') {
            add_item_group_to_preview(itemid);
        } else if (itemid == 'newitem') {
            // New item
            $('#sales_item_modal').modal('show');
        }
    });
    // Add task data to preview from the dropdown for invoiecs
    $('body').on('change', 'select[name="task_select"]', function () {
        ($(this).selectpicker('val') != '' ? add_task_to_preview_as_item($(this).selectpicker('val')) : '');
    });

    // When user record payment check if is online mode
    $('body').on('change', 'select[name="paymentmode"]', function () {
        var $notRedirect = $('.do_not_redirect');
        !$.isNumeric($(this).val()) ? $notRedirect.removeClass('hide') : $notRedirect.addClass('hide');
    });

    // $('body').on('change', '.f_client_id select[name="clientid"]', function() {
    //     var val = $(this).val();
    //     var projectAjax = $('select[name="project_id"]');
    //     var clonedProjectsAjaxSearchSelect = projectAjax.html('').clone();
    //     var projectsWrapper = $('.projects-wrapper');
    //     projectAjax.selectpicker('destroy').remove();
    //     projectAjax = clonedProjectsAjaxSearchSelect;
    //     $('#project_ajax_search_wrapper').append(clonedProjectsAjaxSearchSelect);
    //     init_ajax_project_search_by_customer_id();
    //     clear_billing_and_shipping_details();
    //     if (!val) {
    //         $('#merge').empty();
    //         $('#expenses_to_bill').empty();
    //         $('#invoice_top_info').addClass('hide');
    //         projectsWrapper.addClass('hide');
    //         return false;
    //     }
    //     var current_invoice = $('body').find('input[name="merge_current_invoice"]').val();
    //     $.get(admin_url + 'invoices/client_change_data/' + val + '/' + current_invoice, function(response) {
    //         $('#merge').html(response.merge_info);

    //         var $billExpenses = $('#expenses_to_bill');
    //         // Invoice from project, in invoice_template this is not shown
    //         if ($billExpenses.length == 0) {
    //             response.expenses_bill_info = '';
    //         } else {
    //             $billExpenses.html(response.expenses_bill_info);
    //         }

    //         if (response.merge_info != '' || response.expenses_bill_info != '') {
    //             $('#invoice_top_info').removeClass('hide');
    //         } else {
    //             $('#invoice_top_info').addClass('hide');
    //         }

    //         for (var f in bs_fields) {
    //             if (bs_fields[f].indexOf('billing') > -1) {
    //                 if (bs_fields[f].indexOf('country') > -1) {
    //                     $('select[name="' + bs_fields[f] + '"]').selectpicker('val', response['billing_shipping'][0][bs_fields[f]]);
    //                 } else {
    //                     $('input[name="' + bs_fields[f] + '"]').val(response['billing_shipping'][0][bs_fields[f]]);
    //                 }
    //             }
    //         }

    //         if (!empty(response['billing_shipping'][0]['shipping_street'])) {
    //             $('input[name="include_shipping"]').prop("checked", true);
    //             $('input[name="include_shipping"]').change();
    //         }

    //         for (var f in bs_fields) {
    //             if (bs_fields[f].indexOf('shipping') > -1) {
    //                 if (bs_fields[f].indexOf('country') > -1) {
    //                     $('select[name="' + bs_fields[f] + '"]').selectpicker('val', response['billing_shipping'][0][bs_fields[f]]);
    //                 } else {
    //                     $('input[name="' + bs_fields[f] + '"]').val(response['billing_shipping'][0][bs_fields[f]]);
    //                 }
    //             }
    //         }

    //         init_billing_and_shipping_details();

    //         var client_currency = response['client_currency'];
    //         var s_currency = $('body').find('.accounting-template select[name="currency"]');
    //         client_currency = parseInt(client_currency);

    //         if (client_currency != 0) {
    //             s_currency.val(client_currency);
    //         } else {
    //             s_currency.val(s_currency.data('base'));
    //         }

    //         var billable_tasks_area = $('#task_select');
    //         if (billable_tasks_area.length > 0) {
    //             var option_data;
    //             billable_tasks_area.find('option').filter(function() {
    //                 return this.value || $.trim(this.value).length > 0 || $.trim(this.text).length > 0;
    //             }).remove();

    //             $.each(response['billable_tasks'], function(i, obj) {
    //                 option_data = ' ';
    //                 if (obj.started_timers == true) {
    //                     option_data += 'disabled class="text-danger important" data-subtext="' + appLang.invoice_task_billable_timers_found + '"';
    //                 } else {
    //                     option_data += 'data-subtext="' + obj.rel_name + '"';
    //                 }
    //                 billable_tasks_area.append('<option value="' + obj.id + '"' + option_data + '>' + obj.name + '</option>');
    //             });
    //             billable_tasks_area.selectpicker('refresh');
    //         }
    //         if (response.customer_has_projects === true) {
    //             projectsWrapper.removeClass('hide');
    //         } else {
    //             projectsWrapper.addClass('hide');
    //         }
    //         s_currency.selectpicker('refresh');
    //         init_currency_symbol();
    //     }, 'json');
    // });

    // When customer_id is passed init the data
    if ($('input[name="isedit"]').length == 0) {
        $('.f_client_id select[name="clientid"]').change();
    }

    $('body').on('click', '#get_shipping_from_customer_profile', function (e) {
        e.preventDefault();
        var include_shipping = $('#include_shipping');
        if (include_shipping.prop('checked') == false) {
            include_shipping.prop('checked', true);
            $('#shipping_details').removeClass('hide');
        }
        var clientid = $('select[name="clientid"]').val();
        if (clientid == '') {
            return;
        }
        $.get(admin_url + 'clients/get_customer_billing_and_shipping_details/' + clientid, function (response) {
            $('input[name="shipping_street"]').val(response[0]['shipping_street']);
            $('input[name="shipping_city"]').val(response[0]['shipping_city']);
            $('input[name="shipping_state"]').val(response[0]['shipping_state']);
            $('input[name="shipping_zip"]').val(response[0]['shipping_zip']);
            $('select[name="shipping_country"]').selectpicker('val', response[0]['shipping_country']);
        }, 'json');
    });
    if (typeof (accounting) != 'undefined') {
        // Used for formatting money
        accounting.settings.currency.decimal = app_decimal_separator;
        accounting.settings.currency.thousand = app_thousand_separator;
        accounting.settings.currency.precision = app_decimal_places;

        // Used for numbers
        accounting.settings.number.thousand = app_thousand_separator;
        accounting.settings.number.decimal = app_decimal_separator;
        accounting.settings.number.precision = app_decimal_places;

        calculate_total();
    }

    // Invoices to merge
    $('body').on('change', 'input[name="invoices_to_merge[]"]', function () {
        var checked = $(this).prop('checked');
        var _id = $(this).val();
        if (checked == true) {
            $.get(admin_url + 'invoices/get_merge_data/' + _id, function (response) {
                $.each(response.items, function (i, obj) {
                    if (obj.rel_type != '') {
                        if (obj.rel_type == 'task') {
                            $('input[name="task_id"]').val(obj.item_related_formatted_for_input);
                        } else if (obj.rel_type == 'expense') {
                            $('input[name="expense_id"]').val(obj.item_related_formatted_for_input);
                        }
                    }
                    add_item_to_table(obj, 'undefined', _id);
                });
            }, 'json');
        } else {
            // Remove the appended invoice to merge
            $('body').find('[data-merge-invoice="' + _id + '"]').remove();
        }
    });
    // Bill expenses to invooice on top
    $('body').on('change', 'input[name="bill_expenses[]"]', function () {
        var checked = $(this).prop('checked');
        var _id = $(this).val();
        if (checked == true) {
            $.get(admin_url + 'invoices/get_bill_expense_data/' + _id, function (response) {
                $('input[name="expense_id"]').val(_id);
                add_item_to_table(response, 'undefined', 'undefined', _id);
            }, 'json');
        } else {
            // Remove the appended expenses
            $('body').find('[data-bill-expense="' + _id + '"]').remove();
            $('body').find('#billed-expenses input[value="' + _id + '"]').remove();
        }
    });

    $('body').on('change', '.invoice_inc_expense_additional_info input', function () {
        var _data_content = $(this).attr('data-content'),
            new_desc_value,
            desc_selector = $('[data-bill-expense=' + $(this).attr('data-id') + '] .item_long_description');
        current_desc_val = desc_selector.val();
        current_desc_val = current_desc_val.trim();
        if (_data_content != '') {
            if ($(this).prop('checked') == true) {
                new_desc_value = current_desc_val + "\n" + _data_content;
                desc_selector.val(new_desc_value.trim());
            } else {
                desc_selector.val(current_desc_val.replace("\n" + _data_content, ''));
                // IN case there is no new line
                desc_selector.val(current_desc_val.replace(_data_content, ''));
            }
        }
    });
    recalculate_checklist_items_progress();
});

// Lightbox plugins for images
function init_lightbox(options) {
    if (typeof (lightbox) != 'undefined') {
        var _lightBoxOptions = {
            'showImageNumberLabel': false,
            resizeDuration: 200,
            positionFromTop: 25
        };
        if (typeof (options) != 'undefined') {
            jQuery.extend(_lightBoxOptions, options);
        }
        lightbox.option(_lightBoxOptions);
    }
}

// Progress bar animation load
function init_progress_bars() {
    var progress_bars = $('.progress .progress-bar');
    if (progress_bars.length) {
        progress_bars.each(function () {
            var bar = $(this);
            var perc = bar.attr("data-percent");
            bar.css('width', (perc) + '%');
            if (!bar.hasClass('no-percent-text')) {
                bar.text((perc) + '%');
            }
        });
    }
}

// Get url params like $_GET
function get_url_param(param) {
    var vars = {};
    window.location.href.replace(location.hash, '').replace(
        /[?&]+([^=&]+)=?([^&]*)?/gi, // regexp
        function (m, key, value) { // callback
            vars[key] = value !== undefined ? value : '';
        }
    );
    if (param) {
        return vars[param] ? vars[param] : null;
    }
    return vars;
}

// Fix for height on the wrapper
function mainWrapperHeightFix() {
    // Get and set current height
    var headerH = 63;
    var navigationH = side_bar.height();
    var contentH = $(".content").height();

    setup_menu.css('min-height', ($(document).outerHeight(true) - headerH) + 'px');

    content_wrapper.css('min-height', $(document).outerHeight(true) - headerH + 'px');
    // Set new height when content height is less then navigation
    if (contentH < navigationH) {
        content_wrapper.css("min-height", navigationH + 'px');
    }

    // Set new height when content height is less then navigation and navigation is less then window
    if (contentH < navigationH && navigationH < $(window).height()) {
        content_wrapper.css("min-height", $(window).height() - headerH + 'px');
    }
    // Set new height when content is higher then navigation but less then window
    if (contentH > navigationH && contentH < $(window).height()) {
        content_wrapper.css("min-height", $(window).height() - headerH + 'px');
    }
    // Fix for RTL main admin menu height
    if (is_mobile() && isRTL == 'true') {
        side_bar.css('min-height', $(document).outerHeight(true) - headerH + 'px');
    }
}

function setBodySmall() {
    if ($(this).width() < 768) {
        $('body').addClass('page-small');
    } else if ($(this).width() >= 768 && $(this).width() <= 1024) {
        $('body').removeClass('page-small');
        $('body').addClass('hide-sidebar');
    } else {
        $('body').removeClass('hide-sidebar');
        $('body').removeClass('page-small');
    }
}

function setCardviewForMobile() {
    var view = "list";
    if ($(this).width() < 1025) {
        view = "card";
        $.ajax({
            type: 'POST',
            url: admin_url + "misc/loadcardview",
            data: {view: view},
            success: function (result) {
            }
        });
    }
}

// Generate random password
function generatePassword(field) {
    var length = 12,
        charset = "abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
        retVal = "";
    for (var i = 0, n = charset.length; i < length; ++i) {
        retVal += charset.charAt(Math.floor(Math.random() * n));
    }
    $(field).parents().find('input.password').val(retVal)
}

// Switch field make request
function switch_field(field) {
    var status, url, id;
    status = 0;
    if ($(field).prop('checked') == true) {
        status = 1;
    }
    url = $(field).data('switch-url');
    id = $(field).data('id');
    $.get(url + '/' + id + '/' + status);
}

// General validate form function
function _validate_form(form, form_rules, submithandler) {
    var $form = $(form);
    if ($form.length) {
        var f = $form.validate({
            rules: form_rules,
            messages: {
                email: {
                    remote: appLang.email_exists,
                },
            },
            ignore: ":hidden",
            submitHandler: function (form) {
                if ($(form).hasClass('disable-on-submit')) {
                    $(form).find('[type="submit"]').attr('disabled', true);
                }
                if (typeof (submithandler) !== 'undefined') {
                    submithandler(form);
                } else {
                    return true;
                }
            }
        });

        var custom_required_fields = $form.find('[data-custom-field-required]');

        if (custom_required_fields.length > 0) {
            $.each(custom_required_fields, function () {
                $(this).rules("add", {
                    required: true
                });
                var name = $(this).attr('name');
                var label = $(this).parents('.form-group').find('[for="' + name + '"]');
                if (label.length > 0) {
                    if (label.find('.req').length == 0) {
                        label.prepend(' <small class="req text-danger">* </small>');
                    }
                }
            });
        }

        $.each(form_rules, function (name, rule) {
            if ((rule == 'required' && !jQuery.isPlainObject(rule)) || (jQuery.isPlainObject(rule) && rule.hasOwnProperty('required'))) {
                var label = $form.find('[for="' + name + '"]');
                if (label.length > 0) {
                    if (label.find('.req').length == 0) {
                        label.prepend(' <small class="req text-danger">* </small>');
                    }
                }
            }
        });
    }
    return false;
}

// Delete option from database AJAX
function delete_option(child, id) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'settings/delete_option/' + id, function (response) {
            if (response.success == true) {
                $(child).parents('.option').remove();
            }
        }, 'json');
    }
}

// Slide toggle any selector passed
function slideToggle(selector, callback) {
    var $element = $(selector);
    if ($element.hasClass('hide')) {
        $element.removeClass('hide', 'slow');
    }
    if ($element.length) {
        $element.slideToggle();
    }
    // Set all progress bar to 0 percent
    var progress_bars = $('.progress-bar').not('.not-dynamic');
    if (progress_bars.length > 0) {
        progress_bars.each(function () {
            $(this).css('width', 0 + '%');
            $(this).text(0 + '%');
        });
        // Init the progress bars again
        init_progress_bars();
    }
    // Possible callback after slide toggle
    if (typeof (callback) == 'function') {
        callback();
    }
}

// Generate float alert
function alert_float(type, message) {
    /*var aId, el;
    aId = $('body').find('float-alert').length;
    aId++;
    aId = 'alert_float_' + aId;
    el = $('<div id="' + aId + '" class="toast-info btn btn-info ripple float-alert animated fadeInRight col-xs-11 col-sm-4 alert alert-' + type + '"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button><span class="fa fa-bell-o" data-notify="icon"></span><span class="alert-title">' + message + '</span></div>');
    $('body').append(el);
     // setTimeout(function() {
    //     $('#' + aId).hide('fast', function() {
    //         $('#' + aId).remove();
    //     });
    // }, 7000000);
*/

    $.toast({
        heading: message,//'Welcome to Oscar Admin',
        //text: message,
        position: 'top-right',
        showHideTransition: "slide",
        icon: type,
        loader: false
    });

}

function init_rel_tasks_table(rel_id, rel_type, selector) {
    if (typeof (selector) == 'undefined') {
        selector = '.table-rel-tasks';
    }

    var $selector = $('body').find(selector);
    if ($selector.length == 0) {
        return;
    }

    var TasksServerParams = {},
        not_sortable_tasks, Tasks_Filters, tasks_sort = 2;
    Tasks_Filters = $('._hidden_inputs._filters._tasks_filters input');
    $.each(Tasks_Filters, function () {
        TasksServerParams[$(this).attr('name')] = '[name="' + $(this).attr('name') + '"]';
    });

    var url = admin_url + 'tasks/init_relation_tasks/' + rel_id + '/' + rel_type;

    not_sortable_tasks = [($selector.find('th').length - 1)];
    if ($selector.attr('data-new-rel-type') == 'project') {
        tasks_sort = 3;
        not_sortable_tasks.push(0);
        url += '?bulk_actions=true';
    }

    var Api = initDataTable($selector, url, not_sortable_tasks, not_sortable_tasks, TasksServerParams, [tasks_sort, 'ASC']);

    // Hide option on lead modal because the table reserver area is too small
    if (Api && rel_type == 'lead') {
        Api.column($('table .table-tasks-options').index()).visible(false, false).columns.adjust();
    }

}

function get_dt_export_buttons(table) {

    var table_buttons_options = [{
        extend: 'collection',
        text: appLang.dt_button_export,
        className: 'btn btn-default-dt-options',
        buttons: [{
            extend: 'excelHtml5',
            text: appLang.dt_button_excel,
            footer: true,
            exportOptions: {
                columns: [':not(.not-export)'],
            }
            // }, {
            //     extend: 'csvHtml5',
            //     text: appLang.dt_button_csv,
            //     footer: true,
            //     exportOptions: {
            //         columns: [':not(.not-export)'],
            //     }
        }, {
            extend: 'pdfHtml5',
            text: appLang.dt_button_pdf,
            footer: true,
            exportOptions: {
                columns: [':not(.not-export)'],
            },
            pageSize: 'LEGAL',
            orientation: 'landscape',
            exportOptions: {
                columns: [1, 2, 3, 4] // indexes of the columns that should be printed,
            },
            // customize: function(doc) {
            //     // Fix for column widths
            //     var table_api = $(table).DataTable();
            //     var columns = table_api.columns().visible();
            //     var columns_total = columns.length;
            //     var pdf_widths = [];
            //     var total_visible_columns = 0;
            //     for (i = 0; i < columns_total; i++) {
            //         // Is only visible column
            //         if (columns[i] == true) {
            //             total_visible_columns++;
            //         }
            //     }
            //     setTimeout(function() {
            //         if (total_visible_columns <= 5) {
            //             for (i = 0; i < total_visible_columns; i++) {
            //                 pdf_widths.push((735 / total_visible_columns));

            //             }
            //             doc.content[1].table.widths = pdf_widths;
            //         }
            //     }, 10);
            //     doc.styles.tableHeader.alignment = 'center';
            //     doc.styles.tableHeader.margin = [5, 5, 5, 5];
            //     doc.pageMargins = [12, 12, 12, 12];
            // }
            customize: function (doc) {
                doc.content[1].table.widths =
                    Array(doc.content[1].table.body[0].length + 1).join('*').split('');
            }
        },
            // {
            //     extend: 'print',
            //     text: appLang.dt_button_print,
            //     footer: true,
            //     exportOptions: {
            //         columns: [':not(.not-export)'],
            //     }
            // }
        ],
    }, {
        extend: 'colvis',
        postfixButtons: ['colvisRestore'],
        className: 'btn btn-default-dt-options dt-column-visibility',
        text: appLang.dt_button_column_visibility
    }/*, {
        text: appLang.dt_button_reload,
        className: 'btn btn-default-dt-options',
        action: function(e, dt, node, config) {
            dt.ajax.reload();
        }
    }*/];

    if (app_show_table_columns_visibility == 0) {
        delete table_buttons_options[1];
    }

    if (table_export_button_is_hidden()) {
        delete table_buttons_options[0];
    }

    /*var bulkActions = $('body').find('.bulk-actions-btn');
    if (bulkActions.length && bulkActions.attr('data-table')) {
        if ($(table).is(bulkActions.attr('data-table'))) {
            table_buttons_options.push({
                text: bulkActions.text(),
                className: 'btn btn-default-dt-options',
                action: function (e, dt, node, config) {
                    $(bulkActions.attr('data-target')).modal('show');
                }
            });
        }
    }*/
    return table_buttons_options;
}

function table_export_button_is_hidden() {
    // if (app_show_table_export_button != 'to_all') {
    //     if (app_show_table_export_button == 'hide' || app_show_table_export_button == 'only_admins' && is_admin == 0) {
    //         return true;
    //     }
    // }
    var url = window.location.href.split('?')[0];

    var qs = getQueryStrings();
    var myPidParam = qs["pid"];
    var myEidParam = qs["eid"];
    if ((myPidParam > 0 || myEidParam > 0) && (url == admin_url + 'addressbooks' || url == admin_url + 'addressbooks/')) {
        return false;
    } else {
        return true;
    }
    return false;
}

function DataTablesOfflineLazyLoadImages(nRow, aData, iDisplayIndex) {
    var img = $('img.img-table-loading', nRow);
    img.attr('src', img.data('orig'));
    img.prev('div').addClass('hide');
    return nRow;
}

function _table_jump_to_page(table, oSettings) {

    var paginationData = table.DataTable().page.info();
    var previousDtPageJump = $('body').find('#dt-page-jump-' + oSettings.sTableId);
    var currentPage = null;
    if (previousDtPageJump.length) {
        previousDtPageJump.remove();
    }

    if (paginationData.pages > 6) {
        var jumpToPageSelect = $("<select></select>", {
            "class": "dt-page-jump-select form-control",
            'id': 'dt-page-jump-' + oSettings.sTableId
        });
        for (i = 1; i <= paginationData.pages; i++) {
            var selectedCurrentPage = ((paginationData.page + 1) === i) ? 'selected' : '';
            jumpToPageSelect.append("<option value='" + i + "'" + selectedCurrentPage + ">" + i + "</option>");
        }
        $("#" + oSettings.sTableId + "_wrapper .dt-page-jump").append(jumpToPageSelect);
    }
}

function initDataTableOffline(dt_table) {
    var selector = '.dt-table';

    if (typeof (dt_table) !== 'undefined') {
        selector = dt_table;
    }

    var tables = $(selector);
    if (tables.length) {
        var order_col, order_type, options, _buttons;
        var _options = {
            "language": appLang.datatables,
            "processing": true,
            'paginate': true,
            "responsive": true,
            "autoWidth": false,
            "order": [0, 'asc'],
            "fnRowCallback": DataTablesOfflineLazyLoadImages,
            "columnDefs": [{
                bSortable: false,
                aTargets: [-1]
            }],
            "fnDrawCallback": function (oSettings) {
                _table_jump_to_page(this, oSettings);
                if (oSettings.aoData.length == 0 || oSettings.aiDisplay.length == 0) {
                    $(oSettings.nTableWrapper).addClass('app_dt_empty');
                } else {
                    $(oSettings.nTableWrapper).removeClass('app_dt_empty');
                }
            },
            "initComplete": function (settings, json) {
                var dtOfflineEmpty = this.find('.dataTables_empty');

                if (this.hasClass('scroll-responsive') || app_scroll_responsive_tables == 1) {
                    this.wrap('<div class="table-responsive"></div>');
                }

                if (dtOfflineEmpty.length) {
                    dtOfflineEmpty.attr('colspan', this.find('thead th').length);
                }
                this.parents('.table-loading').removeClass('table-loading');
                var t_export = $(selector);
                var th_last_child = t_export.find('thead th:last-child');
                var th_first_child = t_export.find('thead th:first-child');
                if (th_last_child.text().trim() == appLang.options) {
                    th_last_child.addClass('not-export');
                }
                if (th_first_child.find('input[type="checkbox"]').length > 0) {
                    th_first_child.addClass('not-export');
                }
            },
            //dom: "<'row'><'row leadlistrow'<'col-sm-6'lB><'col-sm-6'f>r>t<'row'<'col-sm-4'i>><'row'<'#colvis'><'.dt-page-jump'>p>",
            dom: "<'row'><'row leadlistrow'<'col-sm-6 bulkactions 'B><'col-sm-6'f>r>t<'row'><'row'<'#colvis'><'.dt-page-jump'><'col-sm-6 data-footer'li><'col-sm-6'p>>",
        }

        var order_col = $($(this)).attr('data-order-col');
        var order_type = $($(this)).attr('data-order-type');
        $.each(tables, function () {
            $(this).addClass('dt-no-serverside');
            options = _options;
            if ($(this).hasClass('scroll-responsive') || app_scroll_responsive_tables == 1) {
                options.responsive = false;
            }
            order_col = $(this).attr('data-order-col');
            order_type = $(this).attr('data-order-type');
            if (order_col && order_type) {
                options.order = [
                    [order_col, order_type]
                ]
            }
            _buttons = get_dt_export_buttons(this);
            // Remove the reload button here because its not ajax request
            delete _buttons[2];
            options.buttons = _buttons;
            var tableApi = $(this).DataTable(options);
            $(document).on("change", ".dt-page-jump-select", function () {
                tableApi.page($(this).val() - 1).draw(false);
            });
        });
    }
}

// General function for all datatables serverside
function initDataTable(selector, url, notsearchable, notsortable, fnserverparams, defaultorder) {
    if ($(selector).length > 0) {
        var table = $('body').find(selector);
        if (table.length == 0) {
            return false;
        }

        if (fnserverparams == 'undefined' || typeof (fnserverparams) == 'undefined') {
            fnserverparams = []
        }

        // If not order is passed order by the first column
        if (typeof (defaultorder) == 'undefined') {
            defaultorder = [
                [0, 'ASC']
            ];
        } else {
            if (defaultorder.length == 1) {
                defaultorder = [defaultorder]
            }
        }

        var length_options = [10, 25, 50, 100];
        var length_options_names = [10, 25, 50, 100];

        app_tables_pagination_limit = parseFloat(app_tables_pagination_limit);

        if ($.inArray(app_tables_pagination_limit, length_options) == -1) {
            length_options.push(app_tables_pagination_limit)
            length_options_names.push(app_tables_pagination_limit)
        }

        length_options.sort(function (a, b) {
            return a - b;
        });
        length_options_names.sort(function (a, b) {
            return a - b;
        });

        length_options.push(-1);
        length_options_names.push(appLang.dt_length_menu_all);

        var dtSettings = {
            "language": appLang.datatables,
            "processing": true,
            "retrieve": true,
            "serverSide": true,
            'paginate': true,
            'searchDelay': 750,
            "bDeferRender": true,
            "responsive": true,
            "autoWidth": false,
            dom: "<'row'><'row leadlistrow '<'col-sm-6 bulkactions'B><'col-sm-6'f>r>t<'row'><'row'<'#colvis'><'.dt-page-jump'><'col-sm-6 data-footer'li><'col-sm-6'p>>",
            "pageLength": app_tables_pagination_limit,
            "lengthMenu": [length_options, length_options_names],
            "columnDefs": [{
                "searchable": false,
                "targets": notsearchable,
            }, {
                "sortable": false,
                "targets": notsortable
            }],
            "fnDrawCallback": function (oSettings) {
                _table_jump_to_page(this, oSettings);
                if (oSettings.aoData.length == 0) {
                    $(oSettings.nTableWrapper).addClass('app_dt_empty');
                } else {
                    $(oSettings.nTableWrapper).removeClass('app_dt_empty');
                }
                init_selectpicker();
            },
            "fnCreatedRow": function (nRow, aData, iDataIndex) {
                // If tooltips found
                $(nRow).attr('data-title', aData.Data_Title)
                $(nRow).attr('data-toggle', aData.Data_Toggle)
            },
            "initComplete": function (settings, json) {
                var t = this;

                if (t.hasClass('scroll-responsive') || app_scroll_responsive_tables == 1) {
                    t.wrap('<div class="table-responsive"></div>');
                }

                var dtEmpty = t.find('.dataTables_empty');
                if (dtEmpty.length) {
                    dtEmpty.attr('colspan', t.find('thead th').length);
                }

                // Hide mass selection because causing issue on small devices
                if (is_mobile() && $(window).width() < 400 && t.find('tbody td:first-child input[type="checkbox"]').length > 0) {
                    t.DataTable().column(0).visible(false, false).columns.adjust();
                    $("a[data-target*='bulk_actions']").addClass('hide');
                }

                t.parents('.table-loading').removeClass('table-loading');
                t.removeClass('dt-table-loading');
                var th_last_child = t.find('thead th:last-child');
                var th_first_child = t.find('thead th:first-child');
                if (th_last_child.text().trim() == appLang.options) {
                    th_last_child.addClass('not-export');
                }
                if (th_first_child.find('input[type="checkbox"]').length > 0) {
                    th_first_child.addClass('not-export');
                }
                mainWrapperHeightFix();
            },
            "order": defaultorder,
            "ajax": {
                "url": url,
                "type": "POST",
                "data": function (d) {
                    for (var key in fnserverparams) {
                        d[key] = $(fnserverparams[key]).val();
                    }
                }
            },
            buttons: get_dt_export_buttons(table),
        };

        if (table.hasClass('scroll-responsive') || app_scroll_responsive_tables == 1) {
            dtSettings.responsive = false;
        }

        table = table.dataTable(dtSettings);

        var tableApi = table.DataTable();

        var hiddenHeadings = table.find('th.not_visible');
        var hiddenIndexes = [];

        $.each(hiddenHeadings, function () {
            hiddenIndexes.push(this.cellIndex);
        });

        setTimeout(function () {
            for (var i in hiddenIndexes) {
                tableApi.columns(hiddenIndexes[i]).visible(false, false).columns.adjust();
            }
        }, 10);

        // Fix for hidden tables colspan not correct if the table is empty
        if (table.is(':hidden')) {
            table.find('.dataTables_empty').attr('colspan', table.find('thead th').length);
        }

        $(document).on("change", ".dt-page-jump-select", function () {
            tableApi.page($(this).val() - 1).draw(false);
        });

        return tableApi;
    }
}

function task_single_update_tags() {
    var taskTags = $("#taskTags");
    $.post(admin_url + 'tasks/update_tags', {
        tags: taskTags.tagit('assignedTags'),
        task_id: taskTags.attr('data-taskid')
    });
}

function task_attachments_toggle() {
    $('body').find('.task-attachments-more').toggleClass('hide');
    $('body').find('.task-attachments-less').toggleClass('hide');
}

// Update todo items when drop happen
function update_todo_items() {
    var unfinished_items = $('.unfinished-todos li:not(.no-todos)');
    var finished = $('.finished-todos li:not(.no-todos)');
    var i = 1;
    // Refresh orders
    $.each(unfinished_items, function () {
        $(this).find('input[name="todo_order"]').val(i);
        $(this).find('input[name="finished"]').val(0);
        i++;
    });
    if (unfinished_items.length == 0) {
        $('.nav-total-todos').addClass('hide');
        $('.unfinished-todos li.no-todos').removeClass('hide');
    } else if (unfinished_items.length > 0) {
        if (!$('.unfinished-todos li.no-todos').hasClass('hide')) {
            $('.unfinished-todos li.no-todos').addClass('hide');
        }
        $('.nav-total-todos').removeClass('hide').html(unfinished_items.length)
    }
    x = 1;
    $.each(finished, function () {
        $(this).find('input[name="todo_order"]').val(x);
        $(this).find('input[name="finished"]').val(1);
        $(this).find('input[type="checkbox"]').prop('checked', true);
        i++;
        x++;
    });
    if (finished.length == 0) {
        $('.finished-todos li.no-todos').removeClass('hide');
    } else if (finished.length > 0) {
        if (!$('.finished-todos li.no-todos').hasClass('hide')) {
            $('.finished-todos li.no-todos').addClass('hide');
        }
    }
    var update = [];
    $.each(unfinished_items, function () {
        var todo_id = $(this).find('input[name="todo_id"]').val();
        var order = $(this).find('input[name="todo_order"]').val();
        var finished = $(this).find('input[name="finished"]').val();
        var description = $(this).find('.todo-description');
        if (description.hasClass('line-throught')) {
            description.removeClass('line-throught')
        }
        $(this).find('input[type="checkbox"]').prop('checked', false);
        update.push([todo_id, order, finished])
    });
    $.each(finished, function () {
        var todo_id = $(this).find('input[name="todo_id"]').val();
        var order = $(this).find('input[name="todo_order"]').val();
        var finished = $(this).find('input[name="finished"]').val();
        var description = $(this).find('.todo-description');
        if (!description.hasClass('line-throught')) {
            description.addClass('line-throught')
        }
        update.push([todo_id, order, finished])
    });
    data = {};
    data.data = update;
    $.post(admin_url + 'todo/update_todo_items_order', data);
}

// Delete single todo item
function delete_todo_item(list, id) {
    $.get(admin_url + 'todo/delete_todo_item/' + id, function (response) {
        if (response.success == true) {
            $(list).parents('li').remove();
            update_todo_items();
        }
    }, 'json');
}

// Edit todo item
function edit_todo_item(id) {
    $.get(admin_url + 'todo/get_by_id/' + id, function (response) {
        var todo_modal = $('#__todo');
        todo_modal.find('input[name="todoid"]').val(response.todoid);
        todo_modal.find('textarea[name="description"]').val(response.description);
        todo_modal.modal('show');
    }, 'json');
}

// Date picker init with selected timeformat from settings
function init_datepicker() {
    var datepickers = $('.datepicker');
    var datetimepickers = $('.datetimepicker');
    if (datetimepickers.length == 0 && datepickers.length == 0) {
        return;
    }
    var opt;
    // Datepicker without time
    $.each(datepickers, function () {
        var opt = {
            timepicker: false,
            scrollInput: false,
            lazyInit: true,
            format: app_date_format,
            dayOfWeekStart: app_calendar_first_day,
        };

        // Check in case the input have date-end-date or date-min-date
        var max_date = $(this).data('date-end-date');
        var min_date = $(this).data('date-min-date');
        if (max_date) {
            opt.maxDate = max_date;
        }
        if (min_date) {
            opt.minDate = min_date;
        }
        // Init the picker
        $(this).datetimepicker(opt);
    });
    var opt_time;
    // Datepicker with time
    $.each(datetimepickers, function () {
        opt_time = {
            lazyInit: true,
            scrollInput: false,
            dayOfWeekStart: app_calendar_first_day
        };
        if (app_time_format == 24) {
            opt_time.format = app_date_format + ' G:i';
        } else {
            opt_time.format = app_date_format + ' g:i A';
            opt_time.formatTime = 'g:i A';
        }
        // Check in case the input have date-end-date or date-min-date
        var max_date = $(this).data('date-end-date');
        var min_date = $(this).data('date-min-date');
        if (max_date) {
            opt_time.maxDate = max_date;
        }
        /*if (min_date) {
            opt_time.minDate = dateToday;
        }*/
        // Init the picker
        $(this).datetimepicker(opt_time);
    });
}

// All inputs used for tags
function init_tags_inputs() {
    var tags_inputs = $('body').find('input.tagsinput');
    if (tags_inputs.length) {
        tags_inputs.tagit({
            availableTags: availableTags,
            allowSpaces: true,
            animate: false,
            placeholderText: appLang.tag,
            showAutocompleteOnFocus: true,
            caseSensitive: false,
            autocomplete: {
                appendTo: '#inputTagsWrapper',
            },
            afterTagAdded: function (event, ui) {
                var tagIndexAvailable = availableTags.indexOf($.trim($(ui.tag).find('.tagit-label').text()));
                if (tagIndexAvailable > -1) {
                    var _tagId = availableTagsIds[tagIndexAvailable];
                    $(ui.tag).addClass('tag-id-' + _tagId);
                }
                showHideTagsPlaceholder($(this));
            },
            afterTagRemoved: function (event, ui) {
                showHideTagsPlaceholder($(this));
            }
        });
    }
}

// Init color pickers
function init_color_pickers() {
    var color_pickers = $('body').find('div.colorpicker-input');
    if (color_pickers.length) {
        color_pickers.colorpicker({
            format: "hex"
        });
    }
}

// Init bootstrap select picker
function init_selectpicker() {
    var select_pickers = $('body').find('select.selectpicker');
    if (select_pickers.length) {
        select_pickers.selectpicker({
            showSubtext: true
        });
    }
}

// Datatables custom view will fill input with the value
function dt_custom_view(value, table, custom_input_name, clear_other_filters) {
    var name;
    if (typeof (custom_input_name) == 'undefined') {
        name = 'custom_view';
    } else {
        name = custom_input_name;
    }
    if (typeof (clear_other_filters) != 'undefined') {
        $('._filters input').val('');
        $('._filter_data li.active').removeClass('active');
    }
    var _original_val = value;
    var _cinput = do_filter_active(name);
    if (_cinput != name) {
        value = "";
    }
    $('input[name="' + name + '"]').val(value);
    // Add additional server params $_POST
    // var TasksServerParams = {
    //     "status": "[name='task_status_1']"
    // }

    // // Init the table
    // var _tableTasks = $('.table-tasks');
    // if (_tableTasks.length) {
    //     var headers_tasks = _tableTasks.find('th');
    //     initDataTable('.table-tasks', admin_url + 'tasks?table_tasks=true', [headers_tasks.length - 1, 0], [headers_tasks.length - 1, 0,1], TasksServerParams);
    //     _tableTasks.DataTable().ajax.reload();
    // }
    $(table).DataTable().ajax.reload();
}

function do_filter_active(value, parent_selector) {
    if (value != '' && typeof (value) != 'undefined') {
        $('[data-cview="all"]').parents('li').removeClass('active');
        var selector = $('[data-cview="' + value + '"]');
        if (typeof (parent_selector) != 'undefined') {
            selector = $(parent_selector + ' [data-cview="' + value + '"]');
        }
        if (!selector.parents('li').not('.dropdown-submenu').hasClass('active')) {
            selector.parents('li').addClass('active');
        } else {
            selector.parents('li').not('.dropdown-submenu').removeClass('active');
            // Remove active class from the parent dropdown if nothing selected in the child dropdown
            var parents_sub = selector.parents('li.dropdown-submenu');
            if (parents_sub.length > 0) {
                if (parents_sub.find('li.active').length == 0) {
                    parents_sub.removeClass('active');
                }
            }
            value = "";
        }
        return value;
    } else {
        $('._filters input').val('');
        $('._filter_data li.active').removeClass('active');
        $('[data-cview="all"]').parents('li').addClass('active');
        return "";
    }
}

// Called when editing member profile
function init_roles_permissions(roleid, user_changed) {
    if (typeof (roleid) == 'undefined') {
        roleid = $('select[name="role"]').val();
    }
    var isedit = $('.member > input[name="isedit"]');
    // Check if user is edit view and user has changed the dropdown permission if not only return
    if (isedit.length > 0 && typeof (roleid) !== 'undefined' && typeof (user_changed) == 'undefined') {
        return;
    }
    // Last if the roleid is blank return
    if (roleid == '') {
        return;
    }
    // Get all permissions
    var permissions = $('table.roles').find('tr');
    $.get(admin_url + 'misc/get_role_permissions_ajax/' + roleid).done(function (response) {
        response = JSON.parse(response);
        var can_view_st, can_view_own_st;
        $.each(permissions, function () {
            var permissionid = $(this).data('id');
            var row = $(this);
            $.each(response, function (i, obj) {
                if (permissionid == obj.permissionid) {
                    can_view_st = (obj.can_view == 1 ? true : false);
                    can_view_own_st = (obj.can_view_own == 1 ? true : false)
                    row.find('[data-can-view]').prop('checked', can_view_st);
                    if (can_view_st == true) {
                        row.find('[data-can-view]').change();
                    }
                    row.find('[data-can-view-own]').prop('checked', can_view_own_st);
                    if (can_view_own_st == true) {
                        row.find('[data-can-view-own]').change();
                    }
                    row.find('[data-can-edit]').prop('checked', (obj.can_edit == 1 ? true : false));
                    row.find('[data-can-create]').prop('checked', (obj.can_create == 1 ? true : false));
                    row.find('[data-can-delete]').prop('checked', (obj.can_delete == 1 ? true : false));
                }
            });
        });
    });
}

// Generate hidden input field
function hidden_input(name, val) {
    return '<input type="hidden" name="' + name + '" value="' + val + '">';
}

// Show/hide full table
function toggle_small_view(table, main_data) {

    $('body').toggleClass('small-table');
    var tablewrap = $('#small-table');
    if (tablewrap.length == 0) {
        return;
    }
    var _visible = false;
    if (tablewrap.hasClass('col-sm-5')) {
        tablewrap.removeClass('col-sm-5').addClass('col-sm-12');
        _visible = true;
        $('.toggle-small-view').find('i').removeClass('fa fa-angle-double-right').addClass('fa fa-angle-double-left');
    } else {
        tablewrap.addClass('col-sm-5').removeClass('col-sm-12');
        $('.toggle-small-view').find('i').removeClass('fa fa-angle-double-left').addClass('fa fa-angle-double-right');
    }
    var _table = $(table).DataTable();
    // Show hide hidden columns
    //_table.columns(hidden_columns).visible(_visible, false);
    _table.columns.adjust();
    $(main_data).toggleClass('hide');
}

function stripTags(html) {
    var tmp = document.createElement("DIV");
    tmp.innerHTML = html;
    return tmp.textContent || tmp.innerText || "";
}

// Check if field is empty
function empty(data) {
    if (typeof (data) == 'number' || typeof (data) == 'boolean') {
        return false;
    }
    if (typeof (data) == 'undefined' || data === null) {
        return true;
    }
    if (typeof (data.length) != 'undefined') {
        return data.length == 0;
    }
    var count = 0;
    for (var i in data) {
        if (data.hasOwnProperty(i)) {
            count++;
        }
    }
    return count == 0;
}

// Is mobile checker javascript
function is_mobile() {
    return app_is_mobile;
}

// Main logout function check if timers found to show the warning
function logout() {
    var started_timers = $('.started-timers-top').find('li.timer').length;
    if (started_timers > 0) {
        // Timers found return false and show the modal
        $('.timers-modal-logout').modal('show');
        return false;
    } else {
        // No timer logout free
        window.location.href = site_url + 'authentication/logout';
    }
}

// Generate color rgb
function color(r, g, b) {
    return 'rgb(' + r + ',' + g + ',' + b + ')';
}

// Url builder function with parameteres
function buildUrl(url, parameters) {
    var qs = "";
    for (var key in parameters) {
        var value = parameters[key];
        qs += encodeURIComponent(key) + "=" + encodeURIComponent(value) + "&";
    }
    if (qs.length > 0) {
        qs = qs.substring(0, qs.length - 1); //chop off last "&"
        url = url + "?" + qs;
    }
    return url;
}

// Function that convert decimal logged time to HH:MM format
function decimalToHM(decimal) {
    var hrs = parseInt(Number(decimal));
    var min = Math.round((Number(decimal) - hrs) * 60);
    return (hrs < 10 ? "0" + hrs : hrs) + ':' + (min < 10 ? "0" + min : min);
}

// Init the media elfinder for tinymce browser
function elFinderBrowser(field_name, url, type, win) {
    tinymce.activeEditor.windowManager.open({
        file: admin_url + 'misc/tinymce_file_browser', // use an absolute path!
        title: appLang.media_files,
        width: 900,
        height: 450,
        resizable: 'yes'
    }, {
        setUrl: function (url) {
            win.document.getElementById(field_name).value = url;
        }
    });
    return false;
}

// Function to init the tinymce editor
function init_editor(selector, settings) {
    if (typeof (selector) == 'undefined') {
        selector = '.tinymce';
    }

    var _editor_selector_check = $(selector);
    if (_editor_selector_check.length == 0) {
        return;
    }

    $.each(_editor_selector_check, function () {
        if ($(this).hasClass('tinymce-manual')) {
            $(this).removeClass('tinymce');
        }
    });

    // Original settings
    var _settings = {
        selector: selector,
        browser_spellcheck: true,
        height: 400,
        theme: 'modern',
        skin: 'perfex',
        language_url: site_url + 'assets/js/en_GB.js',
        //language: tinymce_lang,
        relative_urls: false,
        inline_styles: true,
        verify_html: false,
        cleanup: false,
        valid_elements: '+*[*]',
        valid_children: "+body[style], +style[type]",
        apply_source_formatting: false,
        remove_script_host: false,
        removed_menuitems: 'newdocument',
        forced_root_block: false,
        autosave_restore_when_empty: false,
        fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 36pt',
        menubar: false,
        statusbar: false,
        setup: function (ed) {
            // Default fontsize is 12
            ed.on('init', function () {
                this.getDoc().body.style.fontSize = '10pt';
            });

            ed.addMenuItem('codesample', {
                text: 'Insert/Edit code sample',
                context: 'insert',
                icon: 'codesample',
                onclick: function () {
                    tinyMCE.execCommand('codesample');
                }
            });

        },
        table_default_styles: {
            // Default all tables width 100%
            width: '100%',
        },
        plugins: [
            'advlist autoresize autosave autolink lists link charmap print preview hr anchor codesample',
            'searchreplace visualblocks visualchars code fullscreen',
            'media nonbreaking save table contextmenu directionality',
            'paste textcolor colorpicker'
        ],
        toolbar1: 'fontselect fontsizeselect | forecolor backcolor | bold italic underline | alignleft aligncenter alignright alignjustify | image link | bullist numlist | restoredraft',
        file_browser_callback: elFinderBrowser,
    };

    // Add the rtl to the settings if is true
    isRTL == 'true' ? _settings.directionality = 'rtl' : '';
    // Possible settings passed to be overwrited or added
    if (typeof (settings) != 'undefined') {
        for (var key in settings) {
            _settings[key] = settings[key];
        }
    }
    // Init the editor
    var editor = tinymce.init(_settings);
    return editor;
}

// Function used to add custom bootstrap menu for setup and main menu and to add fa on front like fa fa-question
function _formatMenuIconInput(e) {
    if (typeof (e) == 'undefined') {
        return;
    }
    var _input = $(e.target);
    if (!_input.val().match(/^fa /)) {
        _input.val(
            'fa ' + _input.val()
        );
    }
}


// Show password on hidden input field
function showPassword(name) {
    var target = $('input[name="' + name + '"]');
    if ($(target).attr('type') == 'password' && $(target).val() != '') {
        $(target)
            .queue(function () {
                $(target).attr('type', 'text').dequeue();
            });
    } else {
        $(target).queue(function () {
            $(target).attr('type', 'password').dequeue();
        });
    }
}

// This is used for mobile where tooltip on _buttons class wrapper is found
// Will show all buttons tooltips as regular button with text
function init_btn_with_tooltips() {
    if (is_mobile()) {
        var tooltips_href_btn = $('._buttons').find('.btn-with-tooltip');
        $.each(tooltips_href_btn, function () {
            var title = $(this).attr('title');
            if (typeof (title) == 'undefined') {
                title = $(this).attr('data-title');
            }
            if (typeof (title) != 'undefined') {
                $(this).append(' ' + title);
                $(this).removeClass('btn-with-tooltip');
            }
        });
        var tooltips_group = $('._buttons').find('.btn-with-tooltip-group');
        $.each(tooltips_group, function () {
            var title = $(this).attr('title');
            if (typeof (title) == 'undefined') {
                title = $(this).attr('data-title');
            }
            if (typeof (title) != 'undefined') {
                $(this).find('.btn').eq(0).append(' ' + title);
                $(this).removeClass('btn-with-tooltip-group');
            }
        });
    }
}

// Helper hash id for estimates,invoices,proposals,expenses
function do_hash_helper(hash) {
    if (typeof (history.pushState) != "undefined") {
        var url = window.location.href;
        var obj = {
            Url: url
        };
        history.pushState(obj, '', obj.Url);
        window.location.hash = hash;
    }
}

// Form handler function for knowledgebase group
function manage_kb_groups(form) {
    var data = $(form).serialize();
    var url = form.action;
    $.post(url, data).done(function (response) {
        window.location.reload();
    });
    return false;
}

// New knowledgebase group, opens modal
function new_kb_group() {
    $('#kb_group_modal').modal('show');
    $('.edit-title').addClass('hide');
}

// Edit KB group, 2 places groups view or articles view directly click on kanban
function edit_kb_group(invoker, id) {
    $('#additional').append(hidden_input('id', id));
    $('#kb_group_modal input[name="name"]').val($(invoker).data('name'));
    $('#kb_group_modal textarea[name="description"]').val($(invoker).data('description'));
    $('#kb_group_modal .colorpicker-input').colorpicker('setValue', $(invoker).data('color'));
    $('#kb_group_modal input[name="group_order"]').val($(invoker).data('order'));
    var active = $(invoker).data('active');
    if (active == 0) {
        $('input[name="disabled"]').prop('checked', true);
    } else {
        $('input[name="disabled"]').prop('checked', false);
    }
    $('#kb_group_modal').modal('show');
    $('.add-title').addClass('hide');
}

// Validate the form reminder
function init_form_reminder() {
    var forms = $('[id^="form-reminder-"]');
    $.each(forms, function (i, form) {
        _validate_form($(form), {
            date: 'required',
            staff: 'required'
        }, reminderFormHandler);
    });
}

function edit_reminder(id, e) {
    $.get(admin_url + 'misc/get_reminder/' + id, function (response) {
        var $reminderModal = $('.reminder-modal-' + response.rel_type + '-' + response.rel_id);
        $reminderModal.find('form').attr('action', admin_url + 'misc/edit_reminder/' + id);
        $reminderModal.find('#description').val(response.description);
        $reminderModal.find('#date').val(response.date);
        $reminderModal.find('#staff').selectpicker('val', response.staff);
        if (response.notify_by_email == 1) {
            $reminderModal.find('#notify_by_email').prop('checked', true);
        } else {
            $reminderModal.find('#notify_by_email').prop('checked', false);
        }
        $reminderModal.modal('show');
    }, 'json');
}

// Handles reminder modal form
function reminderFormHandler(form) {
    form = $(form);
    var data = form.serialize();
    var serializeArray = $(form).serializeArray();
    $.post(form.attr('action'), data).done(function (data) {
        data = JSON.parse(data);
        if (data.message != '') {
            alert_float(data.alert_type, data.message);
        }
        var remindertabcount = $(".remindertab .badge").html();
        if (remindertabcount != "") {
            remindertabcount = parseInt(remindertabcount) + parseInt(1);
        } else {
            remindertabcount = 1;
        }
        $(".remindertab .badge").html(remindertabcount);
        reload_reminders_tables();
    });
    $('.reminder-modal-' + serializeArray[1]['value'] + '-' + serializeArray[0]['value']).modal('hide');
    return false;
}

function reload_reminders_tables() {
    $.each(available_reminders_table, function (i, table) {
        if ($.fn.DataTable.isDataTable(table)) {
            $('body').find(table).DataTable().ajax.reload();
        }
    });
}

$(document).keyup(function (e) {
    if (e.keyCode == 27) { // escape key maps to keycode `27`
        // Close modal if only modal is opened and there is no 2 modals opened
        // This will trigger only if there is only 1 modal visible/opened
        if ($('.modal').is(':visible') && $('.modal:visible').length == 1) {
            $('body').find('.modal:visible [onclick^="close_modal_manually"]').eq(0).click();
        }
    }
});

// Function to close modal manually... needed in some modals where the data is flexible.
function close_modal_manually(modal) {
    if ($(modal).length == 0) {
        modal = $('body').find(modal);
    } else {
        modal = $(modal);
    }
    modal.fadeOut('fast', function () {
        modal.remove();
        if (!$('body').find('.modal').is(':visible')) {
            $('.modal-backdrop').remove();
            $('body').removeClass('modal-open');
        }
    });
}

/* Global function for editing notes */
function toggle_edit_note(id) {
    $('body').find('[data-note-edit-textarea="' + id + '"]').toggleClass('hide');
    $('body').find('[data-note-description="' + id + '"]').toggleClass('hide');
}

/**
 * Modified By : Vaidehi
 * Dt : 11/16/2017
 * to make log entry for notes updated in lead module
 */
function edit_note(id, leadid, module) {

    if (leadid == undefined) {
        leadid = "";
    }
    if (module == undefined) {
        module = "";
    }
    var description = $('body').find('[data-note-edit-textarea="' + id + '"] textarea').val();
    if (description != '') {
        $.post(admin_url + 'misc/edit_note/' + id, {
            description: description,
            leadid: leadid,
            module: module
        }).done(function (response) {
            response = JSON.parse(response);
            if (response.success == true) {
                alert_float('success', response.message);
                $('body').find('[data-note-description="' + id + '"]').html(nl2br(description));
            }
        });
        toggle_edit_note(id);
    }

}

function toggle_file_visibility(attachment_id, rel_id, invoker) {
    $.get(admin_url + 'misc/toggle_file_visibility/' + attachment_id, function (response) {
        if (response == 1) {
            $(invoker).find('i').removeClass('fa fa-toggle-off').addClass('fa fa-toggle-on');
        } else {
            $(invoker).find('i').removeClass('fa fa-toggle-on').addClass('fa fa-toggle-off');
        }
    });
}

function nl2br(str, is_xhtml) {
    var breakTag = (is_xhtml || typeof is_xhtml === 'undefined') ? '<br />' : '<br>';
    return (str + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + breakTag + '$2');
}

function fix_kanban_height(col_px, container_px) {
    // Set the width of the kanban container
    $('body').find('div.dt-loader').remove();
    var kanbanCol = $('.kan-ban-content-wrapper');
    kanbanCol.css('max-height', (window.innerHeight - col_px) + 'px');
    $('.kan-ban-content').css('min-height', (window.innerHeight - col_px) + 'px');
    var kanbanColCount = parseInt(kanbanCol.length);
    $('.container-fluid').css('min-width', (kanbanColCount * container_px) + 'px');
}

function kanban_load_more(status_id, e, url, column_px, container_px) {
    var LoadMoreParameters = [];
    var search = $('input[name="search"]').val();
    var _kanban_param_val;
    var page = $(e).attr('data-page');
    var total_pages = $('[data-col-status-id="' + status_id + '"]').data('total-pages');
    if (page <= total_pages) {

        var sort_type = $('input[name="sort_type"]');
        var sort = $('input[name="sort"]').val();
        if (sort_type.length != 0 && sort_type.val() != '') {
            LoadMoreParameters['sort_by'] = sort_type.val();
            LoadMoreParameters['sort'] = sort;
        }

        if (search != '') {
            LoadMoreParameters['search'] = search;
        }

        $.each($('#kanban-params input'), function () {
            _kanban_param_val = $(this).val();
            if (_kanban_param_val != '') {
                LoadMoreParameters[$(this).attr('name')] = _kanban_param_val;
            }
        });

        LoadMoreParameters['status'] = status_id;
        LoadMoreParameters['page'] = page;
        LoadMoreParameters['page']++;

        $.get(buildUrl(admin_url + url, LoadMoreParameters), function (response) {
            page++;
            $('[data-load-status="' + status_id + '"]').before(response);
            $(e).attr('data-page', page);
            fix_kanban_height(column_px, container_px);
        }).fail(function (error) {
            alert_float('danger', error.responseText);
        });

        if (page >= total_pages - 1) {
            $(e).addClass("disabled");
        }
    }
}

function check_kanban_empty_col(selector) {
    var statuses = $('[data-col-status-id]');
    $.each(statuses, function (i, obj) {
        var total = $(obj).find(selector).length;
        if (total == 0) {
            $(obj).find('.kanban-empty').removeClass('hide');
            $(obj).find('.kanban-load-more').addClass('hide');
        } else {
            $(obj).find('.kanban-empty').addClass('hide');
        }
    });
}

function init_kanban(url, callbackUpdate, connect_with, column_px, container_px, callback_after_load, action = "") {

    if ($('#kan-ban').length == 0) {
        return;
    }
    var pid = getParameterByName('pid');
    var lid = getParameterByName('lid');

    var parameters = [];
    var _kanban_param_val;

    $.each($('#kanban-params input'), function () {
        _kanban_param_val = $(this).val();
        if (_kanban_param_val != '') {
            parameters[$(this).attr('name')] = _kanban_param_val;
        }
    });

    var search = $('input[name="search"]').val();
    if (search != null && search != "") {
        parameters['search'] = search;
    }
    if (pid != null) {
        parameters['pid'] = pid;
    }
    if (lid != null) {
        parameters['lid'] = lid;
    }

    var sort_type = $('input[name="sort_type"]');
    var sort = $('input[name="sort"]').val();
    if (sort_type.length != 0 && sort_type.val() != '') {
        parameters['sort_by'] = sort_type.val();
        parameters['sort'] = sort;
    }
    var limit = 9;
    if ($('select.page_itmes_no').length > 0) {
        limit = $('select.page_itmes_no').val();
        if (typeof (limit) == "undefined") {
            limit = 9;
        }
    }
    var page = 1;
    if ($('li.paginate_button.active').length > 0) {
        page = page_no = $('li.paginate_button.active a').attr('data-dt-idx');
        var lastActive = $('li.paginate_button.lastactive a').attr('data-dt-idx');
        if (page_no == "next") {
            page = parseInt(lastActive) + 1;
        }
        if (page_no == "previous") {
            page = parseInt(lastActive) - 1;
        }
    }
    if (page <= 0) {
        page = 1;
    }
    if (action == "limitchanged") {
        page = 1;
    }

    if ($('#invite_status').length > 0) {
        parameters['status'] = $('#invite_status').val();
    }

    parameters['limit'] = limit;
    parameters['page'] = page;

    parameters['kanban'] = true;
    var url = admin_url + url;
    url = buildUrl(url, parameters);
    delay(function () {
        $('body').append('<div class="dt-loader"></div>');
        $('#kan-ban').load(url, function () {
            fix_kanban_height(column_px, container_px);

            if (typeof (callback_after_load) != 'undefined' && callback_after_load != "") {
                callback_after_load();
            }

            $(".status").sortable({
                connectWith: connect_with,
                helper: 'clone',
                appendTo: '#kan-ban',
                placeholder: "ui-state-highlight-card",
                revert: 'invalid',
                scroll: true,
                scrollSensitivity: 50,
                scrollSpeed: 70,
                drag: function (event, ui) {
                    var st = parseInt($(this).data("startingScrollTop"));
                    ui.position.top -= $(this).parent().scrollTop() - st;
                },
                start: function (event, ui) {
                    $(ui.helper).addClass('tilt');
                    $(ui.helper).find('.panel-body').css('background', '#fbfbfb');
                    // Start monitoring tilt direction
                    tilt_direction($(ui.helper));
                },
                stop: function (event, ui) {
                    $(ui.helper).removeClass("tilt");
                    // Unbind temporary handlers and excess data
                    $("html").off('mousemove', $(ui.helper).data("move_handler"));
                    $(ui.helper).removeData("move_handler");
                },
                update: function (event, ui) {
                    callbackUpdate(ui, this);
                }
            });

            $('.status').sortable({
                cancel: '.not-sortable'
            });
        });

    }, 200);
}

function tilt_direction(item) {
    setTimeout(function () {
        var left_pos = item.position().left,
            move_handler = function (e) {
                if (e.pageX >= left_pos) {
                    item.addClass("right");
                    item.removeClass("left");
                } else {
                    item.addClass("left");
                    item.removeClass("right");
                }
                left_pos = e.pageX;
            };
        $("html").on("mousemove", move_handler);
        item.data("move_handler", move_handler);
    }, 1000);
}

/* NEWSFEED FUNCTIONS */

// When window scroll to down load more posts
$('#newsfeed').scroll(function (e) {
    var elem = $(e.currentTarget);
    if (elem[0].scrollHeight - elem.scrollTop() == elem.outerHeight()) {
        load_newsfeed();
    }
    $('#newsfeed .close_newsfeed').css('top', ($(this).scrollTop() + 20) + "px");
});

function init_newsfeed_form() {
    // Configure dropzone

    if (typeof (newsFeedDropzone) == 'undefined') {
        // Init new post form
        $('body').on('submit', '#new-post-form', function () {
            $.post(this.action, $(this).serialize()).done(function (response) {
                response = JSON.parse(response);
                if (response.postid) {
                    if (newsFeedDropzone.getQueuedFiles().length > 0) {
                        newsFeedDropzone.options.url = admin_url + 'newsfeed/add_post_attachments/' + response.postid;
                        newsFeedDropzone.processQueue();
                        return;
                    }
                    newsfeed_new_post(response.postid);
                    clear_newsfeed_post_area();
                }
            });
            return false;
        });
    }


    newsFeedDropzone = new Dropzone("#new-post-form", {
        clickable: '.add-post-attachments',
        autoProcessQueue: false,
        addRemoveLinks: true,
        parallelUploads: app_newsfeed_maximum_files_upload,
        maxFiles: app_newsfeed_maximum_files_upload,
        maxFilesize: app_newsfeed_maximum_file_size,
        acceptedFiles: app_allowed_files,
        dictDefaultMessage: appLang.drop_files_here_to_upload,
        dictFallbackMessage: appLang.browser_not_support_drag_and_drop,
        dictRemoveFile: appLang.remove_file,
        dictMaxFilesExceeded: appLang.you_can_not_upload_any_more_files,
    });


    // On post added success
    newsFeedDropzone.on('success', function (files, response) {
        total_new_post_files--;
        if (total_new_post_files == 0) {
            response = JSON.parse(response);
            newsfeed_new_post(response.postid);
            clear_newsfeed_post_area();
            newsFeedDropzone.removeAllFiles();
        }
    });
    // When drag finished
    newsFeedDropzone.on("dragover", function (file) {
        $('#new-post-form').addClass('dropzone-active')
    });

    newsFeedDropzone.on("drop", function (file) {
        $('#new-post-form').removeClass('dropzone-active')
    });
    // On error files decrement total files
    newsFeedDropzone.on("error", function (file, response) {
        total_new_post_files--;
        alert_float('danger', response);
    });
    // When user click on remove files decrement total files
    newsFeedDropzone.on('removedfile', function (file) {
        total_new_post_files--;
    });
    // On added new file increment total files variable
    newsFeedDropzone.on("addedfile", function (file) {
        // Refresh total files to zero if no files are found becuase removedFile goes to --;
        if (this.getQueuedFiles().length == 0) {
            total_new_post_files = 0;
        }
        total_new_post_files++;
    });

}

// Clear newsfeed new post area
function clear_newsfeed_post_area() {
    $('#new-post-form textarea').val('');
    $('#post-visibility').selectpicker('val', 'all');
}

// Load post likes modal
function load_post_likes(postid) {

    if (track_load_post_likes <= post_likes_total_pages) {
        $.post(admin_url + 'newsfeed/load_likes_modal', {
            page: track_load_post_likes,
            postid: postid
        }).done(function (response) {
            track_load_post_likes++
            $('#modal_post_likes_wrapper').append(response);
        });

        if (track_load_post_likes >= post_likes_total_pages - 1) {
            $('.likes_modal .modal-footer').addClass('hide');
        }
    }
}

// Load comment likes modal
function load_comment_likes(commentid) {

    if (track_load_comment_likes <= comment_likes_total_pages) {
        $.post(admin_url + 'newsfeed/load_comment_likes_model', {
            page: track_load_comment_likes,
            commentid: commentid
        }).done(function (response) {
            track_load_comment_likes++
            $('#modal_comment_likes_wrapper').append(response);
        });

        if (track_load_comment_likes >= comment_likes_total_pages - 1) {
            $('.likes_modal .modal-footer').addClass('hide');
        }
    }
}

// On click href load more comments from single post
function load_more_comments(link) {
    var postid = $(link).data('postid');
    var page = $(link).find('input[name="page"]').val();
    var total_pages = $(link).data('total-pages');

    if (page <= total_pages) {
        $.post(admin_url + 'newsfeed/init_post_comments/' + postid, {
            page: page
        }).done(function (response) {
            $(link).data('track-load-comments', page);
            $('[data-comments-postid="' + postid + '"] .load-more-comments').before(response);
        });
        page++;
        $(link).find('input[name="page"]').val(page);
        if (page >= total_pages - 1) {
            $(link).addClass('hide');
            $(link).removeClass('display-block');
        }
    }
}

// new post added append data
function newsfeed_new_post(postid) {
    var data = {};
    data.postid = postid;
    $.post(admin_url + 'newsfeed/load_newsfeed', data).done(function (response) {
        var pinned = $('#newsfeed_data').find('.pinned');
        var pinned_length = pinned.length
        if (pinned_length == 0) {
            $('#newsfeed_data').prepend(response);
        } else {
            var last_pinned = $('#newsfeed_data').find('.pinned').eq(pinned_length - 1);
            $(last_pinned).after(response);
        }
    });
}

// Init newsfeed data
function load_newsfeed(postid) {

    var data = {};
    data.page = newsfeed_posts_page;
    if (typeof (postid) != 'undefined' && postid != 0) {
        data.postid = postid;
    }
    var total_pages = $('input[name="total_pages_newsfeed"]').val();
    if (newsfeed_posts_page <= total_pages) {
        $.post(admin_url + 'newsfeed/load_newsfeed', data).done(function (response) {
            newsfeed_posts_page++
            $('#newsfeed_data').append(response);
        });
        if (newsfeed_posts_page >= total_pages - 1) {
            return;
        }
    }
}

// When user click heart button
function like_post(postid) {
    $.get(admin_url + 'newsfeed/like_post/' + postid, function (response) {
        if (response.success == true) {
            refresh_post_likes(postid);
        }
    }, 'json');
}

// Unlikes post
function unlike_post(postid) {
    $.get(admin_url + 'newsfeed/unlike_post/' + postid, function (response) {
        if (response.success == true) {
            refresh_post_likes(postid);
        }
    }, 'json');
}

// Like post comment
function like_comment(commentid, postid) {
    $.get(admin_url + 'newsfeed/like_comment/' + commentid + '/' + postid, function (response) {
        if (response.success == true) {
            $('[data-commentid="' + commentid + '"]').replaceWith(response.comment);
        }
    }, 'json');
}

// Unlike post comment
function unlike_comment(commentid, postid) {
    $.get(admin_url + 'newsfeed/unlike_comment/' + commentid + '/' + postid, function (response) {
        if (response.success == true) {
            $('[data-commentid="' + commentid + '"]').replaceWith(response.comment);
        }
    }, 'json');
}

// Add new comment to post
function add_comment(input) {
    var postid = $(input).data('postid');
    $.post(admin_url + 'newsfeed/add_comment', {
        content: $(input).val(),
        postid: postid
    }).done(function (response) {
        response = JSON.parse(response);
        if (response.success == true) {
            $(input).val('');
            if ($('body').find('[data-comments-postid="' + postid + '"] .post-comment').length > 0) {
                $('body').find('[data-comments-postid="' + postid + '"] .post-comment').prepend(response.comment);
            } else {
                refresh_post_comments(postid);
            }
        }
    });
}

// Removes post comment
function remove_post_comment(id, postid) {
    $.get(admin_url + 'newsfeed/remove_post_comment/' + id + '/' + postid, function (response) {
        if (response.success == true) {
            $('.comment[data-commentid="' + id + '"]').remove();
        }
    }, 'json');
}

// Refreshing only post likes
function refresh_post_likes(postid) {
    $.get(admin_url + 'newsfeed/init_post_likes/' + postid + '?refresh_post_likes=true', function (response) {
        $('[data-likes-postid="' + postid + '"]').html(response);
    });
}

// Refreshing only post comments
function refresh_post_comments(postid) {
    $.post(admin_url + 'newsfeed/init_post_comments/' + postid + '?refresh_post_comments=true').done(function (response) {
        $('[data-comments-postid="' + postid + '"]').html(response);
    });
}

// Delete post from database
function delete_post(postid) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.post(admin_url + 'newsfeed/delete_post/' + postid, function (response) {
            if (response.success == true) {
                $('[data-main-postid="' + postid + '"]').remove();
            }
        }, 'json');
    }
}

// Ping post to top
function pin_post(id) {
    $.get(admin_url + 'newsfeed/pin_newsfeed_post/' + id, function (response) {
        if (response.success == true) {
            window.location.reload();
        }
    }, 'json');
}

// Unpin post from top
function unpin_post(id) {
    $.get(admin_url + 'newsfeed/unpin_newsfeed_post/' + id, function (response) {
        if (response.success == true) {
            window.location.reload();
        }
    }, 'json');
}

/* LEADS JS */

function init_lead(id) {
    if ($('#task-modal').is(':visible')) {
        $('#task-modal').modal('hide');
    }
    // In case header error
    if (init_lead_modal_data(id)) {
        $('#lead-modal').modal('show');
    }
}

function validate_lead_form(formHandler) {
    _validate_form($('#lead_form'), {
        name: 'required',
        status: {
            required: {
                depends: function (element) {
                    if ($('[lead-is-junk-or-lost]').length > 0) {
                        return false;
                    } else {
                        return true;
                    }
                }
            }
        },
        source: 'required',
        email: {
            email: true,
            remote: {
                url: admin_url + "leads/email_exists",
                type: 'post',
                data: {
                    email: function () {
                        return $('input[name="email"]').val();
                    },
                    leadid: function () {
                        return $('input[name="leadid"]').val();
                    }
                }
            }
        }
    }, formHandler);
}

function validate_lead_convert_to_client_form() {

    var rules_convert_lead = {
        firstname: 'required',
        lastname: 'required',
        password: {
            required: {
                depends: function (element) {
                    var sent_set_password = $('input[name="send_set_password_email"]');
                    if (sent_set_password.prop('checked') == false) {
                        return true;
                    }
                }
            }
        },
        email: {
            required: true,
            email: true,
            remote: {
                url: site_url + "admin/misc/contact_email_exists",
                type: 'post',
                data: {
                    email: function () {
                        return $('#lead_to_client_form input[name="email"]').val();
                    },
                    userid: ''
                }
            }
        }

    };
    if (app_company_is_required == 1) {
        rules_convert_lead.company = 'required';
    }
    _validate_form($('#lead_to_client_form'), rules_convert_lead);
}

// Lead profile data function form handler
function lead_profile_form_handler(form) {
    form = $(form);
    var data = form.serialize();
    var serializeArray = $(form).serializeArray();
    var leadid = $('#lead-modal').find('input[name="leadid"]').val();
    $.post(form.attr('action'), data).done(function (response) {
        response = JSON.parse(response);
        if (response.id) {
            leadid = response.id;
        }
        if (response.message != '') {
            alert_float('success', response.message);
        }
        if (response.proposal_warning && response.proposal_warning != false) {
            $('body').find('#lead_proposal_warning').removeClass('hide');
            $('body').find('#lead-modal').animate({
                scrollTop: 0
            }, 800);
        } else {
            init_lead_modal_data(leadid);
        }
        // If is from kanban reload the list tables
        if ($.fn.DataTable.isDataTable('.table-leads')) {
            $('.table-leads').DataTable().ajax.reload(null, false);
        }

        /**
         * Added By : Vaidehi
         * Dt : 12/20/2017
         * If is from kanban reload the list tables
         */
        if ($.fn.DataTable.isDataTable('.table-projects')) {
            $('.table-projects').DataTable().ajax.reload(null, false);
        }
    }).fail(function (data) {
        alert_float('danger', data.responseText);
        return false;
    });
    return false;
}

function update_all_proposal_emails_linked_to_lead(id) {
    $.post(admin_url + 'leads/update_all_proposal_emails_linked_to_lead/' + id, {
        update: true
    }).done(function (response) {
        response = JSON.parse(response);
        if (response.success) {
            alert_float('success', response.message);
        }
        init_lead_modal_data(id);
    });
}

function init_lead_modal_data(id, url) {

    if (typeof (id) == 'undefined') {
        id = '';
    }
    var _url = admin_url + 'leads/lead/' + id;
    if (typeof (url) != 'undefined') {
        _url = url;
    }
    // get the current hash
    var hash = window.location.hash;
    // clean the modal
    // $('#lead-modal .data').html('');
    $.get(_url, function (response) {
        $('#lead-modal .data').html(response.data);
        $('#lead_reminder_modal').html(response.reminder_data);
        init_tags_inputs();
        $('#lead-modal').modal({
            show: true,
            backdrop: 'static'
        });
        init_selectpicker();
        init_form_reminder();
        init_datepicker();
        init_color_pickers();
        validate_lead_form(lead_profile_form_handler);

        if (hash == '#tab_lead_profile' || hash == '#attachments' || hash == '#lead_notes') {
            window.location.hash = hash;
        }
        if (id != '') {

            if (typeof (Dropbox) != 'undefined') {
                document.getElementById("dropbox-chooser-lead").appendChild(Dropbox.createChooseButton({
                    success: function (files) {
                        $.post(admin_url + 'leads/add_external_attachment', {
                            files: files,
                            lead_id: id,
                            external: 'dropbox'
                        }).done(function () {
                            init_lead_modal_data(id);
                        });
                    },
                    linkType: "preview",
                    extensions: app_allowed_files.split(','),
                }));
            }

            if (typeof (leadAttachmentsDropzone) != 'undefined') {
                leadAttachmentsDropzone.destroy();
            }

            leadAttachmentsDropzone = new Dropzone("#lead-attachment-upload", {
                dictDefaultMessage: appLang.drop_files_here_to_upload,
                dictCancelUpload: appLang.cancel_upload,
                dictFileTooBig: appLang.file_exceeds_maxfile_size_in_form,
                dictMaxFilesExceeded: appLang.you_can_not_upload_any_more_files,
                maxFilesize: (max_php_ini_upload_size_bytes / (1024 * 1024)).toFixed(0),
                dictFallbackMessage: appLang.browser_not_support_drag_and_drop,
                sending: function (file, xhr, formData) {
                    formData.append("leadid", id);
                },
                acceptedFiles: app_allowed_files,
                error: function (file, response) {
                    alert_float('danger', response);
                },
                success: function (file) {
                    if (this.getUploadingFiles().length === 0 && this.getQueuedFiles().length === 0) {
                        init_lead_modal_data(id);
                    }
                }
            });

            $('body').find('.nav-tabs a[href="' + window.location.hash + '"]').tab('show');
            var latest_lead_activity = $('#lead_activity').find('.feed-item:last-child .text').html();
            if (typeof (latest_lead_activity) != 'undefined') {
                $('#lead-latest-activity').html(latest_lead_activity);
            } else {
                $('.lead-latest-activity > .lead-info-heading').addClass('hide');
            }
        }

    }, 'json').fail(function (data) {
        $('#lead-modal').modal('hide');
        alert_float('danger', data.responseText);
    });
}

// Kanban lead sort
function leads_kanban_sort(type) {
    var sort_type = $('input[name="sort_type"]');
    var sort = $('input[name="sort"]');
    sort_type.val(type);
    if (sort.val() == 'ASC') {
        sort.val('DESC');
    } else if (sort.val() == 'DESC') {
        sort.val('ASC');
    } else {
        sort.val('DESC');
    }

    leads_kanban();
}

/**
 * Added By : Vaidehi
 * Dt : 12/19/2017
 * Kanban project sort
 */
function projects_kanban_sort(type) {
    var sort_type = $('input[name="sort_type"]');
    var sort = $('input[name="sort"]');
    sort_type.val(type);
    if (sort.val() == 'ASC') {
        sort.val('DESC');
    } else if (sort.val() == 'DESC') {
        sort.val('ASC');
    } else {
        sort.val('DESC');
    }

    projects_kanban();
}

/**
 * Added By : Masud
 * Dt : 12/19/2017
 * Kanban Meetings sort
 */
function meetings_kanban_sort(type) {
    var sort_type = $('input[name="sort_type"]');
    var sort = $('input[name="sort"]');
    sort_type.val(type);
    if (sort.val() == 'ASC') {
        sort.val('DESC');
    } else if (sort.val() == 'DESC') {
        sort.val('ASC');
    } else {
        sort.val('DESC');
    }

    meetings_kanban();
}

function leads_kanban_update(ui, object) {
    if (object === ui.item.parent()[0]) {
        var data = {};
        data.status = $(ui.item.parent()[0]).data('lead-status-id');
        data.leadid = $(ui.item).data('lead-id');

        var order = [];
        var status = $(ui.item).parents('.leads-status').find('li')
        var i = 1;
        $.each(status, function () {
            order.push([$(this).data('lead-id'), i]);
            i++;
        });
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("leads"));

        data.order = order;
        setTimeout(function () {
            $.post(admin_url + 'leads/update_kan_ban_lead_status', data).done(function (response) {
                check_kanban_empty_col('[data-lead-id]');
                $.ajax({
                    type: 'POST',
                    data: {},
                    url: shortUrl + "leads/leadoverviewupdate"
                }).done(function (response) {
                    $(".leads-overview").html(response);
                });
            });
        }, 200);
    }
}

/**
 * Added By : Vaidehi
 * Dt : 12/19/2017
 * Kanban project update
 */
function projects_kanban_update(ui, object) {
    if (object === ui.item.parent()[0]) {
        var data = {};
        data.status = $(ui.item.parent()[0]).data('project-status-id');
        data.projectid = $(ui.item).data('project-id');

        var order = [];
        var status = $(ui.item).parents('.projects-status').find('li')
        var i = 1;
        $.each(status, function () {
            order.push([$(this).data('project-id'), i]);
            i++;
        });
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("projects"));

        data.order = order;
        setTimeout(function () {
            $.post(admin_url + 'projects/update_kan_ban_project_status', data).done(function (response) {
                check_kanban_empty_col('[data-project-id]');
                $.ajax({
                    type: 'POST',
                    data: {},
                    url: shortUrl + "projects/projectoverviewupdate"
                }).done(function (response) {
                    $(".projects-overview").html(response);
                });
            });
        }, 200);
    }
}

/**
 * Added By : Masud
 * Dt : 06/11/2018
 * Kanban Meetings update
 */
function meetings_kanban_update(ui, object) {
    if (object === ui.item.parent()[0]) {
        var data = {};
        data.status = $(ui.item.parent()[0]).data('meeting-status-id');
        data.projectid = $(ui.item).data('meeting-id');

        var order = [];
        var status = $(ui.item).parents('.meetings-status').find('li')
        var i = 1;
        $.each(status, function () {
            order.push([$(this).data('meeting-id'), i]);
            i++;
        });
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("meetings"));

        data.order = order;
        setTimeout(function () {
            /*$.post(admin_url + 'projects/update_kan_ban_project_status', data).done(function (response) {
                check_kanban_empty_col('[data-project-id]');
                $.ajax({
                    type: 'POST',
                    data: {},
                    url: shortUrl + "projects/projectoverviewupdate"
                }).done(function (response) {
                    $(".projects-overview").html(response);
                });
            });*/
        }, 200);
    }
}

/**
 * Added By : Masud
 * Dt : 06/12/2018
 * Kanban Messages update
 */
function messages_kanban_update(ui, object) {
    if (object === ui.item.parent()[0]) {
        var data = {};
        data.status = $(ui.item.parent()[0]).data('messages-status-id');
        data.projectid = $(ui.item).data('message-id');

        var order = [];
        var status = $(ui.item).parents('.messages-status').find('li')
        var i = 1;
        $.each(status, function () {
            order.push([$(this).data('message-id'), i]);
            i++;
        });
        var url = document.URL,
            shortUrl = url.substring(0, url.indexOf("messages"));

        data.order = order;
        setTimeout(function () {
            /*$.post(admin_url + 'projects/update_kan_ban_project_status', data).done(function (response) {
                check_kanban_empty_col('[data-project-id]');
                $.ajax({
                    type: 'POST',
                    data: {},
                    url: shortUrl + "projects/projectoverviewupdate"
                }).done(function (response) {
                    $(".projects-overview").html(response);
                });
            });*/
        }, 200);
    }
}

function init_leads_status_sortable() {
    // $("#kan-ban").sortable({
    //     helper: 'clone',
    //     item: '.kan-ban-col',
    //     update: function(event, ui) {
    //         var order = [];
    //         var status = $('.kan-ban-col');
    //         var i = 0;
    //         $.each(status, function() {
    //             order.push([$(this).data('col-status-id'), i]);
    //             i++;
    //         });
    //         var data = {}
    //         data.order = order;
    //         $.post(admin_url + 'leads/update_status_order', data);
    //     }
    // });
}

function init_projects_status_sortable() {
    // $("#kan-ban").sortable({
    //     helper: 'clone',
    //     item: '.kan-ban-col',
    //     update: function(event, ui) {
    //         var order = [];
    //         var status = $('.kan-ban-col');
    //         var i = 0;
    //         $.each(status, function() {
    //             order.push([$(this).data('col-status-id'), i]);
    //             i++;
    //         });
    //         var data = {}
    //         data.order = order;
    //         $.post(admin_url + 'leads/update_status_order', data);
    //     }
    // });
}

function init_meetings_status_sortable() {
    // $("#kan-ban").sortable({
    //     helper: 'clone',
    //     item: '.kan-ban-col',
    //     update: function(event, ui) {
    //         var order = [];
    //         var status = $('.kan-ban-col');
    //         var i = 0;
    //         $.each(status, function() {
    //             order.push([$(this).data('col-status-id'), i]);
    //             i++;
    //         });
    //         var data = {}
    //         data.order = order;
    //         $.post(admin_url + 'leads/update_status_order', data);
    //     }
    // });
}

function init_messages_status_sortable() {
    // $("#kan-ban").sortable({
    //     helper: 'clone',
    //     item: '.kan-ban-col',
    //     update: function(event, ui) {
    //         var order = [];
    //         var status = $('.kan-ban-col');
    //         var i = 0;
    //         $.each(status, function() {
    //             order.push([$(this).data('col-status-id'), i]);
    //             i++;
    //         });
    //         var data = {}
    //         data.order = order;
    //         $.post(admin_url + 'leads/update_status_order', data);
    //     }
    // });
}

// Init the leads kanban
function leads_kanban(search) {
    init_kanban('leads', leads_kanban_update, '.leads-status', 310, 360, init_leads_status_sortable);
}

/**
 * Added By : Vaidehi
 * Dt : 12/19/2017
 * Init the projects kanban
 */
function projects_kanban(search) {
    init_kanban('projects', projects_kanban_update, '.projects-status', 310, 360, init_projects_status_sortable);
}

/**
 * Added By : Masud
 * Dt : 06/11/2017
 * Init the projects kanban
 */
function meetings_kanban(search) {
    init_kanban('meetings', meetings_kanban_update, '.meetings-status', 310, 360, init_meetings_status_sortable);
}

/**
 * Added By : Masud
 * Dt : 07/11/2017
 * Init the Proposals kanban
 */
function proposals_kanban(search) {
    init_kanban('proposaltemplates', '', '.proposals-status', 310, 360, '');
}

/**
 * Added By : Masud
 * Dt : 06/12/2017
 * Init the projects kanban
 */
function messages_kanban(action = "") {
    init_kanban('messages', messages_kanban_update, '.messages-status', 310, 360, init_messages_status_sortable, action);
}

/**
 * Added By : Masud
 * Dt : 06/21/2017
 * Init the Invites kanban
 */
function invites_kanban(action = "") {
    init_kanban('invites', "", '.invites-status', 310, 360, "", action);
}

/**
 * Added By : Masud
 * Dt : 06/25/2017
 * Init the Conatcs kanban
 */
function contacts_kanban(action = "") {
    init_kanban('addressbooks', "", '.addressbooks-status', 310, 360, "", action);
}

/**
 * Added By : Masud
 * Dt : 06/26/2017
 * Init the Venues kanban
 */
function venues_kanban(action = "") {
    init_kanban('venues', "", '.venues-status', 310, 360, "", action);
}

/**
 * Added By : Masud
 * Dt : 06/26/2017
 * Init the Venues kanban
 */
function invoices_kanban(action = "") {
    init_kanban('invoices', "", '.invoices-status', 310, 360, "", action);
}

/**
 * Added By : Masud
 * Dt : 06/26/2017
 * Init the Venues kanban
 */
function files_kanban(action = "") {
    init_kanban('files', "", '.files-status', 310, 360, "", action);
}

// Deleting lead attachments
function delete_lead_attachment(wrapper, id) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'leads/delete_attachment/' + id, function (response) {
            if (response.success == true) {
                $(wrapper).parents('.lead-attachment-wrapper').remove();
            }
        }, 'json').fail(function (data) {
            $('#lead-modal').modal('hide');
            alert_float('danger', data.responseText);
        });
    }
}

// Deleting lead note
function delete_lead_note(wrapper, id, leadid) {
    // var r = confirm(appLang.confirm_action_prompt);
    // if (r == false) {
    //     return false;
    // } else {
    //     $.get(admin_url + 'leads/delete_note/' + id, function(response) {
    //         if (response.success == true) {
    //             $(wrapper).parents('.lead-note').remove();
    //         }
    //     }, 'json').fail(function(data) {
    //         $('#lead-modal').modal('hide');
    //         alert_float('danger', data.responseText);
    //     });
    // }

    /**
     * Modified By : Vaidehi
     * Dt : 11/16/2017
     * to load confirm box before delete
     */
    swal({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: 'Yes, delete it!',
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: admin_url + 'leads/delete_note/' + id + '/' + leadid,
                    type: 'Get',
                })
                    .done(function (response) {
                        if (response.indexOf(':') > -1) {
                            reject(response.substring(response.indexOf(':') + 1));
                        } else {
                            swal('Deleted!', response.message, response.status);
                            window.location.reload();
                        }
                    })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong !', 'error');
                    });
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);
    return false;
}

// Deleting lead note
function delete_project_note(wrapper, id, projectid) {
    swal({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: 'Yes, delete it!',
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: admin_url + 'projects/delete_note/' + id + '/' + projectid,
                    type: 'Get',
                })
                    .done(function (response) {
                        if (response.indexOf(':') > -1) {
                            reject(response.substring(response.indexOf(':') + 1));
                        } else {
                            swal('Deleted!', response.message, response.status);
                            window.location.reload();
                        }
                    })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong !', 'error');
                    });
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);
    return false;
}

// Deleting meeting note
function delete_meeting_note(wrapper, id) {
    /*var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'meetings/delete_note/' + id, function(response) {
            if (response.success == true) {
                $(wrapper).parents('.meeting-note').remove();
            }
        }, 'json');
    }  */

    swal({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: 'Yes, delete it!',
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve) {
                $.ajax({
                    url: admin_url + 'meetings/delete_note/' + id,
                    type: 'Get',
                })
                    .done(function (response) {
                        swal('Deleted!', response.message, response.status);
                        $(wrapper).parents('.meeting-note').remove();
                    })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong !', 'error');
                    });
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);
    return false;
}

// Mark lead as lost function
function lead_mark_as_lost(lead_id) {
    $.get(admin_url + 'leads/mark_as_lost/' + lead_id, function (response) {
        if (response.success == true) {
            alert_float('success', response.message);
            $('body').find('tr#lead_' + lead_id).remove();
            $('body').find('#kan-ban li[data-lead-id="' + lead_id + '"]').remove();
        }
        init_lead_modal_data(lead_id);
    }, 'json').fail(function (error) {
        alert_float('danger', error.responseText);
    });
}

// Unmark lead as lost function
function lead_unmark_as_lost(lead_id) {
    $.get(admin_url + 'leads/unmark_as_lost/' + lead_id, function (response) {
        if (response.success == true) {
            alert_float('success', response.message);
        }
        init_lead_modal_data(lead_id);
    }, 'json').fail(function (error) {
        alert_float('danger', error.responseText);
    });
}

// Mark lead as junk function
function lead_mark_as_junk(lead_id) {
    $.get(admin_url + 'leads/mark_as_junk/' + lead_id, function (response) {
        if (response.success == true) {
            alert_float('success', response.message);
            $('body').find('tr#lead_' + lead_id).remove();
            $('body').find('#kan-ban li[data-lead-id="' + lead_id + '"]').remove();
        }
        init_lead_modal_data(lead_id);
    }, 'json').fail(function (error) {
        alert_float('danger', error.responseText);
    });
}

// Unmark lead as junk function
function lead_unmark_as_junk(lead_id) {
    $.get(admin_url + 'leads/unmark_as_junk/' + lead_id, function (response) {
        if (response.success == true) {
            alert_float('success', response.message);
        }
        init_lead_modal_data(lead_id);
    }, 'json').fail(function (error) {
        alert_float('danger', error.responseText);
    });
}

// Statuses function for add/edit becuase there is ability to edit the status directly from the lead kanban
$(function () {
    _validate_form($('body').find('#leads-status-form'), {
        name: {
            required: true,
            remote: {
                url: admin_url + "leads/leadstatus_name_exists",
                type: 'post',
                data: {
                    id: function () {
                        return $('input[name="id"]').val();
                    }
                }
            }
        }
    }, manage_leads_statuses);
    $('#status').on('hidden.bs.modal', function (event) {
        $('#additional').html('');
        $('#status input').val('');
        $('.add-title').removeClass('hide');
        $('.edit-title').removeClass('hide');
        $('#status input[name="statusorder"]').val($('table tbody tr').length + 1);
    });

    /**
     * Added By : Vaidehi
     * Dt : 12/18/2017
     * for project status
     */
    _validate_form($('body').find('#projects-status-form'), {
        name: {
            required: true,
            remote: {
                url: admin_url + "projects/projectstatus_name_exists",
                type: 'post',
                data: {
                    id: function () {
                        return $('input[name="id"]').val();
                    }
                }
            }
        }
    }, manage_projects_statuses);
    $('#project-status').on('hidden.bs.modal', function (event) {
        $('#project-additional').html('');
        $('#project-status input').val('');
        $('.add-title').removeClass('hide');
        $('.edit-title').removeClass('hide');
        $('#project-status input[name="statusorder"]').val($('table tbody tr').length + 1);
    });
});

// Form handler function for leads status
function manage_leads_statuses(form) {
    var data = $(form).serialize();
    var url = form.action;
    $.post(url, data).done(function (response) {
        response = JSON.parse(response);
        if (response.success == true) {
            window.location.reload();
            alert_float('success', response.message);
        } else {
            if (response.message != '') {
                alert_float('warning', response.message);
            }
        }
    });
    return false;
}

/**
 * Added By : Vaidehi
 * Dt : 12/18/2017
 * Form handler function for leads status
 */
function manage_projects_statuses(form) {
    var data = $(form).serialize();
    var url = form.action;
    $.post(url, data).done(function (response) {
        response = JSON.parse(response);
        if (response.success == true) {
            window.location.reload();
            alert_float('success', response.message);
        } else {
            if (response.message != '') {
                alert_float('warning', response.message);
            }
        }
    });
    return false;
}

// Statuses function for add/edit becuase there is ability to edit the status directly from the task kanban
$(function () {
    _validate_form($('body').find('#tasks-status-form'), {
        name: {
            required: true,
            remote: {
                url: admin_url + "tasks/taskstatus_name_exists",
                type: 'post',
                data: {
                    id: function () {
                        return $('input[name="id"]').val();
                    }
                }
            }
        }
    }, manage_tasks_statuses);
    $('#status').on('hidden.bs.modal', function (event) {
        $('#additional').html('');
        $('#status input').val('');
        $('.add-title').removeClass('hide');
        $('.edit-title').removeClass('hide');
        $('#status input[name="statusorder"]').val($('table tbody tr').length + 1);
    });
});

// Form handler function for tasks status
function manage_tasks_statuses(form) {
    var data = $(form).serialize();
    var url = form.action;
    $.post(url, data).done(function (response) {
        response = JSON.parse(response);
        if (response.success == true) {
            window.location.reload();
            alert_float('success', response.message);
        } else {
            if (response.message != '') {
                alert_float('warning', response.message);
            }
        }
    });
    return false;
}

// Convert lead to customer
function convert_lead_to_customer(id) {
    $('#lead-modal').modal('hide');
    $.get(admin_url + 'leads/get_convert_data/' + id, function (response) {
        $('#lead_convert_to_customer').html(response);
        $('#convert_lead_to_client_modal').modal({
            show: true,
            backdrop: 'static',
            keyboard: false
        });
    }).fail(function (data) {
        $('#lead-modal').modal('hide');
        alert_float('danger', data.responseText);
    });
}

// Create lead new status
function new_status() {
    $('#status').modal('show');
    $('.edit-title').addClass('hide');
}

/**
 * Added By : Vaidehi
 * Dt : 12/18/2017
 * Create project new status
 */
function new_project_status() {
    $('#project-status').modal('show');
    $('.edit-project-title').addClass('hide');
}

// Edit status function which init the data to the modal
function edit_status(invoker, id) {
    $('#additional').append(hidden_input('id', id));
    var name = $(invoker).data('name');
    if (name != "Pending" && name != "Completed" && name != "Past Due") {
        $('#status input[name="name"]').attr('readonly', false);
    } else {
        $('#status input[name="name"]').attr('readonly', true);
    }
    $('#status input[name="name"]').val(name);
    $('#status .colorpicker-input').colorpicker('setValue', $(invoker).data('color'));
    $('#status input[name="statusorder"]').val($(invoker).data('order'));
    $('#status').modal('show');
    $('.add-title').addClass('hide');
}

/**
 * Added By : Vaidehi
 * Dt : 12/18/2017
 * Edit status function which init the data to the modal
 */
function edit_project_status(invoker, id) {
    $('#project-additional').append(hidden_input('id', id));
    var name = $(invoker).data('name');
    if (name != "Pending" && name != "Completed" && name != "Past Due") {
        $('#project-status input[name="name"]').attr('readonly', false);
    } else {
        $('#project-status input[name="name"]').attr('readonly', true);
    }
    $('#project-status input[name="name"]').val(name);
    $('#project-status .colorpicker-input').colorpicker('setValue', $(invoker).data('color'));
    $('#project-status input[name="statusorder"]').val($(invoker).data('order'));
    $('#project-status').modal('show');
    $('.add-project-title').addClass('hide');
}


function leads_bulk_action(event) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        var mass_delete = $('#mass_delete').prop('checked');
        var ids = [];
        var data = {};
        if (mass_delete == false || typeof (mass_delete) == 'undefined') {
            data.status = $('#move_to_status_leads_bulk').val();
            data.assigned = $('#assign_to_leads_bulk').val();
            data.source = $('#move_to_source_leads_bulk').val();
            data.last_contact = $('#leads_bulk_last_contact').val();
            //data.tags = $('#tags_bulk').tagit('assignedTags');
            data.visibility = $('input[name="leads_bulk_visibility"]:checked').val();

            if (typeof (data.assigned) == 'undefined') {
                data.assigned = '';
            }
            if (typeof (data.visibility) == 'undefined') {
                data.visibility = '';
            }
            if (data.status == '' && data.assigned == '' && data.source == '' && data.last_contact == '' && data.visibility == '') {
                return;
            }
        } else {
            data.mass_delete = true;
        }

        if ($('.table-leads').length > 0) {
            var rows = $('.table-leads').find('tbody tr');
            $.each(rows, function () {
                var checkbox = $($(this).find('td').eq(0)).find('input');
                if (checkbox.prop('checked') == true) {
                    ids.push(checkbox.val());
                }
            });
        } else {
            var checkbox = $('.kanban-card').find('input');
            if (checkbox.prop('checked') == true) {
                ids.push(checkbox.val());
            }
        }
        data.ids = ids;
        $(event).addClass('disabled');
        setTimeout(function () {
            $.post(admin_url + 'leads/bulk_action', data).done(function () {
                window.location.reload();
            }).fail(function (data) {
                $('#lead-modal').modal('hide');
                alert_float('danger', data.responseText);
            });
        }, 200);
    }
}

function meeting_bulk_action(event) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        var mass_delete = $('#meeting_mass_delete').prop('checked');
        var ids = [];
        var data = {};

        if ($('.table-leads').length > 0) {
            var rows = $('.table-leads').find('tbody tr');
            $.each(rows, function () {
                var checkbox = $($(this).find('td').eq(0)).find('input');
                if (checkbox.prop('checked') == true) {
                    if (mass_delete == false) {
                        ids.push(checkbox.val());
                    }
                }
            });
        } else if ($('#kan-ban').length > 0) {
            $('ul.meetings-status li ').each(function () {
                var checkbox = $(this).find('input');
                if (checkbox.prop('checked') == true) {
                    if (mass_delete == false) {
                        ids.push(checkbox.val());
                    }
                }
            });
        }
        /*else {
                    $('ul.meetings-status li').find("input:checkbox:checked").each(function () {
                        if (mass_delete == false) {
                            ids.push($(this).val());
                        }
                    });
                }*/
        data.ids = ids;
        console.log(data);
        //return false;
        $(event).addClass('disabled');
        setTimeout(function () {
            $.post(admin_url + 'meetings/bulk_action', data).done(function () {
                window.location.reload();
            }).fail(function (data) {
                $('#lead-modal').modal('hide');
                alert_float('danger', data.responseText);
            });
        }, 200);
    }
}

function sync_proposals_data(rel_id, rel_type) {
    var data = {};
    var modal_sync = $('#sync_data_proposal_data');
    data.country = modal_sync.find('select[name="country"]').val();
    data.zip = modal_sync.find('input[name="zip"]').val();
    data.state = modal_sync.find('input[name="state"]').val();
    data.city = modal_sync.find('input[name="city"]').val();
    data.address = modal_sync.find('input[name="address"]').val();
    data.phone = modal_sync.find('input[name="phone"]').val();
    data.rel_id = rel_id;
    data.rel_type = rel_type;
    $.post(admin_url + 'proposals/sync_data', data).done(function (response) {
        response = JSON.parse(response);
        alert_float('success', response.message);
        modal_sync.modal('hide');
    });
}

function init_table_announcements(manual) {
    if (typeof (manual) == 'undefined' && $('body').hasClass('home')) {
        return false;
    }
    initDataTable('.table-announcements', admin_url + 'announcements', [2], [2], 'undefined', [1, 'DESC']);
}

function init_table_tickets(manual) {

    if (typeof (manual) == 'undefined' && $('body').hasClass('home')) {
        return false;
    }

    if ($('body').find('.tickets-table').length == 0) {
        return;
    }

    var tickets_not_sortable = $('.tickets-table').find('th').length - 1;
    var TicketServerParams = {},
        Tickets_Filters = $('._hidden_inputs._filters.tickets_filters input');
    var tickets_date_created_index = $('table.tickets-table thead .ticket_created_column').index();
    $.each(Tickets_Filters, function () {
        TicketServerParams[$(this).attr('name')] = '[name="' + $(this).attr('name') + '"]';
    });

    TicketServerParams['project_id'] = '[name="project_id"]';
    var _tns = [tickets_not_sortable];
    var _tickets_table_url = admin_url + 'tickets';
    if ($('body').hasClass('tickets_page')) {
        _tns.push(0);
        _tickets_table_url += '?bulk_actions=true';
    }
    _table_api = initDataTable('.tickets-table', _tickets_table_url, _tns, _tns, TicketServerParams, [tickets_date_created_index, 'DESC']);

    if (_table_api && $('body').hasClass('home')) {
        _table_api.column(tickets_not_sortable).visible(false, false).column(3).visible(false, false).column(tickets_date_created_index).visible(false, false).column(4).visible(false, false).column(5).visible(false, false).columns.adjust();
    }
}

function init_table_staff_projects(manual) {
    if (typeof (manual) == 'undefined' && $('body').hasClass('home')) {
        return false;
    }

    if ($('body').find('.table-staff-projects').length == 0) {
        return;
    }

    var staffProjectsParams = {},
        Staff_Projects_Filters = $('._hidden_inputs._filters.staff_projects_filter input');
    $.each(Staff_Projects_Filters, function () {
        staffProjectsParams[$(this).attr('name')] = '[name="' + $(this).attr('name') + '"]';
    });

    initDataTable('.table-staff-projects', admin_url + 'projects/staff_projects', 'undefined', 'undefined', staffProjectsParams, [2, 'ASC']);
}

function do_task_checklist_items_height(task_checklist_items) {
    if (typeof (task_checklist_items) == 'undefined') {
        task_checklist_items = $('body').find("textarea[name='checklist-description']");
    }

    $.each(task_checklist_items, function () {
        var val = $(this).val();
        if ($(this).outerHeight() < this.scrollHeight + parseFloat($(this).css("borderTopWidth")) + parseFloat($(this).css("borderBottomWidth"))) {
            $(this).height(0).height(this.scrollHeight);
            $(this).parents('.checklist').height(this.scrollHeight);
        }
        if (val == '') {
            $(this).removeAttr('style');
            $(this).parents('.checklist').removeAttr('style');
        }
    });
}

function recalculate_checklist_items_progress() {
    var total_finished = $('input[name="checklist-box"]:checked').length;
    var total_checklist_items = $('input[name="checklist-box"]').length;

    var percent = 0,
        task_progress_bar = $('.task-progress-bar');
    if (total_checklist_items == 0) {
        // remove the heading for checklist items
        //$('body').find('.chk-heading').remove();
        $('#task-no-checklist-items').removeClass('hide');
    } else {
        $('#task-no-checklist-items').addClass('hide');
    }
    if (total_checklist_items > 0) {

        task_progress_bar.parents('.progress').removeClass('hide');
        percent = (total_finished * 100) / total_checklist_items;

    } else {
        task_progress_bar.parents('.progress').addClass('hide');
        return false;
    }

    task_progress_bar.css('width', percent + '%');
    task_progress_bar.text(percent.toFixed() + '%');
}

function delete_checklist_item(id, field) {
    $.get(admin_url + 'tasks/delete_checklist_item/' + id, function (response) {
        if (response.success == true) {
            $(field).parents('.checklist').remove();
            recalculate_checklist_items_progress();
        }
    }, 'json');
}

function remove_checklist_item_template(id) {
    $.get(admin_url + 'tasks/remove_checklist_item_template/' + id, function (response) {
        if (response.success == true) {
            var itemsTemplateSelect = $('body').find('select.checklist-items-template-select');
            var deletedItemDescription = itemsTemplateSelect.find('option[value="' + id + '"]').html().trim();
            var currentChecklists = $('#task-modal .checklist');

            $.each(currentChecklists, function (i, area) {
                var checkList = $(area);
                if (checkList.find('textarea[name="checklist-description"]').val().trim() == deletedItemDescription) {
                    checkList.find('.save-checklist-template').removeClass('hide');
                }
            });

            itemsTemplateSelect.find('option[value="' + id + '"]').remove();
            itemsTemplateSelect.selectpicker('refresh');

            if (itemsTemplateSelect.find('option').length == 1) {
                itemsTemplateSelect.selectpicker('destroy');
                $('.checklist-templates-wrapper').addClass('hide');
            }

        }
    }, 'json');
}

function save_checklist_item_template(id, field) {
    var description = $('.checklist[data-checklist-id="' + id + '"] textarea').val();
    $.post(admin_url + 'tasks/save_checklist_item_template', {description: description}).done(function (response) {
        response = JSON.parse(response);
        $(field).addClass('hide');
        var singleChecklistTemplate = $('.checklist-templates-wrapper');
        singleChecklistTemplate.find('select option[value=""]').after('<option value="' + response.id + '">' + description.trim() + '</option>');
        singleChecklistTemplate.removeClass('hide');
        singleChecklistTemplate.find('select').selectpicker('refresh');
    });
}

function update_checklist_order() {
    var order = [];
    var items = $('body').find('.checklist');
    if (items.length == 0) {
        return;
    }
    var i = 1;
    $.each(items, function () {
        order.push([$(this).data('checklist-id'), i]);
        i++;
    });
    var data = {}
    data.order = order;
    $.post(admin_url + 'tasks/update_checklist_order', data);
}

function add_task_checklist_item(task_id, description) {
    if (typeof (description) == 'undefined') {
        description = '';
    }
    $.post(admin_url + 'tasks/add_checklist_item', {
        taskid: task_id,
        description: description
    }).done(function () {
        init_tasks_checklist_items(true, task_id);
    });
}

function init_tasks_checklist_items(is_new, task_id) {

    $.post(admin_url + 'tasks/init_checklist_items', {
        taskid: task_id
    }).done(function (data) {
        $('#checklist-items').html(data);
        if (typeof (is_new) != 'undefined') {
            var first = $('#checklist-items').find('.checklist textarea').eq(0);
            if (first.val() == '') {
                first.focus();
            }
        }
        recalculate_checklist_items_progress();
        update_checklist_order();
    });
}

function remove_task_attachment(link, id) {

    swal({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: 'Yes, delete it!',
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: admin_url + 'tasks/remove_task_attachment/' + id,
                    type: 'Get',
                })
                    .done(function (response) {
                        response = JSON.parse(response);
                        if (response.success == true) {
                            $('[data-task-attachment-id="' + id + '"]').remove();
                            swal('Attachment removed successfully.', response.message, response.status);
                        } else {
                            reject(response);
                        }
                        var att_wrap = $('body').find('.task_attachments_wrapper');
                        var attachments = att_wrap.find('.task-attachment-col');
                        var taskAttachmentsMore = $('body').find('#show-more-less-task-attachments-col .task-attachments-more');
                        if (attachments.length == 0) {
                            att_wrap.remove();
                        } else if (attachments.length == 2 && taskAttachmentsMore.hasClass('hide')) {
                            $('body').find('#show-more-less-task-attachments-col').remove();
                        } else if ($('.task-attachment-col:visible').length == 0 && !taskAttachmentsMore.hasClass('hide')) {
                            taskAttachmentsMore.click();
                        }
                    })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong !', 'error');
                    });
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);
    return false;

    /*var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'tasks/remove_task_attachment/' + id, function(response) {
            if (response.success == true) {
                $('[data-task-attachment-id="' + id + '"]').remove();
            }
            var att_wrap = $('body').find('.task_attachments_wrapper');
            var attachments = att_wrap.find('.task-attachment-col');
            var taskAttachmentsMore = $('body').find('#show-more-less-task-attachments-col .task-attachments-more');
            if (attachments.length == 0) {
                att_wrap.remove();
            } else if (attachments.length == 2 && taskAttachmentsMore.hasClass('hide')) {
                $('body').find('#show-more-less-task-attachments-col').remove();
            } else if ($('.task-attachment-col:visible').length == 0 && !taskAttachmentsMore.hasClass('hide')) {
                taskAttachmentsMore.click();
            }
        }, 'json');
    }*/
}

/**
 * Added By : Vaidehi
 * Dt: 02/21/2018
 * to remove attachment
 */
function remove_venue_attachment(link, id) {

    swal({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: 'Yes, delete it!',
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: admin_url + 'venues/remove_venue_attachment/' + id,
                    type: 'Get',
                })
                    .done(function (response) {
                        response = JSON.parse(response);
                        if (response.success == true) {
                            $('[data-task-attachment-id="' + id + '"]').remove();
                            swal('Attachment removed successfully.', response.message, response.status);
                            $('#vattch-' + id).remove();
                        } else {
                            reject(response);
                        }
                        var att_wrap = $('body').find('.task_attachments_wrapper');
                        var attachments = att_wrap.find('.task-attachment-col');
                        var taskAttachmentsMore = $('body').find('#show-more-less-task-attachments-col .task-attachments-more');
                        if (attachments.length == 0) {
                            att_wrap.remove();
                        } else if (attachments.length == 2 && taskAttachmentsMore.hasClass('hide')) {
                            $('body').find('#show-more-less-task-attachments-col').remove();
                        } else if ($('.task-attachment-col:visible').length == 0 && !taskAttachmentsMore.hasClass('hide')) {
                            taskAttachmentsMore.click();
                        }
                    })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong !', 'error');
                    });
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);
    return false;

    /*var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'tasks/remove_task_attachment/' + id, function(response) {
            if (response.success == true) {
                $('[data-task-attachment-id="' + id + '"]').remove();
            }
            var att_wrap = $('body').find('.task_attachments_wrapper');
            var attachments = att_wrap.find('.task-attachment-col');
            var taskAttachmentsMore = $('body').find('#show-more-less-task-attachments-col .task-attachments-more');
            if (attachments.length == 0) {
                att_wrap.remove();
            } else if (attachments.length == 2 && taskAttachmentsMore.hasClass('hide')) {
                $('body').find('#show-more-less-task-attachments-col').remove();
            } else if ($('.task-attachment-col:visible').length == 0 && !taskAttachmentsMore.hasClass('hide')) {
                taskAttachmentsMore.click();
            }
        }, 'json');
    }*/
}

function add_task_comment(task_id) {
    var data = {};
    data.content = $('#task_comment').val();//tinyMCE.activeEditor.getContent();
    if (data.content == "") {
        $("#comment-error").remove();
        $("#task_comment").after('<p id="comment-error" class="text-danger">Please enter comment.</p>');
        $("#task_comment").addClass("task-error");
        return false;
    } else {
        $('.tasks-comments button').attr('disabled', 'disabled');
        // $('.tasks-comments button').attr('value', 'Processing...');
        $('.tasks-comments button').text('Processing...');
        $("#comment-error").hide();
        $("#task_comment").removeClass("task-error");
        data.taskid = task_id;
        $.post(admin_url + 'tasks/add_task_comment', data).done(function () {
            $("#task_comment").val('');
            alert_float('success', "Comment added successfully.");
            window.location.reload();
        });
    }

}

// Deletes task comment from database
function remove_task_comment(commentid) {
    swal({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: 'Yes, delete it!',
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: admin_url + 'tasks/remove_comment/' + commentid,
                    type: 'Get',
                })
                    .done(function (response) {
                        response = JSON.parse(response);
                        if (response.success == true) {
                            $('[data-commentid="' + commentid + '"]').remove();
                            swal('Comment removed successfully.', response.message, response.status);
                        } else {
                            reject(response);
                        }
                    })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong !', 'error');
                    });
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);
    return false;

    /*var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'tasks/remove_comment/' + commentid, function(response) {
            if (response.success == true) {
                $('[data-commentid="' + commentid + '"]').remove();
                alert_float('success', "Comment removed successfully.");
            }
        }, 'json');
    }*/
}

// Remove task assignee
function remove_assignee(id, task_id) {
    swal({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: 'Yes, delete it!',
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: admin_url + 'tasks/remove_assignee/' + id + '/' + task_id,
                    type: 'Get',
                })
                    .done(function (response) {
                        response = JSON.parse(response);
                        if (response.success == true) {
                            swal('Deleted!', response.message, response.success);
                            window.location.reload();
                        } else {
                            reject(response);
                        }
                    })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong !', 'error');
                    });
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);
    return false;

    /*var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'tasks/remove_assignee/' + id + '/' + task_id, function(response) {
            if (response.success == true) {
                window.location.reload();
                alert_float('success', response.message);
            } else {
                window.location.reload();
                alert_float('warning', response.message);
            }
        }, 'json');
    }*/
}

// Remove task follower
function remove_follower(id, task_id) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'tasks/remove_follower/' + id + '/' + task_id, function (response) {
            if (response.success == true) {
                alert_float('success', response.message);
                init_task_modal(task_id);
            }
        }, 'json');
    }
}

// Marking task as complete
function mark_complete(task_id) {
    task_mark_as(5, task_id, admin_url + 'tasks/mark_complete/' + task_id);
}

// Unmarking task as complete
function unmark_complete(task_id) {
    task_mark_as(4, task_id, admin_url + 'tasks/unmark_complete/' + task_id);
}

function task_mark_as(status, task_id, url) {
    if (typeof (url) == 'undefined') {
        url = admin_url + 'tasks/mark_as/' + status + '/' + task_id;
    }
    $('body').append('<div class="dt-loader"></div>');
    var url1 = document.URL,
        shortUrl = url1.substring(0, url.indexOf("tasks"));

    $.get(url, function (response) {
        $('body').find('.dt-loader').remove();
        if (response.success == true) {
            $.post(shortUrl + "tasks/taskoverviewupdate", function (response1) {
                $(".task-overview").html(response1);
            });
            reload_tasks_tables();

            if ($('#task-modal').is(':visible')) {
                init_task_modal(task_id);
            }
            if (status == 5) {
                _maybe_remove_task_from_project_milestone(task_id);
            }

            if ($('.tasks-kanban').length == 0) {
                window.location.reload();
                alert_float('success', response.message);
            }
        }
    }, 'json');
}

function _maybe_remove_task_from_project_milestone(task_id) {
    var $milestonesTasksWrappers = $('.milestone-tasks-wrapper');
    if ($('body').hasClass('project') && $milestonesTasksWrappers.length > 0) {
        if ($('#exclude_completed_tasks').prop('checked') == true) {
            $milestonesTasksWrappers.find('[data-task-id="' + task_id + '"]').remove();
        }
    }
}

function reload_tasks_tables() {
    if ($.fn.DataTable.isDataTable('.table-tasks')) {
        $('.table-tasks').DataTable().ajax.reload(null, false);
    }
    if ($.fn.DataTable.isDataTable('.table-rel-tasks')) {
        $('.table-rel-tasks').DataTable().ajax.reload(null, false);
    }
    if ($.fn.DataTable.isDataTable('.table-rel-tasks-leads')) {
        $('.table-rel-tasks-leads').DataTable().ajax.reload(null, false);
    }
    if ($.fn.DataTable.isDataTable('.table-timesheets')) {
        $('.table-timesheets').DataTable().ajax.reload(null, false);
    }
}

function make_task_public(task_id) {
    $.get(admin_url + 'tasks/make_public/' + task_id, function (response) {
        if (response.success == true) {
            reload_tasks_tables();
            init_task_modal(task_id);
        }
    }, 'json');
}

function new_task(url) {
    var _url = admin_url + 'tasks/task';
    if (typeof (url) != 'undefined') {
        _url = url;
    }
    var $leadModal = $('#lead-modal');
    if ($leadModal.is(':visible')) {
        _url += '&opened_from_lead_id=' + $leadModal.find('input[name="leadid"]').val();
        if (_url.indexOf('?') === -1) {
            _url = _url.replace('&', '?');
        }
        $leadModal.modal('hide');
    }

    var $taskSingleModal = $('#task-modal');

    if ($taskSingleModal.is(':visible')) {
        $taskSingleModal.modal('hide');
    }

    var $taskEditModal = $('#_task_modal');
    if ($taskEditModal.is(':visible')) {
        $taskEditModal.modal('hide');
    }

    $.get(_url, function (response) {
        $('#_task').html(response);
        $('body').find('#_task_modal').modal({
            show: true,
            backdrop: 'static'
        });
    });
}

function showHideTagsPlaceholder($tagit) {
    var $input = $tagit.data("ui-tagit").tagInput,
        placeholderText = $tagit.data("ui-tagit").options.placeholderText;

    if ($tagit.tagit("assignedTags").length > 0) {
        $input.removeAttr('placeholder');
    } else {
        $input.attr('placeholder', placeholderText);
    }
}

function new_task_from_relation(table, rel_type, rel_id) {
    if (typeof (rel_type) == 'undefined' && typeof (rel_id) == 'undefined') {
        rel_id = $(table).data('new-rel-id');
        rel_type = $(table).data('new-rel-type');
    }
    var url = admin_url + 'tasks/task?rel_id=' + rel_id + '&rel_type=' + rel_type;
    new_task(url);
}

// Go to edit view
function edit_task(task_id) {
    $.get(admin_url + 'tasks/task/' + task_id, function (response) {
        $('#_task').html(response)
        $('#task-modal').modal('hide');
        $('body').find('#_task_modal').modal({
            show: true,
            backdrop: 'static'
        });
    });
}

function task_form_handler(form) {
    tinymce.triggerSave();

    var formURL = form.action;
    var formData = new FormData($(form)[0]);

    $.ajax({
        type: $(form).attr('method'),
        data: formData,
        mimeType: $(form).attr('enctype'),
        contentType: false,
        cache: false,
        processData: false,
        url: formURL
    }).done(function (response) {
        response = JSON.parse(response);
        if (response.success == true) {
            alert_float('success', response.message);
        }
        if (!$('body').hasClass('project')) {
            $('#_task_modal').attr('data-task-created', true);
            $('#_task_modal').modal('hide');
            //init_task_modal(response.id);
            //reload_tasks_tables();
            alert_float('success', "Task updated successfully.");
            window.location.reload();
        } else {
            // reload page on project area
            var location = window.location.href;
            var params = [];
            location = location.split('?');
            var group = get_url_param('group');
            var excludeCompletedTasks = get_url_param('exclude_completed');
            if (group) {
                params['group'] = group;
            }
            if (excludeCompletedTasks) {
                params['exclude_completed'] = excludeCompletedTasks;
            }
            params['taskid'] = response.id;
            window.location.href = buildUrl(location[0], params)
        }
    }).fail(function (error) {
        alert_float('danger', JSON.parse(error.responseText));
    });

    return false;
}

function timer_action(e, task_id, timer_id) {

    $(e).addClass('disabled');

    if (typeof (timer_id) == 'undefined') {
        timer_id = '';
    }

    var data = {};
    data.task_id = task_id;
    data.timer_id = timer_id;
    data.note = $('body').find('#timesheet_note').val();
    if (!data.note) {
        data.note = '';
    }
    $.post(admin_url + 'tasks/timer_tracking', data).done(function (response) {
        response = JSON.parse(response);
        if ($('#task-modal').is(':visible')) {
            init_task_modal(task_id);
        }
        init_timers();
        $('.popover-top-timer-note').popover('hide')
        reload_tasks_tables();
    });
}

function init_task_modal(task_id) {

    var data = {
        taskid: task_id
    };

    var $leadModal = $('#lead-modal');
    var $taskAddEditModal = $('#_task_modal');
    if ($leadModal.is(':visible')) {
        data.opened_from_lead_id = $leadModal.find('input[name="leadid"]').val();
        $leadModal.modal('hide');
    } else if ($taskAddEditModal.attr('data-lead-id') != undefined) {
        data.opened_from_lead_id = $taskAddEditModal.attr('data-lead-id');
    }
    $.post(admin_url + 'tasks/get_task_data/', data).done(function (response) {
        $('#task-modal .data').html(response);
        //init_tasks_checklist_items(false, task_id);
        recalculate_checklist_items_progress();
        setTimeout(function () {
            $('#task-modal').modal('show');
            // Init_tags_input is trigged too when task modal is shown
            // This line prevents triggering twice.
            if ($('#task-modal').is(':visible')) {
                init_tags_inputs();
            }
            fix_task_modal_left_col_height();
        }, 150);
    }).fail(function (data) {
        $('#task-modal').modal('hide');
        alert_float('danger', data.responseText);
    });
}

function task_tracking_stats(id) {
    $.get(admin_url + 'tasks/task_tracking_stats/' + id, function (response) {
        $('<div/>', {
            id: 'tracking-stats',
        }).appendTo('body').html(response);
        $('#task-tracking-stats-modal').modal('toggle');
    });
}

function init_timers() {
    $.get(admin_url + 'tasks/get_staff_started_timers', function (response) {
        if (response.timers_found) {
            $('.top-timers').addClass('text-success');
        } else {
            $('.top-timers').removeClass('text-success');
        }
        $('.started-timers-top').html(response.html);
    }, 'json');
}

function edit_task_comment(id) {
    var edit_wrapper = $('[data-edit-comment="' + id + '"]');
    edit_wrapper.next().addClass('hide');
    edit_wrapper.removeClass('hide');
    //tinymce.remove('#task_comment_' + id);
    // init_editor('#task_comment_' + id, {
    //     height: 150,
    //     auto_focus: true,
    // });
    //tinymce.triggerSave();
}

function cancel_edit_comment(id) {
    var edit_wrapper = $('[data-edit-comment="' + id + '"]');
    tinymce.remove('[data-edit-comment="' + id + '"] textarea');
    edit_wrapper.addClass('hide');
    edit_wrapper.next().removeClass('hide');
}

function save_edited_comment(id, task_id) {
    tinymce.triggerSave();
    var data = {};
    data.id = id;
    data.content = $('[data-edit-comment="' + id + '"]').find('textarea').val();
    if (data.content == "") {
        $("#comment-error").remove();
        $(".edit-task-comment textarea").after('<p id="comment-error" class="text-danger">Please enter comment.</p>');
        $(".edit-task-comment textarea").addClass("task-error");
        return false;
    } else {
        $.post(admin_url + 'tasks/edit_comment', data).done(function (response) {
            $(".edit-task-comment textarea").removeClass("task-error");
            $("#comment-error").remove();
            response = JSON.parse(response);
            if (response.success == true) {
                alert_float('success', response.message);
                window.location.reload();
            } else {
                cancel_edit_comment(id);
            }
            tinymce.remove('[data-edit-comment="' + id + '"] textarea');
        });
    }
}

function fix_task_modal_left_col_height() {
    if (!is_mobile()) {
        var left_col = $('body').find('.task-single-col-left');
        var right_col = $('body').find('.task-single-col-right');
        left_col.css('min-height', right_col.outerHeight(true) + 'px');
    }
}

function tasks_kanban_update(ui, object) {
    if (object === ui.item.parent()[0]) {
        var status = $(ui.item.parent()[0]).data('task-status-id');
        var tasks = $(ui.item.parent()[0]).find('[data-task-id]');

        var data = {};
        data.order = [];
        var i = 0;
        $.each(tasks, function () {
            data.order.push([$(this).data('task-id'), i]);
            i++;
        });

        task_mark_as(status, $(ui.item).data('task-id'));
        check_kanban_empty_col('[data-task-id]');
        setTimeout(function () {
            $.post(admin_url + 'tasks/update_order', data);
        }, 200);
    }
}

function tasks_kanban() {
    init_kanban('tasks', tasks_kanban_update, '.tasks-status', 280, 360);
}

function edit_task_inline_description(e, id) {

    tinyMCE.remove('#task_view_description');

    if ($(e).hasClass('editor-initiated')) {
        $(e).removeClass('editor-initiated');
        return;
    }

    $(e).addClass('editor-initiated');
    $.Shortcuts.stop();
    tinymce.init({
        selector: '#task_view_description',
        theme: 'inlite',
        skin: 'perfex',
        auto_focus: "task_view_description",
        plugins: 'table link paste contextmenu textpattern',
        insert_toolbar: 'quicktable',
        selection_toolbar: 'bold italic | quicklink h2 h3 blockquote',
        inline: true,
        table_default_styles: {
            width: '100%'
        },
        setup: function (editor) {
            editor.on('blur', function (e) {
                if (editor.isDirty()) {
                    $.post(admin_url + 'tasks/update_task_description/' + id, {
                        description: editor.getContent()
                    });
                }
                setTimeout(function () {
                    editor.remove();
                    $.Shortcuts.start();
                }, 500);
            });
        }
    });
}

function tasks_bulk_action(event) {
    // var r = confirm(appLang.confirm_action_prompt);
    // if (r == false) {
    //     return false;
    // } else {
    var mass_delete = $('#mass_delete').prop('checked');
    var ids = [];
    var data = {};
    if (mass_delete == false || typeof (mass_delete) == 'undefined') {
        data.status = $('#move_to_status_tasks_bulk_action').val();
        data.priority = $('#task_bulk_priority').val();
        data.assignees = $('#task_bulk_assignees').selectpicker('val');

        var milestone = $('#task_bulk_milestone');
        data.milestone = '';
        if (milestone.length) {
            data.milestone = milestone.selectpicker('val');
        }

        // var tags_bulk = $('#tags_bulk');
        // if (tags_bulk.length > 0) {
        //     data.tags = tags_bulk.tagit('assignedTags');
        // }
        if (typeof (data.priority) == 'undefined') {
            data.priority = '';
        }
        // if (typeof(data.tags) == 'undefined') {
        //     data.tags = '';
        // }

        if (data.status == '' && data.priority == '' && !data.assignees.length && !data.milestone.length) {
            return;
        }
    } else {
        data.mass_delete = true;
    }
    var rows = $($('#tasks_bulk_actions').attr('data-table')).find('tbody tr');
    $.each(rows, function () {
        var checkbox = $($(this).find('td').eq(0)).find('input');
        if (checkbox.prop('checked') == true) {
            ids.push(checkbox.val());
        }
    });
    data.ids = ids;
    if (ids.length) {
        $(event).addClass('disabled');
        setTimeout(function () {
            $.post(admin_url + 'tasks/bulk_action', data).done(function () {
                alert_float('success', "Tasks updated successfully.");
                window.location.reload();
            });
        }, 200);
    } else {
        $('#tasks_bulk_actions').modal('hide');
        alert_float('error', "Please select atleast 1 task!.");
        return false;
    }

    //}
}

// Init single invoice
function init_invoice(id) {
    var _invoiceid = $('input[name="invoiceid"]').val();
    // Check if invoice passed from url, hash is prioritized becuase is last
    if (_invoiceid != '' && !window.location.hash) {
        id = _invoiceid;
        // Clear the current invoice value in case user click on the left sidebar invoices
        $('input[name="invoiceid"]').val('');
    } else {
        // check first if hash exists and not id is passed, becuase id is prioritized
        if (window.location.hash && !id) {
            id = window.location.hash.substring(1); //Puts hash in variable, and removes the # character
        }
    }
    if (typeof (id) == 'undefined' || id == '') {
        return;
    }
    if (!$('body').hasClass('small-table')) {
        toggle_small_view('.table-invoices', '#invoice');
    }
    $('input[name="invoiceid"]').val(id);
    var qs = getQueryStrings();
    var myLidParam = qs["lid"];
    var myPidParam = qs["pid"];
    var myEidParam = qs["eid"];

    do_hash_helper(id);
    $('body').append('<div class="dt-loader"></div>');
    //return false;
    if (typeof (myLidParam) != 'undefined') {
        $('#invoice').load(admin_url + 'invoices/get_invoice_data_ajax/' + id + '/' + myLidParam, function (response, status, xhr) {
            if (status == "success") {
                $('body').find('.dt-loader').remove();
            }
        });
    } else if (typeof (myPidParam) != 'undefined') {
        $('#invoice').load(admin_url + 'invoices/get_invoice_data_ajax/' + id + '/0/' + myPidParam, function (response, status, xhr) {
            if (status == "success") {
                $('body').find('.dt-loader').remove();
            }
        });
    } else if (typeof (myEidParam) != 'undefined') {
        $('#invoice').load(admin_url + 'invoices/get_invoice_data_ajax/' + id + '/0/0/' + myEidParam, function (response, status, xhr) {
            if (status == "success") {
                $('body').find('.dt-loader').remove();
            }
        });
    } else {
        $('#invoice').load(admin_url + 'invoices/get_invoice_data_ajax/' + id, function (response, status, xhr) {
            if (status == "success") {
                $('body').find('.dt-loader').remove();
            }
        });
    }

    if (is_mobile()) {
        $('html, body').animate({
            scrollTop: $('#invoice').offset().top + 150
        }, 600);
    }

}

// Init single Estimate
function init_estimate(id) {
    var _estimateid = $('input[name="estimateid"]').val();

    // Check if estimate passed from url, hash is prioritized becuase is last
    if (_estimateid != '' && !window.location.hash) {
        id = _estimateid;
        // Clear the current estimate value in case user click on the left sidebar invoices
        $('input[name="estimateid"]').val('');
    } else {
        // check first if hash exists and not id is passed, becuase id is prioritized
        if (window.location.hash && !id) {
            id = window.location.hash.substring(1); //Puts hash in variable, and removes the # character
        }
    }
    if (typeof (id) == 'undefined' || id == '') {
        return;
    }

    if (!$('body').hasClass('small-table')) {
        toggle_small_view('.table-estimates', '#estimate');
    }
    $('input[name="estimateid"]').val(id);
    do_hash_helper(id);
    $('#estimate').load(admin_url + 'estimates/get_estimate_data_ajax/' + id);

    if (is_mobile()) {
        $('html, body').animate({
            scrollTop: $('#estimate').offset().top + 150
        }, 600);
    }
}

// Init single Estimate
function init_proposal(id) {
    var _proposal_id = $('input[name="proposal_id"]').val();
    // Check if proposal passed from url, hash is prioritized becuase is last
    if (_proposal_id != '' && !window.location.hash) {
        id = _proposal_id;
        // Clear the current proposal value in case user click on the left sidebar invoices
        $('input[name="proposal_id"]').val('');
    } else {
        // check first if hash exists and not id is passed, becuase id is prioritized
        if (window.location.hash && !id) {
            id = window.location.hash.substring(1); //Puts hash in variable, and removes the # character
        }
    }
    if (typeof (id) == 'undefined' || id == '') {
        return;
    }
    if (!$('body').hasClass('small-table')) {
        toggle_small_view('.table-proposals', '#proposal');
    }
    $('input[name="proposal_id"]').val(id);
    do_hash_helper(id);
    $('#proposal').load(admin_url + 'proposals/get_proposal_data_ajax/' + id);

    if (is_mobile()) {
        $('html, body').animate({
            scrollTop: $('#proposal').offset().top + 150
        }, 600);
    }
}

function clear_billing_and_shipping_details() {
    for (var f in bs_fields) {
        if (bs_fields[f].indexOf('country') > -1) {
            $('select[name="' + bs_fields[f] + '"]').selectpicker('val', '');
        } else {
            $('input[name="' + bs_fields[f] + '"]').val('');
        }
        if (bs_fields[f] == 'billing_country') {
            $('input[name="include_shipping"]').prop("checked", false);
            $('input[name="include_shipping"]').change();
        }
    }

    init_billing_and_shipping_details();
}

function init_billing_and_shipping_details() {
    var _f;
    var include_shipping = $('input[name="include_shipping"]').prop('checked');
    for (var f in bs_fields) {
        _f = '';
        if (bs_fields[f].indexOf('country') > -1) {
            _f = $("#" + bs_fields[f] + " option:selected").data('subtext');
        } else {
            _f = $('input[name="' + bs_fields[f] + '"]').val();
        }
        if (bs_fields[f].indexOf('shipping') > -1) {
            if (!include_shipping) {
                _f = '';
            }
        }
        if (typeof (_f) == 'undefined') {
            _f = '';
        }
        _f = (_f != '' ? _f : '--');
        $('.' + bs_fields[f]).text(_f);
    }
    $('#billing_and_shipping_details').modal('hide');
}

// Record payment function
function record_payment(id, lid = "", type = "") {
    if (typeof (id) == 'undefined' || id == '') {
        return;
    }
    $('#invoice').load(admin_url + 'invoices/record_invoice_payment_ajax/' + id + '/' + lid + '/' + type);
}

// Add item to preview
function add_item_to_preview(itemid) {
    $.get(admin_url + 'invoice_items/get_item_by_id/' + itemid, function (response) {
        // order input
        $('.main input[name="item_id"]').val(response.itemid);
        $('.main input[name="description"]').val(response.description);
        $('.main textarea[name="long_description"]').val(response.long_description.replace(/(<|&lt;)br\s*\/*(>|&gt;)/g, " "));
        $('.main img[name="profile-image"]').attr("src", response.profile_image);

        $('.main input[name="quantity"]').val(1);

        var taxSelectedArray = [];
        if (response.taxname && response.taxrate) {
            taxSelectedArray.push(response.taxname + '|' + response.taxrate);
        }
        if (response.taxname_2 && response.taxrate_2) {
            taxSelectedArray.push(response.taxname_2 + '|' + response.taxrate_2);
        }

        $('.main select.tax').selectpicker('val', taxSelectedArray);
        $('.main input[name="unit"]').val('');

        var $currency = $('body').find('.accounting-template select[name="currency"]');
        var baseCurency = $currency.attr('data-base');
        var selectedCurrency = $currency.find('option:selected').val();
        var $rateInputPreview = $('.main input[name="rate"]');

        if (baseCurency == selectedCurrency) {
            $rateInputPreview.val(response.rate);
        } else {
            var itemCurrencyRate = response['rate_currency_' + selectedCurrency];
            if (!itemCurrencyRate || parseFloat(itemCurrencyRate) === 0) {
                $rateInputPreview.val(response.rate);
            } else {
                $rateInputPreview.val(itemCurrencyRate);
            }
        }
        $(document).trigger({
            type: "item-added-to-preview",
            item: response,
            item_type: 'item',
        });

        setTimeout($('#btnAddItem').click(), 1000);

    }, 'json');
}

/**
 * Added By : Vaidehi
 * Dt : 12/01/2017
 * Add all items of group to preview
 */
function add_item_group_to_preview(itemid) {
    $.get(admin_url + 'invoice_items/get_item_group_by_id/' + itemid, function (response) {
        var arrLen = parseInt(response.length) - 1;
        $.each(response, function (i, obj) {
            if (i == arrLen) {
                add_item_to_preview(obj.itemid);
            } else {
                add_item_to_table(obj, itemid);
            }
        });

        $(document).trigger({
            type: "item-added-to-preview",
            item: response,
            item_type: 'item',
        });
    }, 'json');
}

// Add task to preview
function add_task_to_preview_as_item(task_id) {
    $.get(admin_url + 'tasks/get_billable_task_data/' + task_id, function (response) {
        response.taxname = $('select.main-tax').selectpicker('val');
        $('.main textarea[name="description"]').val(response.name);
        $('.main textarea[name="long_description"]').val(response.description);
        $('.main input[name="quantity"]').val(response.total_hours);
        $('.main input[name="rate"]').val(response.hourly_rate);
        $('.main input[name="unit"]').val('');
        $('input[name="task_id"]').val(task_id);

        $(document).trigger({
            type: "item-added-to-preview",
            item: response,
            item_type: 'task',
        });

    }, 'json');
}

// Clear the items added to preview
function clear_main_values(default_taxes) {
    // Get the last taxes applied to be available for the next item
    var last_taxes_applied = $('table.items tbody').find('tr:last-child').find('select').selectpicker('val');
    //$('.main .item-img').html('');
    $('.main input[name="description"]').val('');
    $('.main textarea[name="long_description"]').val('');
    $('.main input[name="quantity"]').val(1);
    $('.main select.tax').selectpicker('val', '');
    $('.main input[name="rate"]').val('');
    $('.main input[name="unit"]').val('');
    $('input[name="task_id"]').val('');
    $('input[name="expense_id"]').val('');
}

// Append the added items to the preview to the table as items
function add_item_to_table(data, itemid, merge_invoice, bill_expense) {
    // If not custom data passed get from the preview
    if (typeof (data) == 'undefined' || data == 'undefined') {
        data = get_main_values();
    }

    if (data.description === "" && data.long_description === "" && data.rate === "") {
        return;
    }

    var table_row = '';
    var unit_placeholder = '';
    var item_key = $('body').find('tbody .item').length + 1;
    table_row += '<tr class="sortable item" data-merge-invoice="' + merge_invoice + '" data-bill-expense="' + bill_expense + '">';
    // table_row += '<td>';
    // Check if quantity is number
    if (isNaN(data.qty)) {
        data.qty = 1;
    }
    // Check if rate is number
    if (data.rate == '' || isNaN(data.rate)) {
        data.rate = 0;
    }

    var amount = data.rate * data.qty;
    //amount = accounting.formatNumber(amount);
    var tax_name = 'newitems[' + item_key + '][taxname][]';
    $('body').append('<div class="dt-loader"></div>');
    var regex = /<br[^>]*>/gi;
    //console.log(data);
    get_taxes_dropdown_template(tax_name, data).done(function (tax_dropdown) {
        // order input

        if (data.profile_image == "" || data.profile_image == null) {
            var profileImagePath = site_url + 'assets/images/no-package.png';
        } else {
            if (data.profile_image.indexOf("small_") >= 0) {
                var profileImagePath = site_url + 'uploads/line_item_images/' + data.itemid + '/' + data.profile_image;
            } else if (data.profile_image.indexOf("no-package.png") >= 0) {
                var profileImagePath = site_url + 'assets/images/no-package.png';
            } else {
                var profileImagePath = site_url + 'uploads/line_item_images/' + data.itemid + '/small_' + data.profile_image;
            }
        }
        table_row += '<td><img src="' + profileImagePath + '" class="item-profile-image-small" alt="' + data.description + '">';
        table_row += '</td>';
        table_row += '<td class="bold description"><input type="text" name="newitems[' + item_key + '][description]" class="form-control" value="' + data.description + '"></td>';
        //table_row += '<td><textarea name="newitems[' + item_key + '][long_description]" class="form-control item_long_description" rows="5">' + data.long_description.replace(regex, "\n") + '</textarea></td>';
        table_row += '<td><input type="number" min="0" onblur="calculate_total();" onchange="calculate_total();" data-quantity name="newitems[' + item_key + '][qty]" value="' + data.qty + '" class="form-control">';

        unit_placeholder = '';
        if (!data.unit || typeof (data.unit) == 'undefined') {
            //unit_placeholder = appLang.unit;
            data.unit = '';
        }

        //table_row += '<input type="text" placeholder="' + unit_placeholder + '" name="newitems[' + item_key + '][unit]" class="form-control input-transparent text-right" value="' + data.unit + '">';

        table_row += '</td>';
        table_row += '<td class="rate"><div class="input-group"><span class="input-group-addon othrdisc_prefix" id="basic-addon2">$</span><input type="number" onblur="calculate_total();" onchange="calculate_total();" name="newitems[' + item_key + '][rate]" value="' + data.rate + '" class="form-control"></div></td>';
        table_row += '<td class="taxrate">' + tax_dropdown + '</td>';
        table_row += '<td class="amount">' + amount + '</td>';

        // if(itemid == 'group') {
        //     table_row += '<td></td>';
        // } else {
        table_row += '<td><a href="#" class="btn btn-danger pull-right" onclick="delete_item(this,' + itemid + '); return false;"><i class="fa fa-times"></i></a></td>';
        //}

        table_row += '</tr>';

        $('table.items tbody').append(table_row);

        $(document).trigger({
            type: "item-added-to-table",
            data: data,
            row: table_row
        });

        setTimeout(function () {
            calculate_total();
        }, 15);

        var billed_task = $('input[name="task_id"]').val();
        var billed_expense = $('input[name="expense_id"]').val();
        if (billed_task != '' && typeof (billed_task) != 'undefined') {
            billed_tasks = billed_task.split(',');
            $.each(billed_tasks, function (i, obj) {
                $('#billed-tasks').append(hidden_input('billed_tasks[' + item_key + '][]', obj));
            });
        }

        if (billed_expense != '' && typeof (billed_expense) != 'undefined') {
            billed_expenses = billed_expense.split(',');
            $.each(billed_expenses, function (i, obj) {
                $('#billed-expenses').append(hidden_input('billed_expenses[' + item_key + '][]', obj));
            });
        }

        init_selectpicker();
        clear_main_values();
        reorder_items();

        $('body').find('.dt-loader').remove();
        $('#item_select').selectpicker('val', '');
        return true;
    });
    return false;
}

// Get taxes dropdown selectpicker template / Causing problems with ajax becuase is fetching from server
function get_taxes_dropdown_template(name, taxname) {
    jQuery.ajaxSetup({
        async: false
    });

    var get_tax = taxname.taxname;
    var final_data = [];
    $(get_tax).each(function (index, val) {
        var data = {};
        data.description = taxname.description;
        data.long_description = taxname.long_description;
        data.qty = taxname.qty;
        data.taxname = val;
        data.rate = taxname.rate;
        data.name = val;
        data.profile_image = taxname.profile_image;
        final_data.push(data);
    });
    //console.log(final_data);
    //return false;
    var d = $.post(admin_url + 'misc/get_taxes_dropdown_template/', {
        name: name,
        taxname: final_data
    });

    jQuery.ajaxSetup({
        async: true
    });

    return d;
}

/**
 * Custom function for deselecting selected value from ajax dropdown
 */
function deselect_ajax_search(e) {

    var $elm = $('select#' + $(e).attr('data-id'));
    $elm.data('AjaxBootstrapSelect').list.cache = {}
    var $elmWrapper = $elm.parents('.bootstrap-select');
    $elm.html('').append('<option value=""></option>').selectpicker('val', '')
    $elmWrapper.removeClass('ajax-remove-values-option').find('.ajax-clear-values').remove();
    setTimeout(function () {
        $elm.trigger('selected.cleared.ajax.bootstrap.select', e);
        $elm.trigger('change').data('AjaxBootstrapSelect').list.cache = {}
    }, 50);
}

function init_ajax_project_search_by_customer_id(selector) {

    if (typeof (selector) == 'undefined') {
        selector = '#project_id.ajax-search';
    }

    init_ajax_search('project', selector, {
        customer_id: function () {
            return $('select[name="clientid"]').val();
        }
    });

}

function init_ajax_projects_search(selector) {
    if (typeof (selector) == 'undefined') {
        selector = '#project_id.ajax-search';
    }

    init_ajax_search('project', selector);
}


// Fix for reordering the items the tables to show the full width
function fixHelperTableHelperSortable(e, ui) {
    ui.children().each(function () {
        $(this).width($(this).width());
    });
    return ui;
}

function init_items_sortable(preview_table) {
    var _items_sortable = $("body").find('.items tbody');
    if (_items_sortable.length == 0) {
        return;
    }
    _items_sortable.sortable({
        helper: fixHelperTableHelperSortable,
        handle: '.dragger',
        placeholder: 'ui-placeholder',
        itemPath: '> tbody',
        itemSelector: 'tr.sortable',
        items: "tr.sortable",
        update: function () {
            if (typeof (preview_table) == 'undefined') {
                reorder_items();
            } else {
                // If passed from the admin preview there is other function for re-ordering
                save_ei_items_order();
            }
        },
        sort: function (event, ui) {
            // Firefox fixer when dragging
            var $target = $(event.target);
            if (!/html|body/i.test($target.offsetParent()[0].tagName)) {
                var top = event.pageY - $target.offsetParent().offset().top - (ui.helper.outerHeight(true) / 2);
                ui.helper.css({
                    'top': top + 'px'
                });
            }
        }
    });
}

// Save the items from order from the admin preview
function save_ei_items_order() {
    var rows = $('.table.invoice-items-preview.items tbody tr,.table.estimate-items-preview.items tbody tr');
    var i = 1;
    var order = [];
    var _order_id, type;
    var item_id;
    if ($('.table.items').hasClass('invoice-items-preview')) {
        type = 'invoice';
    } else if ($('.table.items').hasClass('estimate-items-preview')) {
        type = 'estimate';
    } else {
        return false;
    }
    $.each(rows, function () {
        order.push([$(this).data('item-id'), i]);
        // update item number when reordering
        $(this).find('td.item_no').html(i);
        i++;
    });
    setTimeout(function () {
        $.post(admin_url + 'misc/update_ei_items_order/' + type, {
            data: order
        });
    }, 200);
}

// Reoder the items in table edit for estimate and invoices
function reorder_items() {
    var rows = $('.table.table-main-invoice-edit tbody tr.item,.table.table-main-estimate-edit tbody tr.item');
    var i = 1;
    $.each(rows, function () {
        $(this).find('input.order').val(i);
        i++;
    });
}

// Get the preview main values
function get_main_values() {
    var response = {};
    response.description = $('.main input[name="description"]').val();
    //response.long_description = $('.main textarea[name="long_description"]').val();
    response.qty = $('.main input[name="quantity"]').val();
    response.taxname = $('.main select.tax').selectpicker('val');
    response.rate = $('.main input[name="rate"]').val();
    response.itemid = $('.main input[name="item_id"]').val();
    var invoiceimg = $('.main img').attr('src');
    if (invoiceimg != undefined) {
        response.profile_image = invoiceimg.substr(invoiceimg.lastIndexOf('/') + 1);
    }
    response.unit = '';//$('.main input[name="unit"]').val();
    return response;
}

// Calculate invoice total - NOT RECOMENDING EDIT THIS FUNCTION BECUASE IS VERY SENSITIVE
function calculate_total() {

    var calculated_tax,
        taxrate,
        item_taxes,
        row,
        _amount,
        _tax_name,
        taxes = {},
        taxes_rows = [],
        subtotal = 0,
        total = 0,
        quantity = 1;
    total_discount_calculated = 0,
        rows = $('.table.table-main-invoice-edit tbody tr.item,.table.table-main-estimate-edit tbody tr.item'),
        adjustment = $('input[name="adjustment"]').val(),
        discount_area = $('tr#discount_percent'),
        discount_percent = $('input[name="discount_percent"]').val();
    discount_type = $('select[name="discount_type"]').val();

    $('.tax-area').remove();

    $.each(rows, function () {
        quantity = $(this).find('[data-quantity]').val();
        if (quantity == '') {
            quantity = 1;
            $(this).find('[data-quantity]').val(1);
        }

        _amount = parseFloat($(this).find('td.rate input').val()) * quantity;
        amoutfortax = _amount;
        $(this).find('td.amount').html(accounting.formatNumber(_amount));
        subtotal += _amount;
        row = $(this);
        item_taxes = $(this).find('select.tax').selectpicker('val');

        if (item_taxes) {
            $.each(item_taxes, function (i, taxname) {
                taxrate = row.find('select.tax [value="' + taxname + '"]').data('taxrate');
                calculated_tax = (amoutfortax / 100 * taxrate);
                if (!taxes.hasOwnProperty(taxname)) {
                    if (taxrate != 0) {
                        _tax_name = taxname.split('|');
                        tax_row = '<tr class="tax-area"><td>' + _tax_name[0] + ' (' + taxrate + '%)</td><td id="tax_id_' + slugify(taxname) + '"></td></tr>';
                        $(discount_area).after(tax_row);
                        taxes[taxname] = calculated_tax;
                    }
                } else {
                    // Increment total from this tax
                    taxes[taxname] = taxes[taxname] += calculated_tax;
                }
                _amount += calculated_tax;
            });
        }
        $(this).find('td.amount').html(accounting.formatMoney(_amount));
    });


    if (discount_percent != '' && discount_type == 'before_tax') {
        // Calculate the discount total
        total_discount_calculated = (subtotal * discount_percent) / 100;
    }

    $.each(taxes, function (taxname, total_tax) {
        if (discount_percent != '' && discount_type == 'before_tax') {
            total_tax_calculated = (total_tax * discount_percent) / 100;
            total_tax = (total_tax - total_tax_calculated);
        }
        total += total_tax;
        total_tax = accounting.formatNumber(total_tax)
        $('#tax_id_' + slugify(taxname)).html(total_tax);
    });

    total = (total + subtotal);

    if (discount_percent != '' && discount_type == 'after_tax') {
        // Calculate the discount total
        total_discount_calculated = (total * discount_percent) / 100;
    }

    total = total - total_discount_calculated;
    adjustment = parseFloat(adjustment);

    // Check if adjustment not empty
    if (!isNaN(adjustment)) {
        total = total + adjustment;
    }


    // Append, format to html and display
    $('.discount_percent').html('-' + accounting.formatNumber(total_discount_calculated) + hidden_input('discount_percent', discount_percent) + hidden_input('discount_total', total_discount_calculated));
    $('.adjustment').html(accounting.formatNumber(adjustment) + hidden_input('adjustment', accounting.toFixed(adjustment, app_decimal_places)))
    $('.subtotal').html(accounting.formatMoney(subtotal) + hidden_input('subtotal', accounting.toFixed(subtotal, app_decimal_places)));

    //Added by Vaidehi on 03/29/2018 for transaction charge
    // transactioncharge = (subtotal * 3) / 100;
    // $('.transaction').html(accounting.formatNumber(transactioncharge) + hidden_input('transaction_charge', accounting.toFixed(transactioncharge, app_decimal_places)));
    // total = total + transactioncharge;

    $('.total').html(format_money(total) + hidden_input('total', accounting.toFixed(total, app_decimal_places)));
    $(document).trigger('sales-total-calculated');
}

// Deletes invoice items
function delete_item(row, itemid) {
    $(row).parents('tr').addClass('animated fadeOut', function () {
        setTimeout(function () {
            $(row).parents('tr').remove();
            calculate_total();
        }, 50)
    });
    // If is edit we need to add to input removed_items to track activity
    if ($('input[name="isedit"]').length > 0) {
        $('#removed-items').append(hidden_input('removed_items[]', itemid));
    }
}

// Format money functions
function format_money(total) {
    if (app_currency_placement === 'after') {
        return accounting.formatMoney(total, {
            format: "%v %s"
        });
    } else {
        return accounting.formatMoney(total);
    }
}

// Set the currency symbol for accounting
function init_currency_symbol() {
    accounting.settings.currency.symbol = "$";
}

function delete_invoice_attachment(id) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'invoices/delete_attachment/' + id, function (success) {
            if (success == 1) {
                $('body').find('[data-attachment-id="' + id + '"]').remove();
                init_invoice($('body').find('input[name="_attachment_sale_id"]').val());
            }
        }).fail(function (error) {
            alert_float('danger', error.responseText);
        });
    }
}

function delete_estimate_attachment(id) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'estimates/delete_attachment/' + id, function (success) {
            if (success == 1) {
                $('body').find('[data-attachment-id="' + id + '"]').remove();
                var rel_id = $('body').find('input[name="_attachment_sale_id"]').val();
                if ($('body').hasClass('estimates-pipeline')) {
                    estimate_pipeline_open(rel_id)
                } else {
                    init_estimate(rel_id);
                }
            }
        }).fail(function (error) {
            alert_float('danger', error.responseText);
        });
    }
}

function delete_proposal_attachment(id) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'proposals/delete_attachment/' + id, function (success) {
            if (success == 1) {
                var rel_id = $('body').find('input[name="_attachment_sale_id"]').val();
                $('body').find('[data-attachment-id="' + id + '"]').remove();

                if ($('body').hasClass('proposals-pipeline')) {
                    proposal_pipeline_open(rel_id)
                } else {
                    init_proposal(rel_id);
                }
            }
        }).fail(function (error) {
            alert_float('danger', error.responseText);
        });
    }
}

function init_invoices_total(manual) {

    if ($('#invoices_total').length == 0) {
        return;
    }
    var _inv_total_inline = $('.invoices-total-inline');
    var _inv_total_href_manual = $('.invoices-total');

    if ($('body').hasClass('invoices_total_manual') && typeof (manual) == 'undefined' &&
        !_inv_total_href_manual.hasClass('initialized')) {
        return;
    }

    if (_inv_total_inline.length > 0 && _inv_total_href_manual.hasClass('initialized')) {
        // On the next request won't be inline in case of currency change
        // Used on dashboard
        _inv_total_inline.removeClass('invoices-total-inline');
        return;
    }

    _inv_total_href_manual.addClass('initialized');
    var _years = $('body').find('select[name="invoices_total_years"]').selectpicker('val');
    var years = [];
    $.each(_years, function (i, _y) {
        if (_y != '') {
            years.push(_y);
        }
    });

    var currency = $('body').find('select[name="total_currency"]').val();
    var data = {
        currency: currency,
        years: years,
        init_total: true,
    };

    var project_id = $('input[name="project_id"]').val();
    var customer_id = $('.customer_profile input[name="userid"]').val();
    // if (typeof(project_id) != 'undefined') {
    //     data.project_id = project_id;
    // } else if (typeof(customer_id) != 'undefined') {
    //     data.customer_id = customer_id;
    // }
    var qs = getQueryStrings();
    var myLidParam = qs["lid"];
    var myPidParam = qs["pid"];
    var myEidParam = qs["eid"];

    if (myLidParam > 0) {
        data.leadid = myLidParam;
    } else if (myPidParam > 0) {
        data.project_id = myPidParam;
    } else if (myEidParam > 0) {
        data.eventid = myEidParam;
    }

    $.post(admin_url + 'invoices/get_invoices_total', data).done(function (response) {
        $('#invoices_total').html(response);
    });
}

function init_estimates_total(manual) {

    if ($('#estimates_total').length == 0) {
        return;
    }
    var _est_total_href_manual = $('.estimates-total');
    if ($('body').hasClass('estimates_total_manual') && typeof (manual) == 'undefined' && !_est_total_href_manual.hasClass('initialized')) {
        return;
    }

    _est_total_href_manual.addClass('initialized');
    var currency = $('body').find('select[name="total_currency"]').val();
    var _years = $('body').find('select[name="estimates_total_years"]').selectpicker('val');
    var years = [];
    $.each(_years, function (i, _y) {
        if (_y != '') {
            years.push(_y);
        }
    });

    var customer_id = '';
    var project_id = '';

    var _customer_id = $('.customer_profile input[name="userid"]').val();
    var _project_id = $('input[name="project_id"]').val();
    if (typeof (_customer_id) != 'undefined') {
        customer_id = _customer_id;
    } else if (typeof (_project_id) != 'undefined') {
        project_id = _project_id;
    }

    $.post(admin_url + 'estimates/get_estimates_total', {
        currency: currency,
        init_total: true,
        years: years,
        customer_id: customer_id,
        project_id: project_id,
    }).done(function (response) {
        $('#estimates_total').html(response);
    });
}

function init_expenses_total() {

    if ($('#expenses_total').length == 0) {
        return;
    }
    var currency = $('body').find('select[name="expenses_total_currency"]').val();
    var _years = $('body').find('select[name="expenses_total_years"]').selectpicker('val');
    var years = [];
    $.each(_years, function (i, _y) {
        if (_y != '') {
            years.push(_y);
        }
    });

    var customer_id = '';
    var _customer_id = $('.customer_profile input[name="userid"]').val();
    if (typeof (customer_id) != 'undefined') {
        customer_id = _customer_id;
    }

    var project_id = '';
    var _project_id = $('input[name="project_id"]').val();
    if (typeof (project_id) != 'undefined') {
        project_id = _project_id;
    }

    $.post(admin_url + 'expenses/get_expenses_total', {
        currency: currency,
        init_total: true,
        years: years,
        customer_id: customer_id,
        project_id: project_id,
    }).done(function (response) {
        $('#expenses_total').html(response);
    });
}

function validate_invoice_form(selector) {
    if (typeof (selector) == 'undefined') {
        selector = '#invoice-form';
    }
    _validate_form($(selector), {
        clientid: 'required',
        date: 'required',
        currency: 'required',
        number: {
            required: true,
        }
    });
    var qs = getQueryStrings();
    var myLidParam = qs["lid"];
    var myPidParam = qs["pid"];
    var myEidParam = qs["eid"];
    var format = $('input[name="number"]').data('number-format');
    $('body').find('input[name="number"]').rules('add', {

        remote: {
            url: admin_url + "invoices/validate_invoice_number",
            type: 'post',
            data: {
                format: function () {
                    return $('input[name="number"]').data('number-format');
                },
                number: function () {
                    return $('input[name="number"]').val();
                },
                isedit: function () {
                    return $('input[name="number"]').data('isedit');
                },
                original_number: function () {
                    return $('input[name="number"]').data('original-number');
                },
                date: function () {
                    return $('input[name="date"]').val();
                },
                lid: function () {
                    return myLidParam;
                },
                pid: function () {
                    return myPidParam;
                },
                eid: function () {
                    return myEidParam;
                }
            }
        },
        messages: {
            remote: appLang.invoice_number_exists,
        }
    });
}

function validate_estimate_form(selector) {
    if (typeof (selector) == 'undefined') {
        selector = '#estimate-form';
    }
    _validate_form($(selector), {
        clientid: 'required',
        date: 'required',
        currency: 'required',
        number: {
            required: true
        }
    });

    $('body').find('input[name="number"]').rules('add', {
        remote: {
            url: admin_url + "estimates/validate_estimate_number",
            type: 'post',
            data: {
                number: function () {
                    return $('input[name="number"]').val();
                },
                isedit: function () {
                    return $('input[name="number"]').data('isedit');
                },
                original_number: function () {
                    return $('input[name="number"]').data('original-number');
                },
                date: function () {
                    return $('input[name="date"]').val();
                },
            }
        },
        messages: {
            remote: appLang.estimate_number_exists,
        }
    });

}

// Sort estimates in the pipeline view / switching sort type by click
function estimates_pipeline_sort(type) {
    var sort = $('input[name="sort"]');
    $('input[name="sort_type"]').val(type);
    if (sort.val() == 'ASC') {
        sort.val('DESC');
    } else if (sort.val() == 'DESC') {
        sort.val('ASC');
    } else {
        sort.val('DESC');
    }
    estimate_pipeline();
}

// Sort proposals in the pipeline view / switching sort type by click
function proposal_pipeline_sort(type) {
    var sort = $('input[name="sort"]');
    $('input[name="sort_type"]').val(type);
    if (sort.val() == 'ASC') {
        sort.val('DESC');
    } else if (sort.val() == 'DESC') {
        sort.val('ASC');
    } else {
        sort.val('DESC');
    }
    proposals_pipeline();
}

// Init estimates pipeline
function estimate_pipeline() {
    init_kanban('estimates/get_pipeline', estimates_pipeline_update, '.pipeline-status', 360, 360);
}

function estimates_pipeline_update(ui, object) {
    if (object === ui.item.parent()[0]) {
        var data = {};
        data.estimateid = $(ui.item).data('estimate-id');
        data.status = $(ui.item.parent()[0]).data('status-id');
        var order = [];
        var status = $(ui.item).parents('.pipeline-status').find('li')
        var i = 1;
        $.each(status, function () {
            order.push([$(this).data('estimate-id'), i]);
            i++;
        });
        data.order = order;
        check_kanban_empty_col('[data-estimate-id]');
        $.post(admin_url + 'estimates/update_pipeline', data);
    }
}

function proposals_pipeline_update(ui, object) {
    if (object === ui.item.parent()[0]) {
        var data = {};
        data.proposalid = $(ui.item).data('proposal-id');
        data.status = $(ui.item.parent()[0]).data('status-id');
        var order = [];
        var status = $(ui.item).parents('.pipeline-status').find('li')
        var i = 1;
        $.each(status, function () {
            order.push([$(this).data('proposal-id'), i]);
            i++;
        });
        data.order = order;

        check_kanban_empty_col('[data-proposal-id]');
        $.post(admin_url + 'proposals/update_pipeline', data);
    }
}

// Init proposals pipeline
function proposals_pipeline() {
    init_kanban('proposals/get_pipeline', proposals_pipeline_update, '.pipeline-status', 360, 360);
}

// Open single proposal in pipeline
function proposal_pipeline_open(id) {
    if (id == '') {
        return;
    }
    $.get(admin_url + 'proposals/pipeline_open/' + id, function (response) {
        var visible = $('.proposal-pipeline-modal:visible').length;
        $('#proposal').html(response);
        if (visible == 0) {
            $('.proposal-pipeline-modal').modal({
                show: true,
                backdrop: 'static',
                keyboard: false
            });
        } else {
            $('#proposal').find('.modal.proposal-pipeline-modal').addClass('in').css('display', 'block');
        }

    });
}

// Estimate single open in pipeline
function estimate_pipeline_open(id) {
    if (id == '') {
        return;
    }
    $.get(admin_url + 'estimates/pipeline_open/' + id, function (response) {
        var visible = $('.estimate-pipeline:visible').length;
        $('#estimate').html(response);
        if (visible == 0) {
            $('.estimate-pipeline').modal({
                show: true,
                backdrop: 'static',
                keyboard: false
            });
        } else {
            $('#estimate').find('.modal.estimate-pipeline').addClass('in').css('display', 'block');
        }
    });
}

// Delete estimate note
function delete_estimate_note(wrapper, id) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'estimates/delete_note/' + id, function (response) {
            if (response.success == true) {
                $(wrapper).parents('.estimate-note').remove();
            }
        }, 'json');
    }
}

// Get all estimate notes
function get_estimate_notes(id) {
    $.get(admin_url + 'estimates/get_notes/' + id, function (response) {
        $('#estimate_notes_area').html(response);
    });
}

// Proposal merge field into the editor
function insert_proposal_merge_field(field) {
    var key = $(field).text();
    tinymce.activeEditor.execCommand('mceInsertContent', false, key);
}

// Toggle full view for small tables like proposals
function small_table_full_view() {
    $('#small-table').toggleClass('hide');
    $('.small-table-right-col').toggleClass('col-sm-12 col-sm-7');
}

function manage_invoice_items(form) {
    var data = $(form).serialize();
    var url = form.action;
    $.post(url, data).done(function (response) {
        response = JSON.parse(response);
        if (response.success == true) {
            var item_select = $('#item_select');
            if ($('body').find('.accounting-template').length > 0) {
                var group = item_select.find('[data-group-id="' + response.item.group_id + '"]');
                var _option = '<option data-subtext="' + response.item.long_description + '" value="' + response.item.itemid + '">(' + accounting.formatNumber(response.item.rate) + ') ' + response.item.description + '</option>';
                if (!item_select.hasClass('ajax-search')) {
                    if (group.length == 0) {
                        _option = '<optgroup label="' + (response.item.group_name == null ? '' : response.item.group_name) + '" data-group-id="' + response.item.group_id + '">' + _option + '</optgroup>';
                        if (item_select.find('[data-group-id="0"]').length == 0) {
                            item_select.find('option:first-child').after(_option);
                        } else {
                            item_select.find('[data-group-id="0"]').after(_option);
                        }
                    } else {
                        group.prepend(_option);
                    }
                }
                if (!item_select.hasClass('ajax-search')) {
                    item_select.selectpicker('refresh');
                } else {

                    item_select.contents().filter(function () {
                        return !$(this).is('.newitem') && $(this).is('.newitem-divider');
                    }).remove();

                    var clonedItemsAjaxSearchSelect = item_select.clone();
                    item_select.selectpicker('destroy').remove();
                    item_select = clonedItemsAjaxSearchSelect;
                    $('body').find('.items-wrapper').append(clonedItemsAjaxSearchSelect);
                    init_ajax_search('items', '#item_select.ajax-search', undefined, admin_url + 'items/search');
                }
                add_item_to_preview(response.item.itemid);
            } else {
                // Is general items view
                $('.table-invoice-items').DataTable().ajax.reload(null, false);
            }
            alert_float('success', response.message);
        }
        $('#sales_item_modal').modal('hide');
    }).fail(function (data) {
        alert_float('danger', data.responseText);
    });
    return false;
}

function save_sales_number_settings(e) {
    var data = {};
    data.prefix = $('body').find('input[name="s_prefix"]').val();
    if (data.prefix != '') {
        $.post($(e).data('url'), data).done(function (response) {
            response = JSON.parse(response);
            if (response.success && response.message) {
                alert_float('success', response.message);
                $('#prefix').html(data.prefix);
            }
        });
    }
}

function do_prefix_year(date) {
    var date_array;
    if (date.indexOf('.') > -1) {
        date_array = date.split('.');
    } else if (date.indexOf('-') > -1) {
        date_array = date.split('-');
    } else if (date.indexOf('/') > -1) {
        date_array = date.split('/');
    }
    if (typeof (date_array) != 'undefined') {
        $.each(date_array, function (i, string) {
            if (string.length == 4) {
                $('#prefix_year').html(string);
            }
        });
    }
}

function vault_re_enter_password(id, e) {
    var invoker = $(e);
    var vaultEntry = $('#vaultEntry-' + id);
    var $confirmPasswordVaultModal = $('#vaultConfirmPassword');

    _validate_form($confirmPasswordVaultModal.find('form'), {
        user_password: 'required'
    }, vault_encrypt_password);

    if (!invoker.hasClass('decrypted')) {
        $confirmPasswordVaultModal.find('form input[name="id"]').val(id);
        $confirmPasswordVaultModal.modal('show');
    } else {
        invoker.removeClass('decrypted');
        vaultEntry.find('.vault-password-fake').removeClass('hide');
        vaultEntry.find('.vault-password-encrypted').addClass('hide');
    }
}

function vault_encrypt_password(form) {

    var $form = $(form);
    var vaultEntry = $('#vaultEntry-' + $form.find('input[name="id"]').val());
    var data = $form.serialize();
    var $confirmPasswordVaultModal = $('#vaultConfirmPassword');

    $.post($form.attr('action'), data).done(function (response) {
        response = JSON.parse(response);
        vaultEntry.find('.vault-password-fake').addClass('hide');
        vaultEntry.find('.vault-view-password').addClass('decrypted');
        vaultEntry.find('.vault-password-encrypted').removeClass('hide').html(response.password);
        $confirmPasswordVaultModal.modal('hide');
        $confirmPasswordVaultModal.find('input[name="user_password"]').val('');
    }).fail(function (error) {
        alert_float('danger', JSON.parse(error.responseText).error_msg);
    });

    return false;
}

function set_notification_read_inline(id) {
    $.get(admin_url + 'misc/set_notification_read_inline/' + id, function () {
        var notification = $('body').find('.notification-wrapper[data-notification-id="' + id + '"]');
        notification.find('.notification-box,.notification-box-all').removeClass('unread');
        notification.find('.not-mark-as-read-inline').tooltip('destroy').remove();
    });
}

function mark_all_notifications_as_read_inline() {
    $.get(admin_url + 'misc/mark_all_notifications_as_read_inline/', function () {
        var notification = $('body').find('.notification-wrapper');
        notification.find('.notification-box,.notification-box-all').removeClass('unread');
        notification.find('.not-mark-as-read-inline').tooltip('destroy').remove();
    });
}

function delete_sale_activity(id) {
    var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'misc/delete_sale_activity/' + id, function () {
            $('body').find('[data-sale-activity-id="' + id + '"]').remove();
        });
    }
}

function view_event(id) {
    if (typeof (id) == 'undefined') {
        return;
    }
    $.post(admin_url + 'utilities/view_event/' + id).done(function (response) {
        $('#event').html(response);
        $('#viewEvent').modal('show');
        init_datepicker();
        init_selectpicker();
        validate_calendar_form();
    });
}

function delete_event(id) {
    $.get(admin_url + 'utilities/delete_event/' + id, function (response) {
        window.location.reload();
    }, 'json');
}

function validate_calendar_form() {
    _validate_form($('body').find('._event form'), {
        title: 'required',
        start: 'required',
        reminder_before: 'required'
    }, calendar_form_handler);

    _validate_form($('body').find('#viewEvent form'), {
        title: 'required',
        start: 'required',
        reminder_before: 'required'
    }, calendar_form_handler);
}

function calendar_form_handler(form) {
    $.post(form.action, $(form).serialize()).done(function (response) {
        response = JSON.parse(response);
        if (response.success == true) {
            alert_float('success', response.message);
            setTimeout(function () {
                var location = window.location.href;
                location = location.split('?');
                window.location.href = location[0];
            }, 500);
        }
    });

    return false;
}

/**
 * Attached new hotkey handler
 * @param {hotkey} key
 * @param {[function]} func handler function to be executed when hotkey is pressed
 */
function add_hotkey(key, func) {

    $.Shortcuts.add({
        type: 'down',
        mask: key,
        handler: func
    });
}

/**
 * Fetches notifications
 * @return {null}
 */
function fetch_notifications(callback) {
    $.get(admin_url + 'misc/notifications_check', function (response) {
        var nw = notifications_wrapper;
        nw.html(response.html);
        var total = nw.find('ul.notifications').attr('data-total-unread');
        if (total > 0) {
            document.title = '(' + total + ') ' + doc_initial_title;
        } else {
            document.title = doc_initial_title;
        }
        setTimeout(function () {
            var nIds = response.notificationsIds;
            if (nIds.length > 0) {
                $.each(nIds, function (i, notId) {
                    var nSelector = 'li[data-notification-id="' + notId + '"]';
                    var $not = nw.find(nSelector);
                    $.notify("", {
                        'title': appLang.new_notification,
                        'body': $not.find('.notification-title').text(),
                        'requireInteraction': true,
                        'icon': $not.find('.notification-image').attr('src'),
                        'tag': notId,
                    }).close(function () {
                        $.get(admin_url + 'misc/set_desktop_notification_read/' + notId, function () {
                            var $totalIndicator = nw.find('.icon-total-indicator');
                            nw.find('li[data-notification-id="' + notId + '"] .notification-box').removeClass('unread');
                            var currentTotalNotifications = $totalIndicator.text();
                            currentTotalNotifications = currentTotalNotifications.trim();
                            currentTotalNotifications = (currentTotalNotifications - 1);
                            if (currentTotalNotifications > 0) {
                                document.title = '(' + currentTotalNotifications + ') ' + doc_initial_title;
                                $totalIndicator.html(currentTotalNotifications)
                            } else {
                                document.title = doc_initial_title;
                                $totalIndicator.addClass('hide');
                            }
                        });
                    }).click(function (e) {
                        parent.focus();
                        window.focus();
                        setTimeout(function () {
                            nw.find(nSelector + ' .notification-link').addClass('desktopClick').click();
                            e.target.close();
                        }, 70);
                    });
                });
            }
        }, 200);
    }, 'json');
}

function merge_field_format_url(url, node, on_save, name) {
    // Merge fields url
    if (url.indexOf("{") > -1 && url.indexOf("}") > -1) {
        url = '{' + url.split('{')[1];
    }
    // Return new URL
    return url;
}

// Function to slug string
function slugify(string) {
    return string
        .toString()
        .trim()
        .toLowerCase()
        .replace(/\s+/g, "-")
        .replace(/[^\w\-]+/g, "")
        .replace(/\-\-+/g, "-")
        .replace(/^-+/, "")
        .replace(/-+$/, "");
}

function getQueryStrings() {
    var assoc = {};
    var decode = function (s) {
        return decodeURIComponent(s.replace(/\+/g, " "));
    };
    var queryString = location.search.substring(1);
    var keyValues = queryString.split('&');

    for (var i in keyValues) {
        var key = keyValues[i].split('=');
        if (key.length > 1) {
            assoc[decode(key[0])] = decode(key[1]);
        }
    }

    return assoc;
}

function view_lead_file(id, $lead_id) {
    $('#lead_file_data').empty();
    $("#lead_file_data").load(admin_url + 'leads/file/' + id + '/' + lead_id, function (response, status, xhr) {
        if (status == "error") {
            alert_float('danger', xhr.statusText);
        }
    });
}

//Added By Avni on 11/10/2017
$('body').on('change', 'table.dataTable tbody .selectpicker.taskstatus', function () {
    var task_id = $(this).attr('task_id');
    var status_id = $(this).val();
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("tasks"));
    $.ajax({
        type: 'POST',
        data: {
            status_id: status_id,
            task_id: task_id
        },
        url: shortUrl + "tasks/statuschange"
    }).done(function (response) {
        $.ajax({
            type: 'POST',
            data: {},
            url: shortUrl + "tasks/taskoverviewupdate"
        }).done(function (response) {
            $(".task-overview").html(response);
            $('.table-tasks').DataTable().ajax.reload();
            alert_float('success', "Status updated successfully!");
        });
    });
});

/*$('body').on('click', 'table.dataTable tbody .contact-favrit', function () {
    var contact_id = $(this).attr('contact_id');
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("addressbooks"));
    $.ajax({
        type: 'POST',
        data: {
            contact_id: contact_id
        },
        url: shortUrl + "addressbooks/favorite"
    }).done(function (response) {
        $('.table-addressbook').DataTable().ajax.reload();
    });

});*/

$('body').on('click', '.contact-fav', function () {
    var contact_id = $(this).attr('contact_id');
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("addressbooks"));
    $.ajax({
        type: 'POST',
        data: {
            contact_id: contact_id
        },
        url: shortUrl + "addressbooks/favorite"
    }).done(function (response) {
        if (response == 'added') {
            if ($('.addressbookdashboard').length > 0) {
                $('.addressbookdashboard .contact-fav').addClass('favorite');
            }
            alert_float('success', 'Contact is marked to favourites');
        } else {
            if ($('.addressbookdashboard').length > 0) {
                $('.addressbookdashboard .contact-fav').removeClass('favorite');
            }
            alert_float('success', 'Contact is unmarked from favourites');
        }
        if ($('.addressbookdashboard').length > 0) {
            $('.addressbookdashboard .contact-fav i').toggleClass('fa-star fa-star-o');
        }
        if ($('.table-addressbook').length > 0) {
            $('.table-addressbook').DataTable().ajax.reload();
        } else {
            contacts_kanban();
        }
    });

});

/**
 * Added By : Vaidehi
 * Dt : 02/21/2018
 * to mark venue as favorite
 */
$('body').on('click', 'table.dataTable tbody .venue-fav', function () {
    var venue_id = $(this).attr('venue_id');
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("venues"));
    $.ajax({
        type: 'POST',
        data: {
            venue_id: venue_id
        },
        url: shortUrl + "venues/favorite"
    }).done(function (response) {
        $('.table-venue').DataTable().ajax.reload();
    });

});

/* Added by purvi for read messages */
$(".isread").on("click", function () {
    var messageid = $(this).attr('messageid');
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("messages"));
    $.ajax({
        type: 'POST',
        data: {
            message_id: messageid
        },
        url: shortUrl + "messages/readmessage"
    }).done(function (response) {
        if (response == 'read') {
            return true;
        } else {
            return false;
        }
    });
    $(this).closest('tr').removeClass('unread');
    $(this).hide();
    var unreadcls = $(".unread.badge").html();
    $(".unread.badge").html(unreadcls - 1);
    alert_float('success', "Message read successfully!");
});
$("body").on("click", ".mark-all-read", function () {
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("messages"));
    $.ajax({
        type: 'POST',
        data: {},
        url: shortUrl + "messages/readallmessages"
    }).done(function (response) {
        if (response == 'read') {
            return true;
        } else {
            return false;
        }
    });
    $(".mail-list tr").removeClass('unread');
    $(".mail-list tr .isread").hide();
    $(".unread.badge").hide();
    alert_float('success', "All messages read successfully!");
});

function message_bulk_action() {
    var mark_read = $("input[name='mark_read']:checked").val();
    var rows = $('.table-messages').find('tbody tr');
    var ids = [];
    if (mark_read == "selected") {
        $.each(rows, function () {
            var checkbox = $($(this).find('td').eq(0)).find('input');
            if (checkbox.prop('checked') == true) {
                ids.push(checkbox.val());
            }
        });
        if (ids.length === 0) {
            alert("Please select records");
            $('.close').trigger('click');
        } else {
            $.ajax({
                type: 'POST',
                data: {'message_ids': ids},
                url: admin_url + "messages/readmessages"
            }).done(function (response) {
                if (response == 'read') {
                    $.each(rows, function () {
                        var checkbox = $($(this).find('td').eq(0)).find('input');
                        checkbox.prop('checked', false);
                        $('#mass_select_all').prop('checked', false);
                    });
                    $('.close').trigger('click');
                    alert_float('success', "All selected messages are read successfully!");
                    $(".mail-list tr").removeClass('unread');
                    $(".mail-list tr .isread").hide();
                    $(".unread.badge").hide();
                    return true;
                } else {
                    return false;
                }
            });
        }

    } else if (mark_read == "all") {
        $.ajax({
            type: 'POST',
            data: {},
            url: admin_url + "messages/readallmessages"
        }).done(function (response) {
            if (response == 'read') {
                $('.close').trigger('click');
                alert_float('success', "All messages read successfully!");
                $(".mail-list tr").removeClass('unread');
                $(".mail-list tr .isread").hide();
                $(".unread.badge").hide();
                return true;
            } else {
                return false;
            }
        });
    } else {
        alert("Please select one option !");
    }
}

/* Added by Purvi on 11-22-2017 for Message module */
function initMailDataTableOffline(dt_table) {
    var selector = '.table-messages';

    if (typeof (dt_table) !== 'undefined') {
        selector = dt_table;
    }

    var tables = $(selector);
    if (tables.length) {
        var order_col, order_type, options, _buttons;
        var _options = {
            "language": appLang.datatables,
            "processing": true,
            'paginate': true,
            "responsive": true,
            "autoWidth": false,
            "order": [3, 'DESC'],
            "fnRowCallback": DataTablesOfflineLazyLoadImages,
            "columnDefs": [
                {"orderable": false, "targets": 0},
                {"orderable": false, "targets": 1}
            ],
            "fnDrawCallback": function (oSettings) {
                _table_jump_to_page(this, oSettings);
                if (oSettings.aoData.length == 0 || oSettings.aiDisplay.length == 0) {
                    $(oSettings.nTableWrapper).addClass('app_dt_empty');
                } else {
                    $(oSettings.nTableWrapper).removeClass('app_dt_empty');
                }
            },
            "initComplete": function (settings, json) {
                var dtOfflineEmpty = this.find('.dataTables_empty');

                if (this.hasClass('scroll-responsive') || app_scroll_responsive_tables == 1) {
                    this.wrap('<div class="table-responsive"></div>');
                }

                if (dtOfflineEmpty.length) {
                    dtOfflineEmpty.attr('colspan', this.find('thead th').length);
                }
                this.parents('.table-loading').removeClass('table-loading');
                var t_export = $(selector);
                var th_last_child = t_export.find('thead th:last-child');
                var th_first_child = t_export.find('thead th:first-child');
                if (th_last_child.text().trim() == appLang.options) {
                    th_last_child.addClass('not-export');
                }
                if (th_first_child.find('input[type="checkbox"]').length > 0) {
                    th_first_child.addClass('not-export');
                }
            },
            //dom: "<'row'><'row'<'col-sm-6'lB><'col-sm-6'f>r>t<'row'<'col-sm-4'i>><'row'<'#colvis'><'.dt-page-jump'>p>",
            //dom: "<'row'><'row '<'col-sm-6'B><'col-sm-6'f>r>t<'row'><'row'<'#colvis'><'.dt-page-jump'><'col-sm-6 data-footer'li><'col-sm-6'p>>",
            dom: "<'row'><'row leadlistrow '<'col-sm-6 bulkactions'B><'col-sm-6'f>r>t<'row'><'row'<'#colvis'><'.dt-page-jump'><'col-sm-6 data-footer'li><'col-sm-6'p>>",
        }

        var order_col = $($(this)).attr('data-order-col');
        var order_type = $($(this)).attr('data-order-type');
        $.each(tables, function () {
            $(this).addClass('dt-no-serverside');
            options = _options;
            if ($(this).hasClass('scroll-responsive') || app_scroll_responsive_tables == 1) {
                options.responsive = false;
            }
            order_col = $(this).attr('data-order-col');
            order_type = $(this).attr('data-order-type');
            if (order_col && order_type) {
                options.order = [
                    [order_col, order_type]
                ]
            }
            _buttons = get_dt_export_buttons(this);
            // Remove the reload button here because its not ajax request
            //delete _buttons[2];
            options.buttons = _buttons;
            var tableApi = $(this).DataTable(options);
            $(document).on("change", ".dt-page-jump-select", function () {
                tableApi.page($(this).val() - 1).draw(false);
            });
            $(document).on("change", ".searchcustom.selectpicker", function () {
                var col = $(this).val();

                if (col == 1) {
                    if ($(".searchcustomwrapper a").hasClass('desc')) {
                        tableApi.order([3, 'desc']).draw();
                    } else {
                        tableApi.order([3, 'asc']).draw();
                    }
                } else {
                    if ($(".searchcustomwrapper a").hasClass('desc')) {
                        tableApi.order([1, 'desc']).draw();
                    } else {
                        tableApi.order([1, 'asc']).draw();
                    }
                }

                $('.searchcustom').selectpicker('refresh');

            });
            $(document).on("click", ".searchcustomwrapper a", function () {
                if ($(this).hasClass('desc')) {
                    $(".searchcustomwrapper i").removeClass('fa-long-arrow-up').addClass('fa-long-arrow-down');
                    $(this).removeClass('desc').addClass('asc');

                    var col = $(".searchcustom.selectpicker").val();

                    if (col == 1) {
                        tableApi.order([3, 'asc']).draw();
                    } else {
                        tableApi.order([1, 'asc']).draw();
                    }

                } else {
                    $(".searchcustomwrapper i").removeClass('fa-long-arrow-down').addClass('fa-long-arrow-up');
                    $(this).removeClass('asc').addClass('desc');

                    var col = $(".searchcustom.selectpicker").val();

                    if (col == 1) {
                        tableApi.order([3, 'desc']).draw();
                    } else {
                        tableApi.order([1, 'desc']).draw();
                    }
                }

            });
        });
    }
}

/* Added by Vaidehi on 03-22-2018 for reports module */
function initReportDataTableOffline(dt_table, pageLength) {
    var selector = '.table-leadstatus';

    if (typeof (dt_table) !== 'undefined') {
        selector = dt_table;
    }

    var tables = $(selector);

    if (tables.length) {
        var order_col, order_type, options, _buttons;
        var _options = {
            "language": appLang.datatables,
            "processing": true,
            'paginate': true,
            "responsive": true,
            "pageLength": pageLength,
            "bSort": false,
            "bFilter": false,
            "bInfo": false,
            "bLengthChange": false,
            "autoWidth": false,
            "order": [0, 'DESC'],
            "fnRowCallback": DataTablesOfflineLazyLoadImages,
            "fnDrawCallback": function (oSettings) {
                _table_jump_to_page(this, oSettings);
                if (oSettings.aoData.length == 0 || oSettings.aiDisplay.length == 0) {
                    $(oSettings.nTableWrapper).addClass('app_dt_empty');
                } else {
                    $(oSettings.nTableWrapper).removeClass('app_dt_empty');
                }

                // if ($(dt_table+' tr').length <= pageLength) {
                //     $('.dataTables_paginate').hide();
                // }

                var pagination = $(this).closest('.dataTables_wrapper').find('.dataTables_paginate');
                pagination.toggle(this.api().page.info().pages > 1);
            },
            "initComplete": function (settings, json) {
                var dtOfflineEmpty = this.find('.dataTables_empty');

                if (this.hasClass('scroll-responsive') || app_scroll_responsive_tables == 1) {
                    this.wrap('<div class="table-responsive"></div>');
                }

                if (dtOfflineEmpty.length) {
                    dtOfflineEmpty.attr('colspan', this.find('thead th').length);
                }
                this.parents('.table-loading').removeClass('table-loading');
                var t_export = $(selector);
                var th_last_child = t_export.find('thead th:last-child');
                var th_first_child = t_export.find('thead th:first-child');
                if (th_last_child.text().trim() == appLang.options) {
                    th_last_child.addClass('not-export');
                }
                if (th_first_child.find('input[type="checkbox"]').length > 0) {
                    th_first_child.addClass('not-export');
                }
            },
            //dom: "<'row'><'row'<'col-sm-6'lB><'col-sm-6'f>r>t<'row'<'col-sm-4'i>><'row'<'#colvis'><'.dt-page-jump'>p>",
            dom: "<'row'><'row leadlistrow'<'col-sm-6 bulkactions'B><'col-sm-6'f>r>t<'row'><'row'<'#colvis'><'.dt-page-jump'><'col-sm-6 data-footer'li><'col-sm-6'p>>",
        }

        var order_col = $($(this)).attr('data-order-col');
        var order_type = $($(this)).attr('data-order-type');
        $.each(tables, function () {
            $(this).addClass('dt-no-serverside');
            options = _options;
            if ($(this).hasClass('scroll-responsive') || app_scroll_responsive_tables == 1) {
                options.responsive = false;
            }
            order_col = $(this).attr('data-order-col');
            order_type = $(this).attr('data-order-type');
            if (order_col && order_type) {
                options.order = [
                    [order_col, order_type]
                ]
            }
            _buttons = get_dt_export_buttons(this);
            // Remove the reload button here because its not ajax request
            //delete _buttons[2];
            options.buttons = _buttons;
            var tableApi = $(this).DataTable(options);
            $(document).on("change", ".dt-page-jump-select", function () {
                tableApi.page($(this).val() - 1).draw(false);
            });
        });
    }
}

function edit_message(id) {
    var edit_wrapper = $('[data-edit-message="' + id + '"]');
    $(".msg-cnt-" + id).addClass('hide');
    edit_wrapper.removeClass('hide');
    tinymce.remove('#message_' + id);
    init_editor('#message_' + id, {
        height: 120,
        auto_focus: true,
    });
    tinymce.triggerSave();
}

function cancel_edit_message(id) {
    var edit_wrapper = $('[data-edit-message="' + id + '"]');
    tinymce.remove('[data-edit-message="' + id + '"] textarea');
    edit_wrapper.addClass('hide');
    $(".msg-cnt-" + id).removeClass('hide');
}

function save_edited_message(id) {
    tinymce.triggerSave();
    var data = {};
    data.id = id;
    data.content = $('[data-edit-message="' + id + '"]').find('textarea').val();
    $.post(admin_url + 'messages/edit_message', data).done(function (response) {
        response = JSON.parse(response);
        if (response.success == true) {
            alert_float('success', response.message);
            window.location.reload();
        } else {
            cancel_edit_message(id);
        }
        //tinymce.remove('[data-edit-message="' + id + '"] textarea');
    });
}

/* Added by Masud on 02-06-2018 for package module to add item*/

function get_item_for_package(itemid) {

    $.ajax({
        type: 'POST',
        url: admin_url + 'invoice_items/get_item_by_itemid/' + itemid,
        success: function (result) {
            $('#package_item_list > p').hide();
            $('#package_item_list').append(result).fadeIn(1000);
            $('.package_items_total').fadeIn();
            package_calculation();
        }
    });
}

// Add item to preview from the dropdown for package estimates
$('body').on('change', 'select[name="add_item_to_package"]', function () {
    var itemid = $(this).selectpicker('val');
    package_item = "#id-" + itemid + ".package_item";
    if ($(package_item).length > 0) {
        var qty = $(package_item + " .quantity > input").val();
        qty = parseInt(qty) + 1;
        $(package_item + " .quantity > input").val(qty);
        package_item_calculation(package_item);
        package_calculation()
    } else {
        if (itemid != '' && !itemid.match('^newitem-')) {
            get_item_for_package(itemid);
        } else if (itemid.match('^newitem-')) {
            var package_id = itemid.split('-');
            package_id = package_id[1];
            var newps = admin_url + 'invoice_items/item?package_id=' + package_id;
            window.location.href = newps;
        }
    }
    $(this).selectpicker('val', '');
});
$('body').on('change', 'input.qty', function () {

    //var qty = $(this).val();
    pid = "#" + $(this).attr('data-pid');
    package_item = pid + ".package_item";
    package_item_calculation(package_item);
    package_calculation();

});

function package_calculation() {
    var pcost = 0;
    psubtotal = 0;
    pprofit = 0;
    $('.package_item').each(function () {

        pqty = $('.quantity input.qty', this).val();
        pcost = parseFloat(pcost) + (parseFloat($('.cost', this).text()) * parseInt(pqty));
        psubtotal = parseFloat(psubtotal) + parseFloat($('.subtotal .subtotal', this).val());
        pprofit = parseFloat(pprofit) + parseFloat($('.profit', this).text());
    });
    $('.package_profit').val(pprofit);
    $('.package_cost_total').val(pcost);
    $('.package_total').val(psubtotal);

    $('.gcost').text(pcost);
    $('.gsubtotal').text(psubtotal);
    $('.gprofit').text(pprofit);
}

function package_item_calculation(package_item) {
    var qty = $(package_item + " input.qty").val();
    price = $(package_item + " .price").text();
    cost = $(package_item + " .cost").text();
    profit = parseFloat(price) - parseFloat(cost);
    subtotal = parseFloat(price) * parseFloat(qty);
    new_profit = parseFloat(profit) * parseFloat(qty);
    $(package_item + " input.subtotal").val(subtotal);
    $(package_item + " .profit").text(new_profit);
}

$('body').on('click', '.opt_title', function () {
    $(this).siblings('.options_list').slideToggle();
    $('.fa', this).toggleClass('fa-caret-down fa-caret-up');
    setTimeout(function () {
        var quote_height = $('.quotes.slick-slide.slick-current.slick-active').height();
        $('.proposalsections .slick-list').height(quote_height);
    }, 1000);
    //$('.proposalsections').slick('refresh');
});
$('body').on('click', '.desc_title', function () {
    var pid = "#" + $(this).attr('data-pid');
    $('.fa', this).toggleClass('fa-caret-down fa-caret-up');
    $(pid + ' .desc_inner').slideToggle();
});

$('body').on('click', '.package_item_remove', function () {
    var pid = "#" + $(this).attr('data-pid');
    $(pid).remove();
    package_calculation();
});

$('body').on('change', 'input.subtotal', function () {
    var pid = "#" + $(this).attr('data-pid');
    package_item = pid + ".package_item";
    var qty = $(package_item + " input.qty").val();
    cost = $(package_item + " .cost").text();
    totalcost = parseFloat(cost) * parseFloat(qty);
    stotal = $(this).val();
    nprofit = parseFloat(stotal) - parseFloat(totalcost);
    $(package_item + " .profit").text(nprofit);
    package_calculation();

});

$('#save_package_settings').on('click', function (e) {
    e.preventDefault();
    var settings = $('#package_display_settings').serialize();
    var page_type = $('#package_display_settings #page_type').val();
    $.ajax({
        type: 'POST',
        url: admin_url + 'invoice_items/save_package_display_settings/',
        data: settings,
        success: function (result) {
            var column = result.split(',');
            $('.package_col').removeClass('visibility_visible');
            $.each(column, function (key, value) {
                $("." + value + "-col").addClass('visibility_visible');
            });
            $('button.close').trigger('click');
            if (page_type == "package_list") {
                window.location.reload();
            }

        }
    });
});

$('body').on('change', '.package_total', function () {

    var ptotal = $(this).val();
    pcost = $('.package_cost_total').val();
    pprofit = parseFloat(ptotal) - parseFloat(pcost);

    $('.package_profit').val(pprofit);
});


/*
    Added by Masud for Proposal on 02-19-2018
*/
//$('body').on('click', '#group_save', function (e) {
$('#group_save').click(function (e) {
    var gname = $('#add_group_popup .gname').val();
    gtype = $('.gtype').selectpicker('val');
    gid = 0;
    vmsg = "";
    erorflag = 0;
    if (gname == "") {
        vmsg = '<p id="description-error" class="text-danger">Please Enter "Group Name".</p>';
        $('.gname').after(vmsg);
        erorflag = 1;
    } else {
        var groups = [];
        $('.group_title').each(function () {
            var agname = $(this).text();
            groups.push(agname);
            if (String(agname) == String(gname)) {
                vmsg = '<p id="description-error" class="text-danger">Group name already exist.</p>';
                if ($('.gname').siblings('.text-danger').length < 1) {
                    $('.gname').after(vmsg);
                }
                erorflag = 1;
            } else {
                $('.gname').siblings('.text-danger').remove();
            }
        });
        /*alert(gname);
        alert(groups);
        alert($.inArray(gname,groups));*/
        /*if($.inArray(gname,groups) >=0){
            alert('hii');
        }*/
    }
    if (gtype == "") {
        vmsg = '<p id="description-error" class="text-danger">Please select "Group Type".</p>';
        if ($('div.gtype').siblings('.text-danger').length < 1) {
            $('div.gtype').after(vmsg);
        }
        erorflag = 1;
    } else {
        $('.gtype').siblings('.text-danger').remove();
    }
    if (erorflag != 1) {
        if ($('.group').length > 0) {
            var highestgroup = 0;
            $('.group').each(function () {
                var id = $(this).attr('id');
                var fieldEmailNum = id.split("_");
                highestgroup = Math.max(highestgroup, parseFloat(fieldEmailNum[1]));
            });
            gid = highestgroup + 1;
        }
        var pdata = {'gid': gid, 'gname': gname, 'gtype': gtype};
        $.ajax({
            type: 'POST',
            url: admin_url + 'proposaltemplates/quote_group/',
            data: pdata,
            success: function (result) {
                if (gid == 0) {
                    $('.quote_groups').append(result);
                } else {
                    $('#group_' + highestgroup).after(result);
                }
                $('a.add_group_top').remove();
                $('.add_group_bottom').removeClass('hide');
                $('button.close').trigger('click');
                $('#add_group_popup .gname').val('');
                $('#add_group_popup .gtype').selectpicker('val', '');
                $('.selectpicker').selectpicker('refresh');
                /*$(".sortable").sortable();*/
            }
        });
    }
});

// Add item to preview from the dropdown for proposal quote estimates
/*$('body').on('change', 'select[name="product_package"]', function() {
    var itemid = $(this).val();
    itemid = itemid.split('_');
    item_type = itemid[0];
    item_id = itemid[1];
    quote_id = $(this).attr('data-pid');
    quote_item = "#"+quote_id+" .quote_item";
    qitems = $(quote_item).length;
    quoteindex = quote_id.split('_');
    quoteindex = quoteindex[1];
    quote_type = $("#"+quote_id+" .quote_type").val();
    qi_data = {'itemid':item_id,'item_type':item_type,'qitems':qitems,'quoteindex':quoteindex,'gtype':quote_type};

    $.ajax({
     type:'POST',
     url:admin_url + 'proposaltemplates/get_item_for_quote',
     data:qi_data,
     success:function(result){
       $("#"+quote_id +" .group_body").append(result);
     }
    });*/

/*package_item = "#id-"+itemid+".package_item";
if($(package_item).length > 0){
    var qty = $(package_item+" .quantity > input").val();
    qty = parseInt(qty) + 1;
    $(package_item+" .quantity > input").val(qty);
    package_item_calculation(package_item);
    package_calculation()
}else{
    if (itemid != '' && !itemid.match('^newitem-')) {
        get_item_for_package(itemid);
    } else if (itemid.match('^newitem-')) {
        var package_id = itemid.split('-');
            package_id = package_id[1];
        var newps = admin_url + 'invoice_items/item?package_id='+package_id;
        window.location.href = newps;
    }
}*/
/* $(this).selectpicker('val', '');
});*/

$('#pimage_save').on('click', function (e) {

    var pimage = $('.pimage').val();
    $.ajax({
        type: 'POST',
        url: admin_url + 'proposaltemplates/upload_pimage',
        data: pimage,
        success: function (result) {
        }
    });

});

$('body').on('click', '.add_item_group', function () {
    var gpid = "#" + $(this).attr('data-pid');
    $(gpid + ' .ps_pkg_container').slideToggle('slow');
});

$('body').on('click', '.quote_item_remove', function () {
    var qitem_id = $(this).attr('data-pid');
    var item_id = $(this).attr('data-itemid');
    $(qitem_id).remove();
    $("." + item_id).removeClass('disabled');
    proposal_price_calculation();
});

$('body').on('click', '.exp_clps', function () {
    var qitem_id = $(this).attr('data-pid');
    $("i", this).toggleClass('fa-caret-up fa-caret-down');
    $("#" + qitem_id + " .group_inner").slideToggle();
});

$(".sortable").sortable({
    stop: function (event, ui) {
        var clas = ui.item.attr("id");
        count = 0;
        var option = [];
        $(".group").each(function () {
            $('.quote_order', this).val(count);
            count++;
        });
    }
});

$(".process-step a, .proposal_step a:not(.payment)").on('click', function (event) {
    if ($(this).attr('data-tab') == "payment_step") {
        $('.makepayment').removeClass('hide');
    } else {
        $('.makepayment').addClass('hide');
    }
    if (this.hash !== "") {
        event.preventDefault();
        var hash = this.hash;
        $('html, body').animate({
            scrollTop: $(hash).offset().top - 150
        }, 800, function () {
            //window.location.hash = hash;
        });
    }
});

var stotal = 0.00;
$('.qsubtotal').each(function () {
    stotal = parseFloat(stotal) + parseFloat($(this).text());

});


$('body').on('click', '.ps_pkg_item:not(.disabled)', function () {
    $(this).toggleClass('selected');
});
$('body').on('click', '#add_media', function () {
    $('.gallery_form').slideToggle();
});
$('body').on('click', '#add_file', function () {
    $('.file_form').slideToggle();
});
$('.signer_form ').hide();
$('body').on('click', '#add_signer', function () {
//$('#add_signer').click(function () {
    $('.signer_form').slideToggle();
});
$('body').on('click', '.add_item_topr', function () {
    var gpid = $(this).attr('data-pid');
    qitems = $(gpid + " .quote_item").length;
    if (qitems > 0) {
        qitems = qitems;
    } else {
        qitems = 0;
    }
    $(gpid + " .ps_pkg_item.selected:not(.disabeld)").each(function () {
        var el_id = "." + $(this).attr('data-class');
        var item_type = $(this).attr('data-type');
        item_id = $(this).attr('data-id');
        quote_item = gpid + " .quote_item";
        quoteindex = gpid.split('_');
        quoteindex = quoteindex[1];
        quote_type = $(gpid + " .quote_type").val();
        tax = $('#proposal_custom_tax').val();
        qi_data = {
            'itemid': item_id,
            'item_type': item_type,
            'qitems': qitems,
            'quoteindex': quoteindex,
            'gtype': quote_type,
            'proposal_custom_tax': tax
        };
        $.ajax({
            type: 'POST',
            url: admin_url + 'proposaltemplates/get_item_for_quote',
            data: qi_data,
            success: function (result) {
                $(gpid + " .quote_items").append(result);
                $(gpid + " " + el_id).addClass('disabled');
                $(gpid + " " + el_id).removeClass('selected');
                $(gpid + ' .quote_items_header').removeClass('hidden');

                $('html, body').animate({
                    scrollTop: $(gpid).offset().top
                }, 800);
                proposal_price_calculation();
                final_proposal_price_calculation();
                $(gpid + " .ps_pkg_container").slideUp();
                $('.selectpicker').selectpicker('refresh');
                /*$(".sortable").sortable("refresh");*/
                createPercentValidation();
                createAmountValidation();
            }
        });
        qitems++
    });
});

$('body').on('click', '.ps_pkg_filter a', function (e) {
    e.preventDefault();
    $('.ps_pkg_filter a').removeClass('active');
    $(this).addClass('active');
    var aclass = $(this).attr('data-filter');
    pid = "#" + $(this).attr('data-pid') + " .ps_pkg_item." + aclass;
    if (aclass == "") {
        $(".ps_pkg_item").removeClass('hidden');
    } else {
        $(".ps_pkg_item").removeClass('hidden');
        $(pid).addClass('hidden');
    }

});

$('body').on('keyup', '.ps_pkg_search', function () {
    var sval = $(this).val().toLowerCase();

    pid = "#" + $(this).attr('data-pid');
    $(pid + ' .ps_pkg_item').addClass('hidden');
    $(pid + ' .ps_pkg_item').each(function () {
        var title = $(this).attr('data-title').toLowerCase();
        ;
        if (title.startsWith(sval) == true) {
            $(this).removeClass('hidden');
        }

    });
    /*if(aclass==""){
        $(".ps_pkg_item").removeClass('hidden');
    }else {
        $(".ps_pkg_item").removeClass('hidden');
        $(pid).addClass('hidden');
    }*/

});

//proposal_price_calculation();

function proposal_price_calculation() {
    var subtotal = 0;
    var total = 0;
    $('.quote_item').each(function () {
        var qty = $('.pqqty', this).val();
        mdiscoun = $('.mdiscoun', this).val();
        price = parseFloat($('.price', this).text()) * parseFloat(qty);
        total_price = $('.isubtotal', this).val();
        subtotal = parseFloat(price) + parseFloat(subtotal);
        total = parseFloat(total) + parseFloat(total_price);
        total = parseFloat(total).toFixed(2);
    });
    $('.proposal_sbttl').val(subtotal);
    $('.proposal_ttl').val(total);
}

$('body').on('change', '#agreement_picker', function () {
    var tempid = $(this).val();
    if (tempid != "") {
        $.ajax({
            type: 'POST',
            url: admin_url + 'proposaltemplates/get_agreement_for_prposal',
            data: 'tempid=' + tempid,
            success: function (result) {
                //tinymce.get('pagreement').setContent(result);
                CKEDITOR.instances.pagreement.setData(result);
            }
        });
    } else {
        //tinymce.get('pagreement').setContent("");
        CKEDITOR.instances.pagreement.setData("");
    }
    $(this).selectpicker('val', '');

});
$('body').on('click', '.search_toggle', function () {
    $(this).siblings('.ps_pkg_search').toggleClass('active');
});
$('body').on('change', '.pqqty', function () {
    var gpid = $(this).attr('data-pid');
    qty = $(this).val();
    price = $(gpid + " .price-col .price").text();
    mdiscount = $(gpid + " .mdiscoun").val() != "" ? $(gpid + " .mdiscoun").val() : 0;
    mdiscount = (parseFloat(price) * parseFloat(mdiscount)) / 100;
    qsubtotal = (parseFloat(price) + parseFloat(mdiscount)) * parseInt(qty);
    qsubtotal = (parseFloat(price) * parseFloat(qty)) + (parseFloat(mdiscount) * parseFloat(qty));
    if ($(gpid + " .tax-col").hasClass('taxable')) {
        var tax = $(gpid + " .tax-col").attr('data-taxrate');
        tax = (parseFloat(qsubtotal) * parseFloat(tax)) / 100;
        qsubtotal = (parseFloat(qsubtotal) + parseFloat(tax));
        $(gpid + " .itax").val(tax);
    }
    qsubtotal = parseFloat(qsubtotal).toFixed(2);
    $(gpid + " .qsubtotal").text(qsubtotal);
    $(gpid + " .isubtotal").val(qsubtotal);
    proposal_price_calculation();

});

$('body').on('click', '.proosal_file_remove', function (e) {
    e.preventDefault();
    var pid = $(this).attr('data-pid');
    id = $(this).attr('data-file');
    $(pid).remove();
    $.ajax({
        type: 'POST',
        url: admin_url + 'proposaltemplates/delete_file_image/' + id,
        success: function (result) {

        }
    });

});
$('body').on('click', '.quote_group_delete', function (e) {
    $('.table_actions').slideUp().removeClass('active');
    var pid = $(this).attr('data-pid');
    qid = $(this).attr('data-qid');
    url = "";
    if (qid > 0) {

        url = admin_url + "proposaltemplates/delete_quote_group/" + qid;
    }
    swal({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: 'Yes, delete it!',
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve, reject) {
                if (url == "") {
                    swal('Deleted!', '', '');
                    $(pid).remove();
                    proposal_price_calculation();
                } else {

                    $.ajax({
                        url: url,
                        type: 'get'
                    })
                        .done(function (response) {
                            if (response.indexOf(':') > -1) {
                                /**
                                 * Modified By : Vaidehi
                                 * Dt : 11/20/2017
                                 * to show correct message if delete operation is not successful
                                 */
                                swal('Oops...', response.substring(response.indexOf(':') + 1), 'warning');
                            } else {
                                swal('Deleted!', response.message, response.status);
                                $(pid).remove();
                                proposal_price_calculation();

                            }
                        })
                        .fail(function () {
                            swal('Oops...', 'Something went wrong !', 'error');
                        });
                }
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);

});

/*
    Added by Masud for Edit proposal group on 03-05-2018
*/
$('body').on('click', '.group_save', function (e) {
//$('.group_save').on('click',function(e){
    e.preventDefault();
    var gid = $(this).attr('data-gid');
    gname = $('#edit_group_popup_' + gid + ' .gname').val();
    gtype = $('#edit_group_popup_' + gid + ' .gtype').selectpicker('val');
    qid = $('#edit_group_popup_' + gid + ' .quote_id').val();
    vmsg = "";
    erorflag = 0;
    if (gname == "") {
        vmsg = '<p id="description-error" class="text-danger">Please Enter "Group Name".</p>';
        $('.gname').after(vmsg);
        erorflag = 1;
    } else {
        gdata = {'qid': qid, 'gname': gname};
        $.ajax({
            type: 'POST',
            url: admin_url + 'proposaltemplates/quote_group_name_exist/',
            data: gdata,
            success: function (result) {
                if (result > 0) {
                    vmsg = '<p id="description-error" class="text-danger">Group name already exist.</p>';
                    if ($('.gname').siblings('.text-danger').length < 1) {
                        $('.gname').after(vmsg);
                    }
                    erorflag = 1;
                } else {
                    $('.gname').siblings('.text-danger').remove();
                    if (gtype == "") {
                        vmsg = '<p id="description-error" class="text-danger">Please select "Group Type".</p>';
                        if ($('div.gtype').siblings('.text-danger').length < 1) {
                            $('div.gtype').after(vmsg);
                        }
                        erorflag = 1;
                    }
                    if (erorflag != 1) {
                        $('#group_' + gid + ' .quote_name').val(gname);
                        $('#group_' + gid + ' .quote_type').val(gtype);
                        $('#group_' + gid + ' .group_title').text(gname);
                        $('button.close').trigger('click');
                    }
                }
            }
        });
    }

});

$('body').on('click', '.hrow .fa', function (e) {
    $(this).toggleClass('fa-caret-up fa-caret-down');
    $(this).parent().siblings('.rowWrap').slideToggle();

});


//$('body').on('click', '#add_sign', function (e) {
$('#add_sign').click(function (e) {
    var signer_type = $('select.memberpicker').find(':selected').attr('data-id');
    var signer_id = $('select.memberpicker').find(':selected').val();
    counter_signer = 0;
    vmsg = '';
    /*if (signer_type == 'member') {*/
    cm = $('select.memberpicker').find(':selected').val();
    vmsg = '<p id="description-error" class="text-danger">Please select signer.</p>';
    cls = ".memberpicker";
    signer_designation = $('.signer_role').val();
    signer_fname = $('select.memberpicker').find(':selected').attr('data-fname');
    signer_lname = $('select.memberpicker').find(':selected').attr('data-subtext');
    if (signer_designation == "") {
        signer_designation = $('select.memberpicker').find(':selected').attr('data-designation');
    }
    if ($('#member .counter_signer').prop('checked') == true) {
        counter_signer = 1;
    }
    /*}*/
    /*else {
           vmsg = '<p id="description-error" class="text-danger">Please Select Client.</p>';
           cls = ".clientpicker";
           cm = $('select.clientpicker').val();
           signer_fname = $('select.clientpicker').find(':selected').attr('data-fname');
           signer_lname = $('select.clientpicker').find(':selected').attr('data-subtext');
           signer_designation = $('select.clientpicker').find(':selected').attr('data-designation');
           if ($('#client .counter_signer').prop('checked') == true) {
               counter_signer = 1;
           }
       }*/
    $('.signer_form p.text-danger').remove();
    var sid = 0;
    if ($('.single_signature').length > 0) {
        sid = $('.single_signature').length;
        //sid = sid + 1;
    }
    signer_data = {
        'id': sid,
        'name': signer_fname + " " + signer_lname,
        'designation': signer_designation,
        'counter_signer': counter_signer,
        'signer_type': signer_type,
        'signer_id': cm,
    };
    if (cm != "") {
        $.ajax({
            type: 'POST',
            url: admin_url + 'proposaltemplates/add_signer/',
            data: signer_data,
            success: function (result) {
                $('.signatures_list .rowWrap').append(result);
                $('.signer_role').val('');
                $('.counter_signer').prop('checked', false);
                $('.signatures_list .hrow span.hTxt').text($('.single_signature').length + " Items");
                $('.memberpicker option[value=' + signer_id + ']').not(this).prop('disabled', true);
                $(cls).selectpicker('refresh');
                $(cls).selectpicker('val', '');

            }
        });
    } else {
        if ($("select" + cls).siblings('.text-danger').length < 1) {
            $("select" + cls).after(vmsg);
        }
    }

});

/*$('.proosal_sign_remove').click(function (e) {*/
$('body').on('click', '.proosal_sign_remove', function (e) {
    var pid = $(this).attr('data-pid');
    var sid = $(this).attr('data-sid');
    $(pid).remove();
    $('.memberpicker option[value=' + sid + ']').not(this).prop('disabled', false);
    $('.signatures_list .hrow span.hTxt').text($('.single_signature').length + " Items");
    $('.selectpicker').selectpicker('refresh');

});

$('.payment_form_top').hide();
if ($('.payment-wrapper').length > 0) {
    $('.payment_form_top').show();
}
$('body').on('change', '#payment_picker', function (e) {
    var pmst_id = $(this).val();
    $(this).selectpicker('val', '');
    $.ajax({
        type: 'POST',
        url: admin_url + 'proposaltemplates/get_payment_schedule_template/' + pmst_id,
        /*data:'pmst_id='+pmst_id,*/
        success: function (result) {
            $('#payments #paymentschedule .content').remove();
            $('#payments #paymentschedule').append(result);
            $('.payment_templates').slideUp();
            $('.payment_form').slideUp();
            $('.payment_form_top').show();
            $(".selectpicker").selectpicker('refresh');
            init_datepicker();

        }
    });

});

$('body').on('click', '#payment-add', function (e) {
    var pmst_id = $(this).val();
    $.ajax({
        type: 'POST',
        url: admin_url + 'proposaltemplates/get_payment_schedule_template/' + pmst_id,
        /*data:'pmst_id='+pmst_id,*/
        success: function (result) {

            $('#payments #paymentschedule .content').remove();
            $('#payments #paymentschedule').append(result);
            $('.payment_templates').slideUp();
            $('.payment_form').slideUp();
            $(".selectpicker").selectpicker('refresh');
            $('.payment_form_top').show();

        }
    });

});

$('body').on('click', '.quote_group_copy', function (e) {
    $('.table_actions').slideUp().removeClass('active');
    var pid = $(this).attr('data-pid');
    qid = $(this).attr('data-qid');
    $.ajax({
        type: 'POST',
        url: admin_url + 'proposaltemplates/copy_quote_group/' + qid,
        success: function (result) {
            $('.quote_groups').append(result);
            $(".selectpicker").selectpicker('refresh');
            proposal_price_calculation();
            var index = $(".group").length - 1;
            $('html, body').animate({
                scrollTop: $("#group_" + index).offset().top
            }, 800);
        }
    });

});
$('.payment_templates').hide();
$('body').on('click', '.ptemplate', function (e) {
    $('.payment_templates').slideToggle();
});

/*---*/

$("#paymentschedule_template").validate(
    {
        ignore: [],
        rules: {
            pmt_sdl_name: {
                required: true,
                remote: {
                    url: site_url + "admin/misc/payment_title_exists",
                    type: 'post',
                    data: {
                        name: function () {
                            return $('input[name="pmt_sdl_name"]').val();
                        },
                        paymentscheduleid: function () {
                            return $('input[name="paymentscheduleid"]').val();
                        }
                    }
                }
            }
        }
    });
$("body").on('click', '.remove-payment', function () {
    $(this).parents(".payment-wrapper").remove();
    var ttl_pmnt = $('.payment-wrapper').length;
    $('.payment-grid .hrow span').text(ttl_pmnt + ' Payments');
});

$("body").on('click', 'a.payment-way', function () {
    $(this).parents(".payment-wrapper").find(".sub-payment-price-wrapper").hide();
    $(this).parents(".payment-wrapper").find(".sub-payment-method-wrapper").hide();
    $(this).parents(".payment-wrapper").find(".sub-payment-wrapper").toggle();
    $(this).parents(".payment-wrapper").find(".payment-price").removeClass("active");
    $(this).toggleClass("active");
});
$("body").on('click', 'a.payment-wrapper-price', function () {
    $(this).parents(".payment-wrapper").find(".sub-payment-wrapper").hide();
    $(this).parents(".payment-wrapper").find(".sub-payment-method-wrapper").hide();
    $(this).parents(".payment-wrapper").find(".sub-payment-price-wrapper").toggle();
    $(this).parents(".payment-wrapper").find(".payment-way").removeClass("active");
    $(this).toggleClass("active");
});

$("body").on('click', 'a.payment-method', function (e) {
    e.preventDefault();
    $(this).parents(".payment-wrapper").find(".sub-payment-wrapper").hide();
    $(this).parents(".payment-wrapper").find(".sub-payment-price-wrapper").hide();
    $(this).parents(".payment-wrapper").find(".sub-payment-method-wrapper").toggle();
    $(this).parents(".payment-wrapper").find(".payment-method").removeClass("active");
    $(this).toggleClass("active");
    $('i.fa', this).toggleClass("fa-sort-down fa-sort-up");
});

$("body").on('change', '.payment-data', function () {
    var payment_way = $(this).find("option:selected").text();
    $(this).parents(".payment-wrapper").find(".payment-way span").html(payment_way);
    if ($(this).val() == 'custom') {
        $(this).parents(".payment-wrapper").find(".custom-payment-wrapper").removeClass("hide");
        $(this).parents(".payment-wrapper").find(".duedate_date").addClass("hide");
    } else if ($(this).val() == 'fixed_date') {
        $(this).parents(".payment-wrapper").find(".duedate_date").removeClass("hide");
        $(this).parents(".payment-wrapper").find(".custom-payment-wrapper").addClass("hide");
    } else {
        $(this).parents(".payment-wrapper").find(".custom-payment-wrapper").addClass("hide");
        $(this).parents(".payment-wrapper").find(".duedate_date").addClass("hide");
    }
    return false;
});
$("body").on('change', '.amount-data', function () {
    if ($(this).val() == 'fixed_amount') {
        $(this).parents(".payment-wrapper").find(".custom-payment-price-wrapper .price_amount").val(0);
        $(this).parents(".payment-wrapper").find(".custom-payment-price-wrapper").removeClass("hide");
        $(this).parents(".payment-wrapper").find(".custom-payment-percentage-wrapper").addClass("hide");
        $(this).parents(".payment-wrapper").find(".payment-wrapper-price > span").html("$0.00");
    } else if ($(this).val() == 'percentage') {
        $(this).parents(".payment-wrapper").find(".custom-payment-price-wrapper").addClass("hide");
        $(this).parents(".payment-wrapper").find(".custom-payment-percentage-wrapper .price_percentage").val(0);
        $(this).parents(".payment-wrapper").find(".custom-payment-percentage-wrapper").removeClass("hide");
        $(this).parents(".payment-wrapper").find(".payment-wrapper-price > span").html("0%");
    } else {
        $(this).parents(".payment-wrapper").find(".custom-payment-price-wrapper").addClass("hide");
        $(this).parents(".payment-wrapper").find(".custom-payment-percentage-wrapper").addClass("hide");
        $(this).parents(".payment-wrapper").find(".payment-wrapper-price > span").html("Devide Equally");
    }
    return false;
});

$("body").on('keyup change', '.price_amount', function () {
    var payment_way = $(this).val();
    if (payment_way.length > 0) {
        $(this).parents(".payment-wrapper").find(".payment-wrapper-price > span").html("$" + payment_way);
    } else {
        $(this).parents(".payment-wrapper").find(".payment-wrapper-price > span").html("0");
    }
});
$("body").on('keyup change', '.price_percentage', function () {
    var payment_way = $(this).val();
    if (payment_way.length > 0) {
        $(this).parents(".payment-wrapper").find(".payment-wrapper-price > span").html(payment_way + "%");
    } else {
        $(this).parents(".payment-wrapper").find(".payment-wrapper-price > span").html("0%");
    }
});

function number_format(number, decimals, dec_point, thousands_sep) {
    // Strip all characters but numerical ones.
    number = (number + '').replace(/[^0-9+\-Ee.]/g, '');
    var n = !isFinite(+number) ? 0 : +number,
        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
        s = '',
        toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec);
            return '' + Math.round(n * k) / k;
        };
    // Fix for IE parseFloat(0.55).toFixed(0) = 0;
    s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
    if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
    }
    if ((s[1] || '').length < prec) {
        s[1] = s[1] || '';
        s[1] += new Array(prec - s[1].length + 1).join('0');
    }
    return s.join(dec);
}

/**/
$("body").on('click', '#add_more_payment, #payment-add-more', function () {
    var total_payments = $('.payment-body .payment-wrapper').length;
    payment_data = {
        'payment_index': total_payments,
        'duedate_types': duedate_types,
        'amount_types': amount_types,
        'duedate_criteria': duedate_criteria,
        'duedate_duration': duedate_duration
    }
    $.ajax({
        type: 'POST',
        url: admin_url + 'proposaltemplates/add_payment/',
        data: payment_data,
        success: function (result) {
            $(".payment-body").append(result);
            $(".selectpicker").selectpicker('refresh');
            var ttl_pmnt = $('.payment-wrapper').length;
            $('.payment-grid .hrow span').text(ttl_pmnt + ' Payments');
            init_datepicker();
        }
    });
});
$("body").on('change', 'select.payment_method_val', function () {
    var pmt = $(this).val();
    pid = "#" + $(this).attr('data-pid');
    pmt = pmt.toUpperCase();
    $(pid + ' .payment-method span').text(pmt);

});
$("body").on('change', '.proposal-template .checkbox.remove_proposal_section', function () {
    var finished = $(this).prop('checked') === true ? 1 : 0;
    pid = $(this).attr('data-pid');
    bl_pid = pid + "_step";
    $(pid).toggleClass('removed_section');
    $(bl_pid).toggleClass('disbaled');
    //$(pid+' .section_body').slideToggle();
});

/*$("body").on('change', '.pl_inner input[name="proposal_issued"]', function(){
    var issued_date = $(this).val();
    $('.pl_inner input[name="proposal_valid_until"]').attr('data-date-min-date',issued_date);
    $('.pl_inner input[name="proposal_valid_until"]').datetimepicker('reset');
    var opt = {
        timepicker: false,
        scrollInput: false,
        lazyInit: true,
        format: app_date_format,
        dayOfWeekStart: app_calendar_first_day,
    };
    if (issued_date) {
        opt.minDate = issued_date;
    }
// Init the picker
    $('.pl_inner input[name="proposal_valid_until"]').datetimepicker(opt);


});*/
/*
var opt = {
    timepicker: false,
    scrollInput: false,
    lazyInit: true,
    format: app_date_format,
    dayOfWeekStart: app_calendar_first_day,
};
$('.pl_inner input[name="proposal_issued"]').datetimepicker(opt);
$('.pl_inner input[name="proposal_valid_until"]').datetimepicker(opt);

$('body').on('.pl_inner input[name="proposal_issued"]', function (e) {
    var issued_date = $(this).val();
    opt.minDate = issued_date;
    $('.pl_inner input[name="proposal_valid_until"]').datetimepicker(opt);
});
$('body').on('.pl_inner input[name="proposal_valid_until"]', function (e) {
    var valid_date = $(this).val();
    opt.maxDate = valid_date;
    $('.pl_inner input[name="proposal_issued"]').datetimepicker(opt);
});*/

/*$("body").on('change', '.pl_inner input[name="issued_date"]', function(){
    var issued_date = $(this).val();
    $('.pl_inner input[name="valid_date"]').attr('data-date-min-date',issued_date);
    init_datepicker();

});*/

/*
$('.preview').click( function (e) {
    e.preventDefault();
    var userData = $('#proposal-form').serialize();
    $.ajax({
        type: "POST",
        url:admin_url + 'proposaltemplates/preview/',
        data: userData,
        success: function(result){
            var win = window.open(window.location.href+"?preview=true");
            win.document.write(result);
        }
    });

});*/
$(window).scroll(function () {
    var sticky = $('.proposal_overview'),
        scroll = $(window).scrollTop();

    if (scroll >= 300) {
        sticky.addClass('fixed');
        $('div#top.fixed').removeClass('hidden');
    } else {
        sticky.removeClass('fixed');
        $('div#top.fixed').addClass('hidden');
    }
});

$("body").on('change', '#proposal-form input', function () {
    $('a.preview').addClass('disabled');
});

$("body").on('click', 'div#top.fixed', function () {
    $('html, body').animate({
        scrollTop: $('#wrapper').offset().top
    }, 800, function () {
        //window.location.hash = hash;
    });
});

/*$("body").on('change', 'select.proposal_template', function(){
    var ptemplate = $(this).val();
    $(this).selectpicker('val','');
    $.ajax({
        type:'POST',
        url:admin_url + 'proposaltemplates/proposal/'+ptemplate,
        success:function(result){
            $(".editPro-block").append(result);
            $(".selectpicker").selectpicker('refresh');
        }
    });

});*/

/*$("body").on('click', '.add_signature', function () {
    var sid = $(this).attr('data-sid');
    $("#signature_" + sid + " .upload_sign").trigger('click');
});*/

function readURL(input, id) {
    if (input.files && input.files[0]) {
        var reader = new FileReader();
        reader.onload = function (e) {
            $('#simage_' + id).attr('src', e.target.result);
            $("#simage_" + id).removeClass('hidden');
            $("#simage_span_" + id).hide();
            $("#signatures_" + id).val(input.files[0].name);
            total_signer = $('.single_signature').length;
            total_signed = $('.total_signed').val();
            if (total_signed < total_signer) {
                total_signed = parseInt(total_signed) + 1;
            }
            $('.total_signed').val(total_signed);
        };
        reader.readAsDataURL(input.files[0]);
    }
}

origForm = $('#proposal-form').serialize();
$("body").on('change', '.select_item', function () {
    var gid = $(this).attr('data-gid');
    pid = $(this).attr('data-pid');
    gtype = $(this).attr('data-gtype');
    if (gtype == 1) {
        $(gid + " .quote_item ").removeClass('selected');
        $(gid + " " + pid).addClass('selected');
    } else {
        if ($(this).prop('checked') == true) {
            $(gid + " " + pid).addClass('selected');
        } else {
            $(gid + " " + pid).removeClass('selected');
        }
    }
    final_proposal_price_calculation();
    selected_services();
});
final_proposal_price_calculation();

function final_proposal_price_calculation() {
    var subtotal = 0.00;
    total = 0.00;
    originaltotal = 0.00;
    tax = 0.00;
    mkpdiscount = 0.00;
    markup = 0.00;
    discount = 0.00;
    $('.quote_item.selected').each(function () {
        var qty = $('.spqqty', this).val();
        mdiscoun = $(".markup_disc", this).attr('data-mdiscount') != "" ? $(".markup_disc", this).attr('data-mdiscount') : 0.00;

        mdiscountype = $(".markup_disc", this).attr('data-mdistype') != "" ? $(".markup_disc", this).attr('data-mdistype') : "percentage";
        mdisctype = $(".markup_disc", this).attr('data-type') != "" ? $(".markup_disc", this).attr('data-type') : "discount";
        price = parseFloat($('.price.price-col', this).attr('data-price')) * parseFloat(qty);
        cextra = parseFloat($('.price.price-col', this).attr('data-cextra')) * parseFloat(qty);
        price = parseFloat(price) + parseFloat(cextra);
        originlprice = parseFloat($('.price.price-col', this).attr('data-originlprice')) * parseFloat(qty);
        total_price = (parseFloat($('.isubtotal', this).val())/*+ parseFloat(cextra)*/).toFixed(2);
        //$('.qsubtotal', this).text(total_price);
        subtotal = parseFloat(total_price) + parseFloat(subtotal);
        originaltotal = parseFloat(price) + parseFloat(originaltotal);
        /*if (subtotal % 1 != 0) {*/
        subtotal = parseFloat(subtotal).toFixed(2);
        /*}*/
        total = parseFloat(total) + parseFloat(total_price);
        /*if (total % 1 != 0) {*/
        total = parseFloat(total).toFixed(2);
        /*}*/
        if (mdiscountype == "percentage") {
            mdiscount = (parseFloat(originlprice) * parseFloat(mdiscoun)) / 100;
        } else {
            mdiscount = mdiscoun;
        }
        mdiscount = $(".imkpdisc", this).val() * qty;
        mkpdiscount = parseFloat(mkpdiscount) + parseFloat(mdiscount);
        if (mdisctype == "markup") {
            markup = markup + mkpdiscount;
        } else {
            discount = discount + mkpdiscount;
        }

        /*if (mkpdiscount % 1 != 0) {*/
        mkpdiscount = parseFloat(mkpdiscount).toFixed(2);
        /*}*/
        if ($(".tax-col", this).hasClass('taxable')) {
            var taxrate = $(".tax-col", this).attr('data-taxrate');
            qsubtotal = (parseFloat(price) + parseFloat(mdiscount));
            qtax = (parseFloat(qsubtotal) * parseFloat(taxrate)) / 100;
            tax = parseFloat(tax) + parseFloat(qtax);
            tax = parseFloat(tax).toFixed(2);
            qsubtotal = parseFloat(qsubtotal).toFixed(2);
        }
    });
    if ($('.potherdisc').length > 0) {
        var otherdiscpercent = 0.00;
        var otherdiscamount = 0.00;
        var otherdisc = $('.proposal_othedisc').attr('data-val');
        otherdisctype = $('.proposal_othedisc').attr('data-valtype');
        if (otherdisctype == "amount") {
            total = parseFloat(total) - parseFloat(otherdisc);
            otherdiscamount = otherdisc;
            otherdiscpercent = (parseFloat(otherdisc) * 100) / (parseFloat(originaltotal) + parseFloat(mkpdiscount));
        } else {
            otherdiscpercent = otherdisc;
            otherdisc = ((parseFloat(originaltotal) + parseFloat(mkpdiscount)) * parseFloat(otherdisc)) / 100;
            total = parseFloat(total) - parseFloat(otherdisc);
            otherdiscamount = otherdisc;
        }
        otherdiscamount = parseFloat(otherdiscamount).toFixed(2);
        if (otherdiscpercent % 1 != 0) {
            otherdiscpercent = parseFloat(otherdiscpercent).toFixed(2);
        }
    }

    if ($('.pother').length > 0) {
        var otherval = $('.proposal_otherval').attr('data-val');
        total = parseFloat(total) + parseFloat(otherval);
    }
    total = parseFloat(total).toFixed(2);
    $('.proposal_sbttl').val(subtotal);
    $('.proposal_ttl').val(total);
    $('.proposal_discount').val(mkpdiscount);
    $('.proposal_tax').val(tax);
    label = "Discount";
    if (mkpdiscount < 0) {
        str = mkpdiscount.toString();
        mkpdiscount = str.replace('-', '$');
        label = "Discount";
    } else {
        if (mkpdiscount > 0) {
            label = "Markup";
        }
        mkpdiscount = "$" + mkpdiscount;
    }
    originaltotal = parseFloat(originaltotal).toFixed(2);
    $('#discount_amount').val(otherdiscamount);
    $('#discount_percent').val(otherdiscpercent);

    $('.proposal_sbttl').text('$' + subtotal);
    $('.proposal_orgttl').text('$' + originaltotal);
    $('.proposal_ttl').text('$' + total);
    $('.proposal_discount').text(mkpdiscount);
    $('.proposal_tax').text('$' + tax);
    $('.discamount').text(otherdiscamount);
    $('.discpercent').text(otherdiscpercent);
    $('.mkpdiosc_label').text(label);
    $('.selected_item').text($('.quote_item.selected').length + " Selected");


}

$('body').on('change', '.spqqty', function () {
    if ($(this).val() <= 0) {
        $(this).val(1);
    }
    var gpid = $(this).attr('data-pid');
    qty = $(this).val();
    qsubtotal = ($(gpid + " .isubtotal").val()) * qty;
    price = $(gpid + ' .price.price-col').data('originlprice');
    extraToadd = $(gpid + ' .price.price-col').data('cextra');
    extraToadd = 0.00;
    if ($(gpid + ' select.quote_item_option').length > 0) {
        $(gpid + " .checkbox.quote_item_option:checked").each(function () {
            checkbox_val = $(this).data('price');
            extraToadd = parseFloat(checkbox_val) + parseFloat(extraToadd);
        });
    }
    if ($(gpid + ' select.quote_item_option').length > 0) {
        $(gpid + ' select.quote_item_option').each(function () {
            choice_val = $(this).find(':selected').data('price');
            extraToadd = parseFloat(choice_val) + parseFloat(extraToadd);
        });
    }
    if ($(gpid + ' .radio.quote_item_option').length > 0) {
        $(gpid + " .radio.quote_item_option:checked").each(function () {
            radio_val = $(this).data('price');
            extraToadd = parseFloat(radio_val) + parseFloat(extraToadd);
        });
    }
    quote_item_price_calculation(gpid, extraToadd);

    /*price = $(gpid + " .price.price-col").attr('data-price');
    mdiscount = $(gpid + " .markup_disc").attr('data-mdiscount') != "" ? $(gpid + " .markup_disc").attr('data-mdiscount') : 0;
    mdiscount = (parseFloat(price) * parseFloat(mdiscount)) / 100;
    qsubtotal = (parseFloat(price) + parseFloat(mdiscount)) * parseInt(qty);
    if ($(gpid + " .tax-col").hasClass('taxable')) {
        var tax = $(gpid + " .tax-col").attr('data-taxrate');
        tax = (parseFloat(qsubtotal) * parseFloat(tax)) / 100;
        qsubtotal = (parseFloat(qsubtotal) + parseFloat(tax));
        $(gpid + " .itax").val(tax);
    }*/
    /*qsubtotal = qsubtotal.toFixed(2);
    $(gpid + " .qsubtotal").text(qsubtotal);
    $(gpid + " .isubtotal").val(qsubtotal);
    $(gpid + " .imkpdisc").val(mdiscount);*/
    final_proposal_price_calculation();
    count_invoice_amount();

});

/*$('body').on('change','select.proposal_template_picker', function(){
    var templateid = $(this).val();
    $(this).selectpicker('val','');
    var current_template =$('input[name=proposaltemplateid]').val();
    var temp_data = {'template_id':templateid,'current_template':current_template}
    $.ajax({
        type:'POST',
        url:admin_url + 'proposaltemplates/use_template/',
        data:temp_data,
        success:function(result){
            var url =admin_url+"proposaltemplates/proposal/"+result;
            window.location.href=url;
        }
    });
});*/
function use_proposal_template(template, link) {
    var templateid = $(template).val();
    $(template).selectpicker('val', '');
    var current_template = $('input[name=proposaltemplateid]').val();
    var temp_data = {'template_id': templateid, 'current_template': current_template};
    $.ajax({
        type: 'POST',
        url: admin_url + 'proposaltemplates/use_template/' + link,
        data: temp_data,
        success: function (result) {
            var url = admin_url + "proposaltemplates/proposal/" + result + link;
            window.location.href = url;
        }
    });
}

$('body').on('change', '.recurring_payment_form_inner input.form-control, .recurring_payment_form_inner select.form-control', function () {
    if ($(this).val() != "") {
        $(this).siblings('.text-danger').remove();
    }
});
$('body').on('click', '#add_recurrence', function (e) {
    e.preventDefault();
    var rec_name = $('.recurring_name').val();
    rec_bill_type = $('select.recurring_bill_type').val();
    rec_no_of_week_mnth = $('.no_of_week_mnth').val();
    rec_start_date = $('.recurring_start_date').val();
    rec_end_date = $('.recurring_end_date').val();
    rec_no = $('.no_of_recurrence').val();
    rec_id = $('.rec_id').val();
    error_msg = "";
    error_flag = 0;
    if (rec_name == "") {
        error_msg = '<p id="name-error" class="text-danger">Please provide required information.</p>';
        if ($('.recurring_name').siblings('.text-danger').length <= 0) {
            $('.recurring_name').after(error_msg);
        }
        error_flag++;
    }
    if (rec_bill_type == "") {
        error_msg = '<p id="type-error" class="text-danger">Please provide required information.</p>';
        if ($('select.recurring_bill_type').siblings('.text-danger').length <= 0) {
            $('select.recurring_bill_type').after(error_msg);
        }
        error_flag++;
    }
    if (rec_no_of_week_mnth == "") {
        error_msg = '<p id="nowk-error" class="text-danger">Please provide required information.</p>';
        if ($('.no_of_week_mnth').siblings('.text-danger').length <= 0) {
            $('.no_of_week_mnth').after(error_msg);
        }
        error_flag++;
    }
    if (rec_start_date == "") {
        error_msg = '<p id="stdate-error" class="text-danger">Please provide required information.</p>';
        if ($('.recurring_start_date').siblings('.text-danger').length <= 0) {
            $('.recurring_start_date').after(error_msg);
        }
        error_flag++;
    }
    if (rec_end_date == "" && rec_no == "") {
        error_msg = '<p id="" class="text-danger">Please Enter End Date OR Number Of Recurrences </p>';
        if ($('.stdate_no_rec').children('.text-danger').length <= 0) {
            $('.stdate_no_rec').append(error_msg);
        }
        error_flag++;
    } else {
        $('.stdate_no_rec .text-danger').remove();
        /*if(rec_end_date==""){
            rec_end_date="";
            if(rec_bill_type=="weekly"){
                total_days = (rec_no*rec_no_of_week_mnth*7)-1;
            }else {
                total_days = (rec_no*rec_no_of_week_mnth*30)-1;
            }
            total_milisec = total_days*1000 * 60 * 60 * 24;
            rec_end_date = parseInt(rec_start_date.getTime())+parseInt(total_milisec);
            rec_end_date = new Date(rec_end_date);
            end_date_day = rec_end_date.getDate();
            end_date_month = rec_end_date.getMonth()+1;
            end_date_year = rec_end_date.getFullYear();
            alert(end_date_month+"/"+end_date_day+"/"+end_date_year);
        }else {
            var WEEK = 1000 * 60 * 60 * 24 * 7;
            date1 = new Date(rec_start_date);
            date2 = new Date(rec_end_date);
            if(rec_bill_type=="weekly"){
                date1ms = date1.getTime();
                date2ms = date2.getTime();
                diff = Math.abs(date2ms - date1ms);
                rec_no = Math.ceil(diff / WEEK)/parseInt(rec_no_of_week_mnth);
                rec_no =Math.ceil(rec_no);
            }else {
                var months = 0;
                year = (rec_end_date.getFullYear() - rec_start_date.getFullYear()) ;
                if(year > 0 ){
                    months = year* 12;
                }
                months -= rec_start_date.getMonth();
                months += rec_end_date.getMonth()+1;
                rec_no = months/parseInt(rec_no_of_week_mnth);
            }
        }*/
    }
    if (error_flag == 0) {
        var pmtsdl_data = {
            "rec_id": rec_id,
            "rec_name": rec_name,
            "rec_bill_type": rec_bill_type,
            "rec_no_of_week_mnth": rec_no_of_week_mnth,
            "rec_start_date": rec_start_date,
            "rec_end_date": rec_end_date,
            "rec_no": rec_no
        }
        $.ajax({
            type: 'POST',
            url: admin_url + 'proposaltemplates/rec_payment/',
            data: pmtsdl_data,
            success: function (result) {
                $('#payments #paymentschedule .payment-grid').remove();
                $('#payments #paymentschedule').append(result);
                $('button.close').trigger('click');
                $('.payment_options').hide();
            }

        });
    }

});
$('body').on('click', '.markup_disc, .markup_disc_remove', function () {
    var pid = $(this).attr('data-pid');
    $(pid + ' .markup_disc i').toggleClass('fa-caret-down fa-caret-up');
    $(pid + " .mkpdiosc_container").slideToggle();
});

$('body').on('click', '.single_signature.disabled', function () {
    alert_float('warning', "Sorry! You can not sign proposal until other members singed.")
});
$('body').on('submit', '#proposal-form', function (e) {
    if ($('#pmt_sdl_name').length > 0 && $('#pmt_sdl_name').val() == "") {
        $('.proposal_save').prop('disabled', false);
        e.preventDefault();
        $('#pmt_sdl_name').focus();
        $('.pmt-sdl-name').addClass('has-error');
    }
});

$('.dashboard-page .loadless').hide();
var items = 5;
var widgets = ['contacts', 'pinned_item', 'task_list', 'messages', 'upcoming_project'];
//var widgets=['pinned_item'];
$(widgets).each(function (key, val) {
    var pid = val;
    if (pid == "task_list" || pid == "messages") {
        items = $("#" + pid + "_data").attr('data-item');
        $("." + pid).slice(0, items).show();
    } else {
        $('#' + pid + '_widget .tab-pane').each(function () {
            items = $(this).attr('data-item');
            $("." + pid, this).slice(0, items).show();
            var current_count = $('.loadMore span', this).text();
            current_count = $("." + pid, this).length;
            var newcount = current_count - items;
            if (newcount < 0) {
                newcount = 0;
            }
            $('.loadMore span', this).text(newcount);
        });
    }
});
$('.dashboard-page .loadMore').on('click', function (e) {
    e.preventDefault();
    var pid = $(this).attr('data-pid');
    items = $(this).attr('data-item');
    widget = $(this).attr('data-widget');
    if ($(pid + " ." + widget).length > items) {
        $(pid + " .loadless").show();
    }
    $(pid + " ." + widget + ":hidden").slice(0, items).addClass('less');
    $(pid + " ." + widget + ":hidden").slice(0, items).slideDown();
    var current_count = $('span', this).text();
    current_count = $(pid + " ." + widget + ":hidden").length;
    //var newcount =current_count-items;
    if (current_count <= 0) {
        $(this).hide();
    }
    $('span', this).text(current_count);
});
$('.dashboard-page .loadless').on('click', function (e) {
    e.preventDefault();
    items = $(this).attr('data-item');
    var pid = $(this).attr('data-pid');
    widget = $(this).attr('data-widget');
    $(pid + " ." + widget + ".less").slideUp();
    $(pid + " ." + widget).removeClass('less');
    var current_count = $(pid + " ." + widget).length;
    var newcount = current_count - items;
    if (newcount < 0) {
        newcount = 0;
    }
    $(pid + " .loadMore span").text(newcount);
    $(pid + " .loadMore").show();
    $(this).hide();
});

$('#dashboard_calender_list_form').submit(function (e) {

    var calender_list_type = $('input[name=calender_list]:checked').val();
    var curr_date = $('#current_date').val();
    //$('input[name=calender_list]').prop('checked','false').checkboxradio("refresh");
    if (calender_list_type == 'task') {
        window.location = admin_url + "tasks/task?pg=home&due_dt=" + curr_date;
        return false;
    } else if (calender_list_type == 'meeting') {
        window.location = admin_url + "meetings/meeting?pg=home&from_dt=" + curr_date;
        return false;
    } else if (calender_list_type == 'lead') {
        window.location = admin_url + "leads/lead?pg=home&start_dt=" + curr_date;
        return false;
    } else if (calender_list_type == 'invoice') {
        window.location = admin_url + "invoices/invoice?pg=home&date=" + curr_date;
        return false;
    } else {
        window.location = admin_url + "projects/project?pg=home&start_dt=" + curr_date;
        return false;
    }
});
/*
$('.widget_setting').click(function(e){
    e.preventDefault();
    var current_val = $(this).attr("data-index");
    var curr_id = $(this).attr("data-user");
    var hide =0;
    if($('input#upcoming_project').prop('checked')==true){
        hide =1;
    }
    $.ajax({
        type: "POST",
        url: admin_url + "home/dashboard_widget_setting",
        async: true,
        data: { hidden:hide,tagid:curr_id,currentval:current_val }
    }).done(function(){
        location.reload();
    }) ;
});*/
$('.duplicate_action_button').on('click', function () {
    edate = $(this).attr('data-date');
    $('#current_date').val(edate);
});

/**
 * Added By: Vaidehi
 * Dt: 04/24/2018
 * for calendar event source
 */
var calendar_filtersource = {
    url: admin_url + 'calendar/get_calendar_data',
    data: function () {
        var filterParams = {};
        $('#calendar_filters').find('input:checkbox:checked').map(function () {
            filterParams[$(this).attr('name')] = true;
        }).get();
        if (!jQuery.isEmptyObject(filterParams)) {
            filterParams['calendar_filters'] = true;
            return filterParams;
        }
    },
    type: 'POST',
    error: function () {
        console.error('There was error fetching calendar data');
    },
};

/**
 * Added By: Masud
 * Dt: 04/20/2018
 * to show filter buttons after month, week button
 */
$('#calendar_filters').wrap("<p></p>");
var filter = $('#calendar_filters').parent('p').html();
$('#calendar_filters').unwrap();
$('#calendar_filters').remove();
setTimeout(function () {
    $('#calendar .fc-toolbar').after(filter);

    //Added by Vaidehi on 04/24/2018 to display data on calendar based on selected filter
    if ($('#calendar').children().length > 0) {
        $('#calendar').fullCalendar('addEventSource', calendar_filtersource);
    }
}, 3000);

//Added by Vaidehi on 04/24/2018 to display data on calendar
if ($('#calendar').children().length > 0) {
    $('#calendar').fullCalendar('addEventSource', calendar_filtersource);
}

$('body').on('click', '.show_act', function () {
    if ($(this).parent().siblings('.table_actions').hasClass('active') == true) {
        $(this).parent().siblings('.table_actions').removeClass('active');
        $(this).parent().siblings('.table_actions').slideUp(100);
    } else {
        $('.table_actions').slideUp(100);
        $('.table_actions').removeClass('active');
        $(this).parent().siblings('.table_actions').addClass('active');
        $(this).parent().siblings('.table_actions').slideDown(100);
    }
});
/*$('body').on('click', function () {
    if ($('.table_actions').hasClass('active') == true) {
        $('.table_actions').removeClass('active');
        $('.table_actions').slideUp(100);
    }
});*/
$('body').on('click', '.filter_btn', function () {
    $('#leads-table, #projects-table, #tasks-table, #invoices-table').toggleClass('filter_in');
});

$('body').on('click', '.quote_group_edit', function (e) {
    $('.table_actions').slideUp().removeClass('active');
});

$('body').on('change', '.sdtheme input[type=checkbox]', function () {
    if ($(".sdtheme :checkbox:checked").length > 0) {
        $('.bulk_act_btn').addClass('on');
    } else {
        $('.bulk_act_btn').removeClass('on');
    }
});
$('body').on('change', '#mass_select_all', function () {
    if ($(this).prop('checked') == true) {
        $('.bulk_act_btn').addClass('on');
    } else {
        $('.bulk_act_btn').removeClass('on');
    }
});

$('body').on('click', '.filter_btn', function () {
    $(this).toggleClass("selected");
});

$('body').on('click', '.page_save', function () {
    var id = $(this).attr('data-id');
    pid = $(this).attr('data-pid');
    page_name = $(id + ' .page_name').val();
    $("#" + pid + " span").text(page_name);
    $("." + pid).val(page_name);
    $('.close').trigger('click');

});
//setTimeout(function () {$("li.kanban-card").slice(0, 3).show();}, 5000);

$('body').on('click', 'a.kan-ban-exp-clps', function () {
    var pid = $(this).attr('data-pid');
    $('i', this).toggleClass('fa-caret-down fa-caret-up');
    $(pid + " .leads-status").toggleClass('show');
    $(pid + " .projects-status").toggleClass('show');
    $(pid + " .tasks-status").toggleClass('show');

});

$('body').on('change', '.chk_status', function () {
    var sid = "#status_" + $(this).val();
    if ($(this).prop('checked') == true) {
        $(sid + ' input[type="checkbox"]').prop('checked', true);
    } else {
        $(sid + ' input[type="checkbox"]').prop('checked', false);
    }
});

$('body').on('change', '.chk_status, .kan-ban-content input[type="checkbox"]', function () {
    if ($(".kan-ban-content :checkbox:checked").length > 0) {
        $('.bulk_act_btn').addClass('on');
    } else {
        $('.bulk_act_btn').removeClass('on');
    }
});

$('body').on('click', '.expnd_cllps', function () {
    var pid = $(this).attr('data-pid');
    $('i', this).toggleClass('fa-caret-up fa-caret-down');
    $(pid + ' .panel_s > div ').slideToggle();

});

function preview_banner(input) {
    var extension = input.files[0].name.substr((input.files[0].name.lastIndexOf('.') + 1));
    if (input.files && input.files[0]) {
        var reader = new FileReader();
        reader.onload = function (e) {
            if (extension == 'jpg' || extension == 'jpeg' || extension == 'png' || extension == 'gif') {
                $(input).parent().siblings('.imageview').children('img').attr('src', e.target.result);
                $(input).parent('.clicktoaddimage').addClass('hidden');
                $(input).parent().siblings('.imageview').removeClass('hidden');
                readFile(this);
            }
        };
        reader.readAsDataURL(input.files[0]);
    }
}

function preview_profile(input, type) {
    var extension = input.files[0].name.substr((input.files[0].name.lastIndexOf('.') + 1));
    if (input.files && input.files[0]) {
        var reader = new FileReader();
        reader.onload = function (e) {
            if (extension == 'jpg' || extension == 'jpeg' || extension == 'png' || extension == 'gif') {
                $(input).parent().siblings('.' + type + '_imageview').children('img').attr('src', e.target.result);
                $(input).parent('.clicktoaddimage').addClass('hidden');
                /*$(input).parent().siblings('.profile_imageview').removeClass('hidden');
                $(input).parent().siblings('.proposal_imageview').removeClass('hidden');*/
            }
        };
        reader.readAsDataURL(input.files[0]);
    }
}

/*$('a.clicktoaddimage').click(function () {
    $(this).parent().siblings().children('input[type=file]').trigger('click');
});*/

$('body').on('click', '#save_name', function () {
    var pname = $('.proposal_name').val();
    $('.proposal_tittle').text(pname);
    $('#proposal_name').val(pname);
    $('.close').trigger('click');
});


//$('body').on('click', '.token_btn', function () {
$('.token_btn').click(function () {
    var pid = $(this).attr('data-pid');
    $('i', this).toggleClass('fa-caret-up fa-caret-down');
    $(pid + ' .token_groups ').slideToggle();
    $(".token_groups a").removeClass('active');
    $(".tag-group-container").slideUp();

});
$(".token_groups a").click(function () {
    var curr_val = ".tags_" + $(this).attr('data-pid');
    if ($(this).hasClass('active')) {
        $(this).removeClass('active');
        $(".tag-group-container").slideUp();
    } else {
        $(".token_groups a").removeClass('active');
        $(this).addClass('active');
        $(".tag-group-container").hide();
        $(".tag-group-container" + curr_val).slideDown();
    }

});

count_invoice_amount();

function count_invoice_amount() {
    var ptotal = $('.proposal_ttl').val();
    var totalpayments = nopayments = $('.payment-wrapper').length;
    var remaining_amount = ptotal;
    var count = 1;
    pamount = 0;
    changeamount = 0;
    $('.payment-wrapper').each(function () {
        var pid = $(this).attr('data-pid');
        if ($(this).hasClass('paid')) {
            paidamount = $('.payment-price .price_amount', this).val();
            remaining_amount = parseFloat(remaining_amount) - parseFloat(paidamount);
            $('.payment-price span', this).text(paidamount);
            $('.payment-price .price_amount', this).val(paidamount);
            $('#payment-' + pid).text("$" + paidamount);
        } else {
            var amount_data = $('.amount-data option:selected', this).val();
            if (amount_data == "divide_equally") {
                pamount = remaining_amount / totalpayments;
                remaining_amount = remaining_amount - pamount
            }
            if (amount_data == "fixed_amount") {
                var fixed_amount = $('.price_amount', this).val();
                if (count == nopayments) {
                    pamount = remaining_amount;
                } else {
                    pamount = fixed_amount;
                }
                remaining_amount = remaining_amount - pamount
            }
            if (amount_data == "percentage") {
                var percent_amount = $('.price_percentage', this).val();
                fixed_amount = (percent_amount * remaining_amount) / 100;
                if (count == nopayments) {
                    pamount = remaining_amount;
                } else {
                    pamount = fixed_amount;
                }
                remaining_amount = remaining_amount - pamount
            }
            if (pamount < 0 || isNaN(pamount)) {
                pamount = 0;
            }
            if (pamount % 1 != 0) {
                changeamount += pamount % 1;
                pamount = pamount - pamount % 1;
                if (totalpayments == 1) {
                    pamount = pamount + changeamount;
                }
                pamount = parseFloat(pamount).toFixed(2);
            }
            $('.payment-price span', this).text(pamount);
            $('.payment-price .price_amount', this).val(pamount);
            $('#payment-' + pid).text("$" + pamount);
        }
        totalpayments--;
        count++;
    });
}

$('body').on('change', '.select_item, .price_amount, .amount-data, .price_percentage', function () {
    setTimeout(function () {
        count_invoice_amount();
    }, 1000);
});


$('.dashboard_action_button').on('click', function () {
    $('input:radio[name=calender_list]:checked').prop('checked', false);
});

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}

/**
 * Added By: Masud
 * Dt: 06/21/2018
 * for pinned Meeting
 */
$('body').on('click', 'table.dataTable tbody .meeting-pin, .meeting-pin', function () {
    var meeting_id = $(this).attr('meeting_id');
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("meetings"));
    $.ajax({
        type: 'POST',
        data: {
            meeting_id: meeting_id
        },
        url: shortUrl + "meetings/pinmeeting"
    }).done(function (response) {
        if (response == 1) {
            $('#' + meeting_id).addClass('pinned');
            alert_float('success', 'Meeting is Pined to Home');
        } else {
            $('#' + meeting_id).removeClass('pinned');
            alert_float('success', 'Meeting is Unpined from Home');
        }
    });
});

/**
 * Added By: Masud
 * Dt: 06/27/2018
 * for pinned Invoice
 */
$('body').on('click', 'table.dataTable tbody .invoice-pin, .invoice-pin', function () {
    var invoice_id = $(this).attr('invoice_id');
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("invoices"));
    $.ajax({
        type: 'POST',
        data: {
            invoice_id: invoice_id
        },
        url: shortUrl + "invoices/pininvoice"
    }).done(function (response) {
        if (response == 'added') {
            $('#' + invoice_id).addClass('pinned');
            alert_float('success', 'Invoice is Pined to Home');
        } else {
            $('#' + invoice_id).removeClass('pinned');
            alert_float('success', 'Invoice is Unpined from Home');
        }
    });
});

$(".invite_tab").click(function () {
    $(".invite_tab").removeClass('active');
    $(this).addClass('active');
    var status = $(this).attr('data-status');
    $('#invite_status').val(status);
    invites_kanban();
});

$(".proposal_tab.card").click(function () {
    $(".proposal_tab.card").removeClass('active');
    $(this).addClass('active');
    var status = $(this).attr('data-status');
    $('#invite_status').val(status);
    proposals_kanban();
});

$(".proposal_tab.list").click(function () {
    $(".proposal_tab.list").removeClass('active');
    $(this).addClass('active');
    var status = $(this).attr('data-status');
    var notSortable = $('.table-proposaltemplates').find('th').length - 1;
    var url = window.location.href;
    url = updateQueryStringParameter(url, 'status', status);
    //initDataTable('.table-proposaltemplates', url, [2], [1, notSortable],"undefined", [2, 'DESC']);
    $('.table-proposaltemplates').DataTable().ajax.url(url).load();
});


/**
 * Added By : Vaidehi
 * Dt : 02/21/2018
 * to mark venue as favorite
 */
$('body').on('click', '#kan-ban .venue-fav', function () {
    var venue_id = $(this).attr('venue_id');
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("venues"));
    $.ajax({
        type: 'POST',
        data: {
            venue_id: venue_id
        },
        url: shortUrl + "venues/favorite"
    }).done(function (response) {
        if (response == 'added') {
            alert_float('success', 'Venues is marked to favourites');
        } else {
            alert_float('success', 'Venues is unmarked from favourites');
        }
        venues_kanban();
    });
});

$('body').on('click', '.favourite_label', function () {
    $('i', this).toggleClass('fa-star fa-star-o');
});

$('body').on('click', '.process-step', function () {

    $('.process-step h3.bold').addClass('brdcolor');
    $('h3.bold', this).removeClass('brdcolor');
});

$('body').on('click', '.exp_clps_address', function () {

    var pid = $(this).attr('data-id');
    $(pid + ' .address_extra').slideToggle();
    $('i', this).toggleClass('fa-caret-down fa-caret-up');
});

$('body').on('click', '.new_contact_note', function () {
    $(this).hide();
    $('form.hideForm').slideDown();
});

$('body').on('click', '.contact_note_cancel', function (e) {
    e.preventDefault();
    $('.new_contact_note').show();
    $('form.hideForm').slideUp();
});

$(function () {
    $(".filter_btn_search").click(function () {
        $('.leadlistrow, .filterBtnRow, .leads-search').toggleClass('searchIn');
    });

    $(document).ready(function () {
        $('.settingDropDown').find('span').text($('ul.navbar-pills li.active a').text());

        $(".settingDropDown").click(function () {
            $(this).parent().toggleClass('dropIn');
        });

    });
});


$('.table_actions > ul > li > a').click(function () {
    $('.table_actions.active ').slideUp();
    $('.table_actions ').removeClass('active');
});

/**
 * Added By: Masud
 * Dt: 07/12/2018
 * for pinned Invoice
 */
$('body').on('click', 'table.dataTable tbody .proposal-pin, .proposal-pin', function () {
    var proposal_id = $(this).attr('proposal_id');
    var url = document.URL,
        shortUrl = url.substring(0, url.indexOf("proposaltemplates"));
    $.ajax({
        type: 'POST',
        data: {
            proposal_id: proposal_id
        },
        url: shortUrl + "proposaltemplates/pinproposal"
    }).done(function (response) {
        if (response == 'added') {
            $('#' + proposal_id).addClass('pinned');
            alert_float('success', 'Proposal is Pined to Home');
        } else {
            $('#' + proposal_id).removeClass('pinned');
            alert_float('success', 'Proposal is Unpined from Home');
        }
    });
});

$('body').on('change', 'select.social_web', function () {
    var online = $(this).val();
    $.ajax({
        type: 'POST',
        url: admin_url + "misc/get_social/" + online
    }).done(function (response) {

    });
});

/**
 * Added By : Masud
 * Dt: 07/17/2018
 * to remove attachment
 */
function remove_venue_loc_attachment(link, id) {

    swal({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: 'Yes, delete it!',
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: admin_url + 'venues/remove_venue_loc_attachment/' + id,
                    type: 'Get',
                })
                    .done(function (response) {
                        response = JSON.parse(response);
                        if (response.success == true) {
                            swal('Attachment removed successfully.', response.message, response.status);
                            $('#vattch-' + id).remove();
                        } else {
                            reject(response);
                        }
                        var att_wrap = $('body').find('.task_attachments_wrapper');
                        var attachments = att_wrap.find('.task-attachment-col');
                        var taskAttachmentsMore = $('body').find('#show-more-less-task-attachments-col .task-attachments-more');
                        if (attachments.length == 0) {
                            att_wrap.remove();
                        } else if (attachments.length == 2 && taskAttachmentsMore.hasClass('hide')) {
                            $('body').find('#show-more-less-task-attachments-col').remove();
                        } else if ($('.task-attachment-col:visible').length == 0 && !taskAttachmentsMore.hasClass('hide')) {
                            taskAttachmentsMore.click();
                        }
                    })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong !', 'error');
                    });
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);
    return false;

    /*var r = confirm(appLang.confirm_action_prompt);
    if (r == false) {
        return false;
    } else {
        $.get(admin_url + 'tasks/remove_task_attachment/' + id, function(response) {
            if (response.success == true) {
                $('[data-task-attachment-id="' + id + '"]').remove();
            }
            var att_wrap = $('body').find('.task_attachments_wrapper');
            var attachments = att_wrap.find('.task-attachment-col');
            var taskAttachmentsMore = $('body').find('#show-more-less-task-attachments-col .task-attachments-more');
            if (attachments.length == 0) {
                att_wrap.remove();
            } else if (attachments.length == 2 && taskAttachmentsMore.hasClass('hide')) {
                $('body').find('#show-more-less-task-attachments-col').remove();
            } else if ($('.task-attachment-col:visible').length == 0 && !taskAttachmentsMore.hasClass('hide')) {
                taskAttachmentsMore.click();
            }
        }, 'json');
    }*/
}

$('body').on('click', '.toggle_loc_gallery_form', function () {
    $('.loc_gallery_form').slideToggle();
});

$('body').on('click', '.option_Checkbox', function () {
    //check if checkbox is checked
    var i = 0;
    $('.option_Checkbox').each(function () {
        if ($('.loc_contact', this).is(':checked')) {
            i++;
        }
    });
    if (i > 0) {
        $('.locConSub').removeAttr('disabled'); //enable input

    } else {
        $('.locConSub').attr('disabled', true); //disable input
    }
});

$('body').on('change', 'select.mdiscount_apply', function () {
    mdiscount_apply(this);
    // var apply_on = $(this).val();
    // var pid = $(this).attr('data-pid');
    // var mdiscount_type = $(pid + ' .mdiscount_type').selectpicker('val');
    // var mdiscount_calc = $(pid + ' .mdiscount_calc').selectpicker('val');
    // var mdiscoun = $(pid + ' .mdiscoun').val();
    // if (apply_on == "all_g") {
    //     var group = $(this).attr('data-gid');
    //     $(group + " .quote_item").each(function () {
    //         $(group + ' .mdiscount_type').selectpicker('val', mdiscount_type);
    //         $(group + ' .mdiscount_calc').selectpicker('val', mdiscount_calc);
    //         $(group + ' .mdiscoun').val(mdiscoun);
    //         if (mdiscount_type == "markup") {
    //             $('.markup_disc', this).removeClass("danger");
    //             $('.mdiscoun', this).addClass('markup');
    //             $('.mdiscoun', this).removeClass('discount');
    //         } else {
    //             $('.markup_disc', this).addClass("danger");
    //             $('.mdiscoun', this).removeClass('markup');
    //             $('.mdiscoun', this).addClass('discount');
    //         }
    //         $(group + ' .mdiscount_apply').selectpicker('val', apply_on);
    //         /**/
    //         var omdiscount = mdiscoun;
    //         pid = $(this).attr('data-pid');
    //         qty = $(".pqqty", this).val();
    //         price = $(".price", this).text();
    //         mdiscount_calc = $("select.mdiscount_calc", this).val();
    //         if (mdiscount_calc == "percentage") {
    //             mdiscount = (parseFloat(price) * parseFloat(omdiscount)) / 100;
    //             $('.markup_disc span', this).text(omdiscount + "%");
    //             // $('.mdiscoun_suffix', this).text('%');
    //             $('.mdiscoun_suffix', this).show();
    //             $('.mdiscoun_prefix', this).hide();
    //         } else {
    //             mdiscount = omdiscount;
    //             $('.markup_disc span', this).text("$" + omdiscount);
    //             // $('.mdiscoun_suffix', this).text('$');
    //             $('.mdiscoun_suffix', this).hide();
    //             $('.mdiscoun_prefix', this).show();
    //         }
    //         qstotal = (parseFloat(price) * parseFloat(qty)) + (parseFloat(mdiscount) * parseFloat(qty));
    //         if ($(".tax-col.taxable", this).length > 0) {
    //             rate = $('#proposal_custom_tax').find(':selected').attr('data-rate');
    //             qstotal = parseFloat(qstotal) + ((parseFloat(qstotal) * parseFloat(rate)) / 100);
    //         }
    //         qstotal = parseFloat(qstotal).toFixed(2);
    //         $(".qsubtotal", this).text(qstotal);
    //         $(".isubtotal", this).val(qstotal);

    //     });
    // } else if (apply_on == "all_q") {
    //     $(".quote_item").each(function () {
    //         $('.mdiscount_type', this).selectpicker('val', mdiscount_type);
    //         $('.mdiscount_calc', this).selectpicker('val', mdiscount_calc);
    //         $('.mdiscoun', this).val(mdiscoun);
    //         $('.mdiscount_apply', this).selectpicker('val', apply_on);
    //         /**/
    //         if (mdiscount_type == "markup") {
    //             $('.markup_disc', this).removeClass("danger");
    //             $('.mdiscoun', this).addClass('markup');
    //             $('.mdiscoun', this).removeClass('discount');
    //         } else {
    //             $('.markup_disc', this).addClass("danger");
    //             $('.mdiscoun', this).removeClass('markup');
    //             $('.mdiscoun', this).addClass('discount');
    //         }
    //         var omdiscount = mdiscoun;
    //         qty = $(".pqqty", this).val();
    //         price = $(".price", this).text();
    //         mdiscount_calc = $("select.mdiscount_calc", this).val();
    //         if (mdiscount_calc == "percentage") {
    //             mdiscount = (parseFloat(price) * parseFloat(omdiscount)) / 100;
    //             $('.markup_disc span', this).text(omdiscount + "%");
    //             // $('.mdiscoun_suffix', this).text('%');
    //             $('.mdiscoun_suffix', this).show();
    //             $('.mdiscoun_prefix', this).hide();
    //             $('.mdiscoun', this).removeClass('amount');
    //             $('.mdiscoun', this).addClass('percentage');
    //         } else {
    //             mdiscount = omdiscount;
    //             $('.markup_disc span', this).text("$" + omdiscount);
    //             // $('.mdiscoun_suffix', this).text('$');
    //             $('.mdiscoun_suffix', this).hide();
    //             $('.mdiscoun_prefix', this).show();
    //             $('.mdiscoun', this).addClass('amount');
    //             $('.mdiscoun', this).removeClass('percentage');
    //         }
    //         qstotal = (parseFloat(price) * parseFloat(qty)) + (parseFloat(mdiscount) * parseFloat(qty));
    //         if ($(".tax-col.taxable", this).length > 0) {
    //             rate = $('#proposal_custom_tax').find(':selected').attr('data-rate');
    //             qstotal = parseFloat(qstotal) + ((parseFloat(qstotal) * parseFloat(rate)) / 100);
    //         }
    //         qstotal = parseFloat(qstotal).toFixed(2);
    //         $(".qsubtotal", this).text(qstotal);
    //         $(".isubtotal", this).val(qstotal);

    //     });
    // }
    // createPercentValidation();
    // createAmountValidation();
});


function mdiscount_apply(d) {
    var apply_on = $(d).val();
    var pid = $(d).attr('data-pid');
    var mdiscount_type = $(pid + ' .mdiscount_type').selectpicker('val');
    var mdiscount_calc = $(pid + ' .mdiscount_calc').selectpicker('val');
    var mdiscoun = $(pid + ' .mdiscoun').val();
    if (apply_on == "all_g") {
        var group = $(d).attr('data-gid');
        $(group + " .quote_item").each(function () {
            $(group + ' .mdiscount_type').selectpicker('val', mdiscount_type);
            $(group + ' .mdiscount_calc').selectpicker('val', mdiscount_calc);
            $(group + ' .mdiscoun').val(mdiscoun);
            if (mdiscount_type == "markup") {
                $('.markup_disc', this).removeClass("danger");
                $('.mdiscoun', this).addClass('markup');
                $('.mdiscoun', this).removeClass('discount');
            } else {
                $('.markup_disc', this).addClass("danger");
                $('.mdiscoun', this).removeClass('markup');
                $('.mdiscoun', this).addClass('discount');
            }
            //$(group + ' .mdiscount_apply').selectpicker('val', apply_on);
            /**/
            var omdiscount = mdiscoun ? mdiscoun : 0;
            pid = $(this).attr('data-pid');
            qty = $(".pqqty", this).val();
            price = $(".price-col .price", this).text();
            mdiscount_calc = $("select.mdiscount_calc", this).val();
            if (mdiscount_calc == "percentage") {
                mdiscount = (parseFloat(price) * parseFloat(omdiscount)) / 100;
                $('.markup_disc span', this).text(omdiscount + "%");
                // $('.mdiscoun_suffix', this).text('%');
                $('.mdiscoun_suffix', this).show();
                $('.mdiscoun_prefix', this).hide();
            } else {
                mdiscount = omdiscount;
                $('.markup_disc span', this).text("$" + omdiscount);
                // $('.mdiscoun_suffix', this).text('$');
                $('.mdiscoun_suffix', this).hide();
                $('.mdiscoun_prefix', this).show();
            }
            qstotal = (parseFloat(price) * parseFloat(qty)) + (parseFloat(mdiscount) * parseFloat(qty));
            if ($(".tax-col.taxable", this).length > 0) {
                rate = $('#proposal_custom_tax').find(':selected').attr('data-rate');
                if (rate > 0 && rate != "") {
                    qstotal = parseFloat(qstotal) + ((parseFloat(qstotal) * parseFloat(rate)) / 100);
                }
            }
            qstotal = parseFloat(qstotal).toFixed(2);
            $(".qsubtotal", this).text(qstotal);
            $(".isubtotal", this).val(qstotal);

        });
    } else if (apply_on == "all_q") {
        $(".quote_item").each(function () {
            $('.mdiscount_type', this).selectpicker('val', mdiscount_type);
            $('.mdiscount_calc', this).selectpicker('val', mdiscount_calc);
            $('.mdiscoun', this).val(mdiscoun);
            $('.mdiscount_apply', this).selectpicker('val', apply_on);
            /**/
            if (mdiscount_type == "markup") {
                $('.markup_disc', this).removeClass("danger");
                $('.mdiscoun', this).addClass('markup');
                $('.mdiscoun', this).removeClass('discount');
            } else {
                $('.markup_disc', this).addClass("danger");
                $('.mdiscoun', this).removeClass('markup');
                $('.mdiscoun', this).addClass('discount');
            }
            var omdiscount = mdiscoun ? mdiscoun : 0;
            qty = $(".pqqty", this).val();
            price = $(".price-col .price", this).text();
            mdiscount_calc = $("select.mdiscount_calc", this).val();
            if (mdiscount_calc == "percentage") {
                mdiscount = (parseFloat(price) * parseFloat(omdiscount)) / 100;
                $('.markup_disc span', this).text(omdiscount + "%");
                // $('.mdiscoun_suffix', this).text('%');
                $('.mdiscoun_suffix', this).show();
                $('.mdiscoun_prefix', this).hide();
                $('.mdiscoun', this).removeClass('amount');
                $('.mdiscoun', this).addClass('percentage');
            } else {
                mdiscount = omdiscount;
                $('.markup_disc span', this).text("$" + omdiscount);
                // $('.mdiscoun_suffix', this).text('$');
                $('.mdiscoun_suffix', this).hide();
                $('.mdiscoun_prefix', this).show();
                $('.mdiscoun', this).addClass('amount');
                $('.mdiscoun', this).removeClass('percentage');
            }
            qstotal = (parseFloat(price) * parseFloat(qty)) + (parseFloat(mdiscount) * parseFloat(qty));
            if ($(".tax-col.taxable", this).length > 0) {
                rate = $('#proposal_custom_tax').find(':selected').attr('data-rate');
                if (rate > 0 && rate != "") {
                    qstotal = parseFloat(qstotal) + ((parseFloat(qstotal) * parseFloat(rate)) / 100);
                }
            }
            qstotal = parseFloat(qstotal).toFixed(2);
            $(".qsubtotal", this).text(qstotal);
            $(".isubtotal", this).val(qstotal);

        });
    }
    createPercentValidation();
    createAmountValidation();
}

$('body').on('change', '.mdiscount_type', function () {
    var mdiscount_app = $(this).parent().parent().siblings().find('select.mdiscount_apply');
    var pid = $(this).attr('data-pid');
    var mdiscount_type = $(this).selectpicker('val');
    if (mdiscount_type == "markup") {
        $(pid + ' .markup_disc').removeClass("danger");
        $(pid + ' .mdiscoun').addClass('markup');
        $(pid + ' .mdiscoun').removeClass('discount');
    } else {
        $(pid + ' .markup_disc').addClass("danger");
        $(pid + ' .mdiscoun').removeClass('markup');
        $(pid + ' .mdiscoun').addClass('discount');
    }
    if (mdiscount_type == "discount") {
        $(pid + ' .mdiscoun_field label').text('Discount');
    } else {
        $(pid + ' .mdiscoun_field label').text('Markup');
    }
    createPercentValidation();
    createAmountValidation();
    mdiscount_apply(mdiscount_app);
});

$('body').on('change', '.mdiscount_calc', function () {
    var mdiscoun_suffix = $(this).parent().parent().siblings('.mdiscoun_field').find('.mdiscoun_suffix');
    var mdiscoun_prefix = $(this).parent().parent().siblings('.mdiscoun_field').find('.mdiscoun_prefix');
    var mdiscount_app = $(this).parent().parent().siblings().find('select.mdiscount_apply');

    var pid = $(this).attr('data-pid');
    $(pid + ' .mdiscoun').toggleClass('percentage amount');
    $(pid + ' .mdiscoun').val('');
    var mdiscount_calc = $(this).selectpicker('val');
    omdiscount = $(pid + ' .mdiscoun').val() != "" ? $(pid + ' .mdiscoun').val() : 0;
    if (mdiscount_calc == "percentage") {
        // $(pid + ' .mdiscoun_suffix').text('%');
        mdiscoun_suffix.show();
        mdiscoun_prefix.hide();
        createPercentValidation();
    } else {
        // $(pid + ' .mdiscoun_suffix').text('$');
        mdiscoun_suffix.hide();
        mdiscoun_prefix.show();
        createAmountValidation();
    }
    qty = $(pid + " .pqqty").val();
    price = $(pid + " .price-col .price").text();
    mdiscount_type = $(pid + " select.mdiscount_type").val();
    if (mdiscount_calc == "percentage") {
        mdiscount = (parseFloat(price) * parseFloat(omdiscount)) / 100;
        $(pid + ' .markup_disc span').text(omdiscount + "%");

    } else {
        mdiscount = omdiscount;
        $(pid + ' .markup_disc span').text("$" + omdiscount);
    }
    if (mdiscount_type == "markup") {
        $(pid + ' .markup_disc').removeClass("danger");
    } else {
        $(pid + ' .markup_disc').addClass("danger");
    }
    qstotal = (parseFloat(price) * parseFloat(qty)) + (parseFloat(mdiscount) * parseFloat(qty));
    if ($(pid + " .tax-col.taxable").length > 0) {
        if (rate > 0 && rate != "") {
            rate = $('#proposal_custom_tax').find(':selected').attr('data-rate');
            qstotal = parseFloat(qstotal) + ((parseFloat(qstotal) * parseFloat(rate)) / 100);
        }
    }
    qstotal = parseFloat(qstotal).toFixed(2);
    $(pid + " .qsubtotal").text(qstotal);
    $(pid + " .isubtotal").val(qstotal);
    mdiscount_apply(mdiscount_app);
});

$('body').on('change', '.mdiscoun', function () {
    var omdiscount = $(this).val() != "" ? $(this).val() : 0;
    pid = $(this).attr('data-pid');
    qty = $(pid + " .pqqty").val();
    price = $(pid + " .price-col .price").text();
    mdiscount_calc = $(pid + " select.mdiscount_calc").val();
    mdiscount_type = $(pid + " select.mdiscount_type").val();
    if (mdiscount_calc == "percentage") {
        if (mdiscount_type == "discount" && $(this).val() < -100) {
            $(this).val(-100);
            omdiscount = -100;
        }
        mdiscount = (parseFloat(price) * parseFloat(omdiscount)) / 100;
        $(pid + ' .markup_disc span').text(omdiscount + "%");

    } else {
        mdiscount = omdiscount;
        $(pid + ' .markup_disc span').text("$" + omdiscount);
    }
    if (mdiscount_type == "markup") {
        $(pid + ' .markup_disc').removeClass("danger");
    } else {
        $(pid + ' .markup_disc').addClass("danger");
    }
    qstotal = (parseFloat(price) * parseFloat(qty)) + (parseFloat(mdiscount) * parseFloat(qty));
    if ($(pid + " .tax-col.taxable").length > 0) {
        rate = $('#proposal_custom_tax').find(':selected').attr('data-rate');
        if (rate > 0 && rate != "") {
            qstotal = parseFloat(qstotal) + ((parseFloat(qstotal) * parseFloat(rate)) / 100);
        }
    }
    qstotal = parseFloat(qstotal).toFixed(2);
    $(pid + " .qsubtotal").text(qstotal);
    $(pid + " .isubtotal").val(qstotal);
    proposal_price_calculation();

});

$('body').on('change', '#proposal_custom_tax', function () {
    var rate = $(this).find(':selected').attr('data-rate') + "%";
    $('.taxable').each(function () {
        var pid = $(this).attr('data-pid');
        omdiscount = $(pid + ' .mdiscoun').val() != "" ? $(pid + ' .mdiscoun').val() : 0;
        qty = $(pid + " .pqqty").val();
        price = $(pid + " .price.price-col").text();
        mdiscount_calc = $(pid + " select.mdiscount_calc").val();
        mdiscount_type = $(pid + " select.mdiscount_type").val();
        if (mdiscount_calc == "percentage") {
            mdiscount = (parseFloat(price) * parseFloat(omdiscount)) / 100;
        } else {
            mdiscount = omdiscount;
        }
        qstotal = (parseFloat(price) * parseFloat(qty)) + (parseFloat(mdiscount) * parseFloat(qty));
        qstotal = parseFloat(qstotal) + ((parseFloat(qstotal) * parseFloat(rate)) / 100);
        $(this).text(rate);
        /*if(qstotal%1!=0){
            qstotal=qstotal.toFixed('2');
        }*/
        qstotal = parseFloat(qstotal).toFixed(2);
        $(pid + " .qsubtotal").text(qstotal);
        $(pid + " .isubtotal").val(qstotal);
    });
});

var createPercentValidation = function () {
    if ($('.form-control.percentage').length > 0) {
        $(".form-control.percentage").each(function () {
            if ($(this).hasClass('markup')) {
                $(this).mask("999", {placeholder: "10"});
            } else {
                $(this).mask("-999", {placeholder: "-10"});
            }

        });
    }
};
var createAmountValidation = function () {
    if ($('.form-control.amount').length > 0) {
        $(".form-control.amount").each(function () {
            if ($(this).hasClass('markup')) {
                $(this).mask("999999999999", {placeholder: "100"});
            } else {
                $(this).mask("-999999999999", {placeholder: "-100"});
            }

        });
    }
};
createPercentValidation();
createAmountValidation();


function initCkeditor(id) {
    if ($('#' + id).length > 0) {
        var editor = CKEDITOR.replace(id, {

            toolbar: [
                {name: 'document', groups: ['mode', 'document', 'doctools'], items: ['Source', '-']},
                /*{ name: 'clipboard', groups: [ 'clipboard', 'undo' ], items: [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] },*/
                /*{ name: 'editing', groups: [ 'find', 'selection', 'spellchecker' ], items: [ 'Find', 'Replace', '-', 'SelectAll', '-', 'Scayt' ] },*/
                /*{ name: 'forms', items: [ 'Form', 'Checkbox', 'Radio', 'TextField', 'Textarea', 'Select', 'Button', 'ImageButton', 'HiddenField' ] },*/
                /*'/',*/
                /*{ name: 'forms', items: [ 'Button' ] },*/
                {name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize']},
                {name: 'colors', items: ['TextColor', 'BGColor']},
                {
                    name: 'basicstyles',
                    groups: ['basicstyles', 'cleanup'],
                    items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', 'RemoveFormat']
                },
                {
                    name: 'paragraph',
                    groups: ['list', 'indent', 'blocks', 'align', 'bidi', 'links'],
                    items: ['Outdent', 'Indent', 'Blockquote', 'CreateDiv', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', 'BidiLtr', 'BidiRtl', 'Language', 'Link', 'Unlink', 'Anchor', 'NumberedList', 'BulletedList', 'Image']
                },
                /*{name: 'links', items: ['Link', 'Unlink', 'Anchor']},*/
                /*{
                    name: 'insert',
                    items: ['Image', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak', 'Iframe']
                },*/

                /*'/',*/
                /*{ name: 'tools', items: [ 'Maximize', 'ShowBlocks' ] },*/
                /*{ name: 'others', items: [ '-' ] },
                { name: 'about', items: [ 'About' ] }*/
            ],
            removeButtons: 'HorizontalRule,Table,PageBreak,Iframe,Language,BidiRtl,BidiLtr,Outdent,Indent,RemoveFormat,Blockquote,Smiley,Strike,Subscript,Superscript,Anchor,help,about',
            image2_alignClasses: ['image-align-left', 'image-align-center', 'image-align-right'],
            image2_disableResizer: true,
            extraPlugins: 'autogrow',
        });

        setTimeout(function () {
            $('.cke_contents iframe').removeAttr('title');
            $('.mce-edit-area iframe').removeAttr('title');

        }, 5000);

        /*$('.proposal-template .add_merge_html_field').on('click', function (e) {
            e.preventDefault();
            console.log($(this));
            CKEDITOR.instances.id.insertHtml($(this).find("span").html());
        });*/
        CKEDITOR.config.autoParagraph = false;
        CKEDITOR.config.enterMode = CKEDITOR.ENTER_DIV;
        CKEDITOR.editorConfig = function (config) {
            // Define changes to default configuration here. For example:
            config.language = 'fr';
            config.uiColor = '#000';
            config.title = false;
            config.fillEmptyBlocks = false;
            config.autoParagraph = false;
            config.allowedContent = true;
            config.enterMode = CKEDITOR.ENTER_DIV;
        };
        // CKEDITOR.editorConfig = function (config) {
        //     config.contentsCss = site_url + 'assets/css/style.min.css';
        // };
    }

}

$('.proposal-template .add_merge_field').on('click', function (e) {
    e.preventDefault();
    CKEDITOR.instances.pagreement.insertHtml("&nbsp;<div class='token'>" + $(this).attr('data-val') + "</div>&nbsp;");
});

$('#createemail .add_merge_field').on('click', function (e) {
    e.preventDefault();
    CKEDITOR.instances.emailbody.insertHtml("&nbsp;<div class='token'>" + $(this).attr('data-val') + "</div>&nbsp;")
});

$('body').on('change', '.proposal-template select.tokenDrpdwn', function () {
    var token = $(this).val();
    CKEDITOR.instances.pagreement.insertHtml("&nbsp; <div class='token'>" + token + "</div>&nbsp;")
    $(".selectpicker").selectpicker('val', "");
});

$('body').on('change', '#createemail select.tokenDrpdwn', function () {
    var token = $(this).val();
    CKEDITOR.instances.emailbody.insertHtml("&nbsp; <div class='token'>" + token + "</div>&nbsp;")
    $(".selectpicker").selectpicker('val', "");
});

/*CKEDITOR.on('instanceReady', function() {*/
// When an item in the contact list is dragged, copy its data into the drag and drop data transfer.
// This data is later read by the editor#paste listener in the hcard plugin defined above.
CKEDITOR.document.getDocumentElement('.add_merge_field').on('dragend', function (evt) {
    // The target may be some element inside the draggable div (e.g. the image), so get the div.h-card.
    var target = evt.data.getTarget();
    tokenVal = target.data('val');
    if ($('#pagreement').length > 0) {
        CKEDITOR.instances.pagreement.insertHtml("&nbsp;<div class='token'>" + tokenVal + "</div>&nbsp;")
    }
    if ($('#emailbody').length > 0) {
        CKEDITOR.instances.emailbody.insertHtml("&nbsp;<div class='token'>" + tokenVal + "</div>&nbsp;")
    }
});
/*});*/


initCkeditor('pagreement');
initCkeditor('introduction');
initCkeditor('client_message');
initCkeditor('emailbody');
initCkeditor('comments');

function selected_services() {
    if ($('.quote_groups').length > 0) {
        var count = 0;
        var data = {};
        $('.quote_item.selected').each(function () {
            /*data[count]['id']= $(this).attr('data-id');
            data[count]['type']= $(this).attr('data-type');*/
            data[count] = {
                id: $(this).attr('data-id'),
                type: $(this).attr('data-type')
            };
            count++;
        });
        $.ajax({
            type: 'POST',
            url: site_url + 'proposal/quote_selecteditems/',
            data: data,
            success: function (result) {
                $('.selected_services').html(result);
            }
        });
    }
}

selected_services();

$('.proposal_step').click(function () {
    $('.proposal_step').removeClass('active');
    $(this).addClass('active');
});
$(".proposal_step a:not(.payment), a.proposal_step").on('click', function (event) {
    if ($(this).attr('data-tab') == "payment_step") {
        $('.makepayment').removeClass('hide');
    } else {
        $('.makepayment').addClass('hide');
    }
    if (this.hash !== "") {
        event.preventDefault();
        var hash = this.hash;
        $('html, body').animate({
            scrollTop: $(hash).offset().top - 80
        }, 800, function () {
            //window.location.hash = hash;
        });
    }
});

$(".payment-body.sortable").sortable({

    stop: function (event, ui) {
        count = 1;
        $(".payment-wrapper").each(function () {
            $('.icon_section', this).text(count);
            $('.payment_title', this).text("Payment " + count);
            $('.order', this).val(count);

            count++;
        });
    }
});

$('select.memberpicker').change(function (e) {
    if ($('select.memberpicker').val() == "new") {
        //window.location.href=admin_url+"addressbooks/addressbook?";
        $('#add_new_signer_popup').modal('show');
        $(this).val('');
    }
});

$('#new_signer_form').submit(function (e) {
    e.preventDefault();
    var data = $(this).serialize();
    var dataarray = $(this).serializeArray();
    var values = {};
    setTimeout(function () {
        if ($('#new_signer_form .form-group').hasClass('has-error')) {
            return false;
        } else {
            $.ajax({
                type: 'POST',
                url: admin_url + 'addressbooks/add_signer/',
                data: data,
                success: function (result) {
                    $('#signer_list').html(result);
                    $('.selectpicker').selectpicker('refresh');
                    $('#add_new_signer_popup').modal('hide');
                }
            });
        }

    }, 1000);

});

$('.proposal_accept').click(function (e) {
    e.preventDefault();
    signer = $(this).attr('data-signer');
    var selected = $('.quote_item.selected').length;
    gselected = 0;
    sonegroup = 0;
    if (selected > 0) {
        $('.quote_groups .group').each(function () {
            if ($('.quote_type', this).val() == 1) {
                $('.quote_items .quote_item', this).each(function () {
                    if ($(this).hasClass('selected')) {
                        gselected++;
                    }
                });
                sonegroup++;
            }
        });
        if (gselected == sonegroup) {
            if ($('input#' + signer).val() == "") {
                alert_float('warning', 'Please Sign the proposal to accept');
            } else {
                $('#proposal-form').submit();
            }

        } else {
            alert_float('warning', 'Please select one item from group');
            $('#quote_step').trigger('click');
        }

    } else {
        alert_float('warning', 'No item(s) selected from any group');
        $('#quote_step').trigger('click');
    }
});

$('body').on('click', '.quantity .fa, .quantity_remove', function () {
    var pid = $(this).attr('data-pid');
    $(pid + '.quantity .fa').toggleClass('fa-caret-down fa-caret-up');
    $(pid + " .maxQtyContainer").slideToggle();
});
$('.btn-decline').click(function (e) {
    e.preventDefault();
    $('#decline_proposal_popup').modal('show');
});
$('#decline_confirm').click(function () {
    $('.confirm_comment ').toggleClass('hide');
});
/*$('#decline_save').click(function () {
    var proposal = $(this).attr('data-pid');
    reason = $('#reason').val();
    userid = $('#userid').val();
    usertype = $('#usertype').val();
    if (reason != "") {
        $.ajax({
            type: 'POST',
            url: site_url + 'proposal/updatestatus/decline/' + proposal,
            data: {
                reason: reason,
                userid:userid,
                usertype:usertype,
            },
            success: function (result) {
                //$('#decline_proposal_popup').modal('hide');
                //location.reload();
            }
        });
    }else {
        $('#reason').addClass('invalid');
        var message = '<p id="name-error" class="text-danger">Please provide required information.</p>';
        $('#reason').after(message);
    }
});*/

$('.num_js').on('keydown', function (e) {
    -1 !== $.inArray(e.keyCode, [46, 8, 9, 27, 13, 110]) || (/65|67|86|88/.test(e.keyCode) && (e.ctrlKey === true || e.metaKey === true)) && (!0 === e.ctrlKey || !0 === e.metaKey) || 35 <= e.keyCode && 40 >= e.keyCode || (e.shiftKey || 48 > e.keyCode || 57 < e.keyCode) && (96 > e.keyCode || 105 < e.keyCode) && e.preventDefault()
});


$('input.spqqty.viewqty').change(function () {
    var qty = $(this).val();
    maxqty = $(this).attr('max');
    if (parseInt(qty) > parseInt(maxqty)) {
        $(this).val(maxqty);
    }
});

$('.slickNext').click(function () {
    if ($(this).attr('data-tab') == "payment") {
        $('.makepayment').removeClass('hide');
    } else {
        $('.makepayment').addClass('hide');
    }
    var tab = "#" + $(this).attr('data-tab') + "_step";
    $(tab).trigger("click");

});
$('.pay_in_full').click(function () {
    var total = $(this).attr('data-total');
    $('#total').val(format_money(total));
    $('#amount, .paymentamount').val(total);
    $('#paymentid').val(0);
    $('#processpay').text(format_money(total));
    if ($(this).attr('data-payment') == "full") {
        $('ul.payments li').removeClass('active');
        $('li.fullpayment').addClass('active');
        $('.remaining_amount > strong').text("$0.00");
    } else {
        $('ul.payments li').addClass('active');
        $('li.fullpayment').removeClass('active');
    }

});

$('ul.payments li').click(function () {
    var total = $(this).attr('data-total');
    total = total.replace(",", "");
    var remaining = $(this).attr('data-remaining');
    //$('.paymenttotal').width(total.length * 8);
    $('#total, .paymenttotal').val(format_money(total));
    $('#amount, .paymentamount').val(total);
    $('#processpay, .processpay').text(format_money(total));
    $('ul.payments li').removeClass('active');
    $(this).addClass('active');
    if ($(this).hasClass('fullpayment')) {
        $('.remaining_amount > strong').text("$0.00");
    } else {
        $('.remaining_amount > strong').text(format_money(remaining));
    }

});
/*
$('#banner-side-btns .s-prev').click(function(){
    $("#banner-carousel").slick("slickPrev");
});*/
$('a.preview').click(function (e) {
    e.preventDefault();
    var link = $(this).attr('href');
    window.open(link, '_blank');
});

/**/


$('body').on('change', 'select.othrdisctype', function () {
    var othrdisctype = $(this).val();
    if (othrdisctype == "percentage") {
        $('.othrdisc_suffix').show();
        $('.othrdisc_prefix').hide();
    } else {
        $('.othrdisc_prefix').show();
        $('.othrdisc_suffix').hide();
    }
});

var otherDiscountValidation = function () {
    if ($('.othrdiscval').length > 0) {
        $('.othrdiscval').mask("-99999999", {placeholder: "-10"});
    }
};
otherDiscountValidation();

$('.grtcal').click(function () {
    $('.grtcal').removeClass('active');
    $(this).addClass('active');
    var grtcal = $(this).data('val');
    var grtamount = $(this).data('amount');
    total = $('#total').val();
    total = total.replace(",", "");
    total = total.replace("$", "");

    if (grtcal == "custom") {
        $('.full_gdb.custom').addClass('hide');
        $('.customgratuity').removeClass('hide');
        grtamount = 0;
        grtcal = 0;
    } else {
        $('.customgratuity').addClass('hide');
        $('.full_gdb.custom').removeClass('hide');
        var invoiceid = $('#invoice_id').val();
        var temp_data = {'gratuity_percent': grtcal, 'gratuity_val': grtamount};
        /*$.ajax({
            type: 'POST',
            url: site_url + 'proposal/addinvoicegratuity/'+ invoiceid,
            data: temp_data,
            success: function (result) {
                alert_float('success',"Gratuity added successfully");
            }
        });*/
    }
    processpay = parseFloat(total) + parseFloat(grtamount);
    processpay = processpay.toFixed(2);
    /*if (processpay % 1 != 0) {

    }*/
    $('.gratuity_amount').text(format_money(grtamount));
    $('.grtpercent').text('(' + grtcal + '%)');
    $('#processpay').text(format_money(processpay));
    $('.processpay').text(format_money(processpay));
    $('.paymentamount').val(processpay);
    $('.paymenttotal').attr('data-grtuet', grtamount);
    $('.gratuity_val').val(grtamount);
    $('.gratuity_percent').val(grtcal);
    if (grtamount > 0) {
        alert_float('success', "Gratuity added successfully");
    }
});
$('#customgratuity').change(function () {
    var grtamount = $(this).val();
    var total = $(this).data('total');
    grtcal = total;
    if (grtamount > 0) {
        grtcal = (parseFloat(grtamount) * 100) / parseFloat(total);
    }
    grtcal = (parseFloat(grtamount) * 100) / parseFloat(total);
    grtcal = parseFloat(grtcal).toFixed(2);
    $('.gratuity_amount').text(format_money(grtamount));
    $('.grtpercent').text('(' + grtcal + '%)');
    total = $('#total').val();
    total = total.replace(",", "");
    total = total.replace("$", "");
    processpay = parseFloat(total) + parseFloat(grtamount);

    var invoiceid = $('#invoice_id').val();
    var temp_data = {'gratuity_percent': grtcal, 'gratuity_val': grtamount};
    /*$.ajax({
        type: 'POST',
        url: site_url + 'proposal/addinvoicegratuity/'+ invoiceid,
        data: temp_data,
        success: function (result) {
            alert_float('success',"Gratuity added successfully");
        }
    });*/
    /*if (processpay % 1 != 0) {
        processpay = processpay.toFixed(2);
    }*/
    $('#processpay').text(format_money(processpay));
    $('.paymentamount').val(processpay);
    $('.paymenttotal').attr('data-grtuet', grtamount);
    $('.gratuity_val').val(grtamount);
    $('.gratuity_percent').val(grtcal);
    if (grtamount > 0) {
        alert_float('success', "Gratuity added");
    } else {
        alert_float('success', "Gratuity removed");
    }
});

$('.paymenttotal').change(function () {
    newt = total = $(this).val();
    $('.paymenttotal').val(newt);
    total = total.replace("$", "");
    total = total.replace(",", "");
    total = parseFloat(total).toFixed(2);
    var max = $(this).attr('max');
    max = max.replace(",", "");
    max = parseFloat(max);
    var min = $(this).attr('min');
    min = min.replace(",", "");
    min = parseFloat(min);
    if (total < min || total > max) {

        var error = '<p id="amount-error" class="text-danger">Amount should be >=' + format_money(min) + ' and <=' + format_money(max) + '</p>';
        if ($('#amount-error').length <= 0) {
            $(this).after(error);
        }
        $('#processpay').attr("disabled", "disabled");

    } else {
        if ($('#amount-error').length > 0) {
            $('#amount-error').remove();
        }
        $('#processpay').removeAttr("disabled");
    }
    remaining = parseFloat(max) - parseFloat(total)
    remaining = remaining.toFixed(2);
    $('.remaining_amount > strong').text(format_money(remaining));
    var grtamount = $(this).attr('data-grtuet');
    processpay = parseFloat(total) + parseFloat(grtamount);
    $('#amount, .paymentamount').val(processpay);
    processpay = processpay.toFixed(2);
    $('#processpay, .processpay > strong').text(format_money(processpay));

});

var customgratuityValidation = function () {
    if ($('#customgratuity').length > 0) {
        $('#customgratuity').mask("99999999.00", {placeholder: "100.00"});
    }
};
customgratuityValidation();

/*
$('#total').change(function () {
    total = $(this).val();
    var grtamount = $(this).attr('data-grtuet');
    processpay = parseFloat(total) + parseFloat(grtamount);
    $('#processpay').text('$' + processpay);
    $('#amount').val(processpay);
});*/

$('.add_member_sign').click(function (e) {
    e.preventDefault();
    var signer = $(this).data('signer');
    var id = $(this).data('proposal');
    var sign = $("#" + signer).val();
    if (sign != "") {
        var temp_data = {'signer': signer, 'image': sign};
        $.ajax({
            type: 'POST',
            url: site_url + 'proposal/addmembersign/' + id,
            data: temp_data,
            success: function (result) {
                if (result == 1) {
                    alert_float('success', "Signature added successfully");
                }
                location.reload(true);
            }
        });
    } else {
        alert_float('warning', 'Please Sign the proposal to accept');
    }

});
$('.proposal_save').click(function (e) {
    e.preventDefault();
    var proposal_name = $('#proposal_name').val();
    var id = $('#templateid').val();
    var temp_data = {'name': proposal_name, 'id': id};
    var psTemplate = 0;
    psTemplateId = 0
    if ($(this).attr('name') == "save_and_preview") {
        $('#savetype').attr('name', 'save_and_preview');
    } else if ($(this).attr('name') == "save_as_template") {
        $('#savetype').attr('name', 'save_as_template');
    }
    if ($('#is_ps_template').length > 0) {
        psTemplate = $('#is_ps_template').prop('checked') === true ? 1 : 0;
    }
    if ($('#ps_template').length > 0) {
        psTemplateId = $('#ps_template').val();
    }
    $.ajax({
        type: 'POST',
        url: admin_url + 'proposaltemplates/proposalnameexist/',
        data: temp_data,
        success: function (result) {
            if (result == 1) {
                alert_float('warning', "Proposal name already exist");
            } else {
                if (psTemplate == 1) {
                    var psName = $('#pmt_sdl_name').val();
                    var temp_data = {'pmt_sdl_name': psName, 'tagid': psTemplateId};
                    $.ajax({
                        type: 'POST',
                        url: admin_url + "paymentschedules/check_paymentschedule_name_exists",
                        data: temp_data,
                        success: function (result) {
                            if (result == "false") {
                                alert_float('warning', "Payment schedule name already exist");
                                $('#pmt_sdl_name').focus();
                            } else {
                                $('#proposal-form').submit();
                            }
                        }
                    });
                } else {
                    $('#proposal-form').submit();
                }
            }
        }
    });
})

function updateQueryStringParameter(uri, key, value) {
    var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
    var separator = uri.indexOf('?') !== -1 ? "&" : "?";
    if (uri.match(re)) {
        return uri.replace(re, '$1' + key + "=" + value + '$2');
    } else {
        return uri + separator + key + "=" + value;
    }
}

/*
$('.nav-tabs a').on('shown.bs.tab', function(event){
    var x = $(event.target).attr('href');         // active tab
    if(x=="#check" || x=="#cash"){
        $('.payNow_blk').hide();
        $('#record_payment_form').attr('action',"");
    }else {
        $('.payNow_blk').show();
        var url = site_url+"gateways/stripe/complete_purchase";
        $('#record_payment_form').attr('action',url);
    }
});*/
$('body').on('change', '#is_ps_template', function () {
    if ($('#is_ps_template').prop('checked') === true) {
        $('.pmt-sdl-name').removeClass('hide');
    } else {
        $('.pmt-sdl-name').addClass('hide');
    }
});

$('body').on('click', '._close', function (e) {
    e.preventDefault();
    var proposal_id = $(this).attr('id');
    $('#close_proposal_id').val(proposal_id);
    $('#close_proposal_popup').modal('show');
});
$('body').on('click', '._reopen', function (e) {
    e.preventDefault();
    var proposal_id = $(this).attr('id');
    $('#reopen_proposal_id').val(proposal_id);
    $('#reopen_proposal_popup').modal('show');
});

$('.spqqty').change(function () {
    var pid = $(this).data('pid');
    gtype = $(this).data('gtype');
    group = $(this).data('group');
    if (gtype == 1) {
        $(group + " .quote_item").removeClass('selected');
    }
    $(pid).addClass('selected');
    $(pid + ' .select_item').prop("checked", true);
});

$('body').on('change', 'select.quote_item_option', function (e) {
    var pid = $(this).data('pid');
    extraToadd = 0.00;
    $(pid + ' select.quote_item_option').each(function () {
        choice_val = $(this).find(':selected').data('price');
        extraToadd = parseFloat(choice_val) + parseFloat(extraToadd);
    });
    if ($(pid + ' .radio.quote_item_option').length > 0) {
        $(pid + " .radio.quote_item_option:checked").each(function () {
            radio_val = $(this).data('price');
            extraToadd = parseFloat(radio_val) + parseFloat(extraToadd);
        });
    }
    if ($(pid + ' .checkbox.quote_item_option').length > 0) {
        $(pid + " .checkbox.quote_item_option:checked").each(function () {
            checkbox_val = $(this).data('price');
            extraToadd = parseFloat(checkbox_val) + parseFloat(extraToadd);
        });
    }
    price = $(pid + ' .price.price-col').data('originlprice');
    $(pid + ' .price.price-col').attr('data-cextra', extraToadd);
    quote_item_price_calculation(pid, extraToadd);
    final_proposal_price_calculation();
    count_invoice_amount();
});
$('body').on('change', '.radio.quote_item_option', function (e) {
    var pid = $(this).data('pid');
    extraToadd = 0.00;
    radio_val = $(this).data('price');
    extraToadd = parseFloat(radio_val) + parseFloat(extraToadd);
    if ($(pid + ' select.quote_item_option').length > 0) {
        $(pid + ' select.quote_item_option').each(function () {
            choice_val = $(this).find(':selected').data('price');
            extraToadd = parseFloat(choice_val) + parseFloat(extraToadd);
        });
    }
    if ($(pid + ' .checkbox.quote_item_option').length > 0) {
        $(pid + " .checkbox.quote_item_option:checked").each(function () {
            checkbox_val = $(this).data('price');
            extraToadd = parseFloat(checkbox_val) + parseFloat(extraToadd);
        });
    }
    price = $(pid + ' .price.price-col').data('originlprice');
    $(pid + ' .price.price-col').attr('data-cextra', extraToadd);
    quote_item_price_calculation(pid, extraToadd);
    final_proposal_price_calculation();
    count_invoice_amount();
});
$('body').on('change', '.checkbox.quote_item_option', function (e) {
    var pid = $(this).data('pid');
    extraToadd = 0.00;
    $(pid + " .checkbox.quote_item_option:checked").each(function () {
        checkbox_val = $(this).data('price');
        extraToadd = parseFloat(checkbox_val) + parseFloat(extraToadd);
    });

    if ($(pid + ' select.quote_item_option').length > 0) {
        $(pid + ' select.quote_item_option').each(function () {
            choice_val = $(this).find(':selected').data('price');
            extraToadd = parseFloat(choice_val) + parseFloat(extraToadd);
        });
    }
    if ($(pid + ' .radio.quote_item_option').length > 0) {
        $(pid + " .radio.quote_item_option:checked").each(function () {
            radio_val = $(this).data('price');
            extraToadd = parseFloat(radio_val) + parseFloat(extraToadd);
        });
    }
    price = $(pid + ' .price.price-col').data('originlprice');
    $(pid + ' .price.price-col').attr('data-cextra', extraToadd);
    quote_item_price_calculation(pid, extraToadd);
    final_proposal_price_calculation();
    count_invoice_amount();
});

function quote_item_price_calculation(pid, extraToadd = 0) {
    var itemQty = $(pid + ' .spqqty').val();
    price = $(pid + ' .price.price-col').data('originlprice');
    cextra = extraToadd;
    price = parseFloat(price) + parseFloat(cextra);
    price = parseFloat(price).toFixed(2);
    $(pid + ' .price.price-col').text(price);
    mdiscoun = $(pid + " .markup_disc").data('mdiscount') != "" ? $(pid + " .markup_disc").data('mdiscount') : 0.00;

    mdiscountype = $(pid + " .markup_disc").data('mdistype') != "" ? $(pid + " .markup_disc").data('mdistype') : "percentage";
    mdisctype = $(pid + " .markup_disc").data('type') != "" ? $(pid + " .markup_disc").data('type') : "discount";
    if (mdiscountype == "percentage") {
        mdiscount = (parseFloat(price) * parseFloat(mdiscoun)) / 100;
    } else {
        mdiscount = mdiscoun;
    }
    //mdiscount = mdiscount*itemQty;
    qsubtotal = (parseFloat(price) + parseFloat(mdiscount)) * itemQty;
    if ($(pid + " .tax-col").hasClass('taxable')) {
        var tax = $(pid + " .tax-col").attr('data-taxrate');
        tax = (parseFloat(qsubtotal) * parseFloat(tax)) / 100;
        qsubtotal = (parseFloat(qsubtotal) + parseFloat(tax)).toFixed(2);
        $(pid + " .itax").val(tax);
    }
    qsubtotal = parseFloat(qsubtotal).toFixed(2);
    $(pid + ' .qsubtotal').text(qsubtotal);
    $(pid + ' .isubtotal').val(qsubtotal);
    $(pid + ' .imkpdisc').val(mdiscount);
}

$('body').on('change', 'select.existingcontact', function (e) {
    var addressid = $(this).val();
    var name = $(this).find(':selected').data('name');
    $('.existingcontact').selectpicker('val', '');
    $('#existcontactid').val(addressid);
    $('#existingcontactname').text(name);
    $('#existing_modal').modal('show');

});

$('#existing_signer_form').submit(function (e) {
    e.preventDefault();
    var data = $(this).serialize();
    var dataarray = $(this).serializeArray();
    var values = {};
    setTimeout(function () {
        if ($('#existing_signer_form .form-group').hasClass('has-error')) {
            return false;
        } else {
            $.ajax({
                type: 'POST',
                url: admin_url + 'addressbooks/add_signer/',
                data: data,
                success: function (result) {
                    $('#signer_list').html(result);
                    $('.selectpicker').selectpicker('refresh');
                    $('#add_new_signer_popup').modal('hide');
                }
            });
        }

    }, 1000);

});

/*$('#processpay').click(function (e) {
    e.preventDefault();
})*/
$('body').on('click', '.removeContact', function () {
    var index = $(this).data('index');
    $('#contact_' + index).remove();
    $('#contactheader_' + (index - 1)).trigger('click');
});

/*$('.project_save, .lead_save').click(function (e) {
    e.preventDefault();
    var contacts = $('.multiplecontacts .contact').length;
    if(contacts > 1 ){

    }
    blank = 0;
        $('.multiplecontacts .form-group').each(function () {
            if($(this).hasClass('has-error')){
                $(this).parent().parent().parent().parent().parent().addClass('hasError');
            }
        });
    if(blank > 0){
        alert_float('warning','Please enter require details');

    }
});*/
$(window).load(function () {
    id = window.location.hash + "_step";
    $(id).trigger('click');
});

$('body').on('change', '.select_item, .quote_item_option', function () {

    var ptotal = $('.proposal_ttl').val();
    var totalpayments = nopayments = $('.payment-wrapper').length;
    var remaining_amount = ptotal;
    var count = 1;
    pamount = 0;
    changeamount = 0;
    $('.payment-wrapper.paid').each(function () {
        var pid = $(this).attr('data-pid');
        paidamount = $('.payment-price .price_amount', this).val();
        remaining_amount = parseFloat(remaining_amount) - parseFloat(paidamount);
    });
    paidpayment = $('.payment-wrapper.paid').length;
    rel_type = $('#rel_type').val();
    rel_id = $('#rel_id').val();
    proposal_id = $('#proposal_id').val();
    if (remaining_amount > 0 && nopayments == paidpayment) {
        remaining_amount = parseFloat(remaining_amount).toFixed(2);
        var data = {
            'proposal_id': proposal_id,
            'rel_type': rel_type,
            'rel_id': rel_id,
            'remaining_amount': remaining_amount,
            'pk': nopayments,
            'pe': nopayments
        };
        $.ajax({
            type: 'POST',
            url: site_url + 'proposal/addnewpayment',
            data: data,
            success: function (result) {
                $('.payment-body').append(result);
            }
        });
    }
});

/*origForm = $('#proposal-form').serialize();
$("body").on('change input', '.select_item', function () {
    setTimeout(function () {
        if ($('#proposal-form').serialize() == origForm) {
            $('.proposal_accept').attr('disabled', '');
        } else {
            $('.proposal_accept').removeAttr('disabled');
        }
    }, 1000);
});*/

// Code for multiple email validation
var createEmailValidation = function () {
    $(".multiemail .form-control").each(function (index, value) {
        $(this).rules('remove');
        $(this).rules('add', {
            email: true,
            required: true,
            remote: {
                url: site_url + "admin/misc/addressbook_email_exists",
                type: 'post',
                data: {
                    email: function () {
                        return $(value).val();
                    },
                    addressbookid: function () {
                        return $('input[name="addressbookid"]').val();
                    },
                    addressbookemailid: function () {
                        return $(value).data('addressbookemailid');
                    },
                    ispublic: function () {
                        if ($('#contact_0_ispublic').prop("checked") == true) {
                            return 1;
                        }
                        return 0;
                    }
                }
            },
            messages: {
                email: "Please enter valid email.",
                required: "Please enter an email adress.",
                remote: function () {
                    return "Email already exist.";
                }
            }
        });
    });
}

function public_contact_exist() {
    $("#email-0 .multiemail .form-control").each(function (index, value) {
        $.ajax({
            type: 'POST',
            url: admin_url + "misc/addressbook_email_exists",
            data: {
                email: function () {
                    return $(value).val();
                },
                addressbookid: function () {
                    return $('input[name="addressbookid"]').val();
                },
                addressbookemailid: function () {
                    return $(value).data('addressbookemailid');
                },
                ispublic: function () {
                    if ($('#contact_0_ispublic').prop("checked") == true) {
                        return 1;
                    }
                    return 0;
                }
            },
            success: function (result) {
                if (result == "false") {
                    alert_float("warning", "Contact exist in another brand of your account as private contact.Can’t be converted to public")
                    $('.save_contact').attr('disabled', '');
                } else {
                    $('.save_contact').removeAttr('disabled');
                }
            }
        });
    });
}

$("body").on('change', '.ispublic', function () {
    public_contact_exist();
});
$("body").on('change', '#email-0 .multiemail .form-control', function () {
    if ($('#contact_0_ispublic').prop("checked") == true) {
        public_contact_exist();
    }
});

$('#location').change(function () {
    if ($(this).val() > 0) {
        $('#location_edit').removeClass('hide');
        var locationid = $(this).val();
        $.ajax({
            type: 'POST',
            url: admin_url + "meetings/get_location/" + locationid,
            success: function (result) {
                result = JSON.parse(result);
                var locationid = result.locationid;
                var location_name = result.location_name;
                var street_number = result.address;
                var route = result.address2;
                var locality = result.city;
                var administrative_area_level_1 = result.state;
                var postal_code = result.zip;
                /*alert(locationid);
                alert(location_name);
                alert(street_number);
                alert(locality);
                alert(route);
                alert(administrative_area_level_1);
                alert(postal_code);*/
                $('#locationid').val(locationid);
                $('#existing_location_name').val(location_name);
                $('input#location_street_number').val(street_number);
                $('input#location_route').val(route);
                $('input#location_locality').val(locality);
                $('input#location_administrative_area_level_1').val(administrative_area_level_1);
                $('input#location_postal_code').val(postal_code);

                if (result == "false") {
                } else {
                }
            }
        });
    } else {
        $('#location_edit').addClass('hide');
    }
    $('#loc_autocomplete_existing').val('');
    $('#loc_autocomplete_new').val('');
});

$('.location_fields.existing .form-control, .location_fields.new .form-control').each(function () {
    $(this).attr('disabled', 'disabled');
})

$('#location_new').click(function (e) {
    e.preventDefault();
    //$('.location_fields.new').slideDown();
    $('.location_fields.new').slideToggle();
    $('.location_fields.existing').slideUp();
    $('.location_fields.existing .form-control').each(function () {
        $(this).attr('disabled', 'disabled');
    })
    $('.location_fields.new .form-control').each(function () {
        $(this).removeAttr('disabled');
    })
});

$('#location_edit').click(function (e) {
    e.preventDefault();
    //$('.location_fields.existing').slideDown();
    $('.location_fields.existing').slideToggle();
    $('.location_fields.new').slideUp();
    $('.location_fields.new .form-control').each(function () {
        $(this).attr('disabled', 'disabled');
    })
    $('.location_fields.existing .form-control').each(function () {
        $(this).removeAttr('disabled');
    })
});
$('.cancel_loc').click(function (e) {
    e.preventDefault();
    $('.location_fields.new, .location_fields.existing').slideUp();
});

/*
Start Code
Added by Munir
Dt:11/26/2018
*/

$('#new_location_name').change(function () {
    var location_name = $('#new_location_name').val();
    if (location_name == "") {
        $('#new_location_name').parent().addClass('has-error');
        if ($('#new_location_name-error').length <= 0) {
            $('#new_location_name').after('<p id="new_location_name-error" class="text-danger">Please provide required information.</p>');
        }
        return false
    } else {
        $('#new_location_name').parent().removeClass('has-error');
        $('#new_location_name-error').remove();
    }
});
$('#existing_location_name').change(function () {
    var location_name = $('#existing_location_name').val();
    if (location_name == "") {
        $('#existing_location_name').parent().addClass('has-error');
        if ($('#existing_location_name-error').length <= 0) {
            $('#existing_location_name').after('<p id="existing_location_name-error" class="text-danger">Please provide required information.</p>');
        }
        return false
    } else {
        $('#existing_location_name').parent().removeClass('has-error');
        $('#existing_location_name-error').remove();
    }
});
$('.save_loc').click(function (e) {
    e.preventDefault();
    var location_name = $('#new_location_name').val();
    var address = $('.new_location_address').val();
    var address2 = $('.new_location_address2').val();
    var city = $('.new_location_city').val();
    var state = $('.new_location_state').val();
    var zip = $('.new_location_zip').val();
    var link = admin_url + "meetings/addloc";
    if (location_name == "") {
        $('#new_location_name').focus();
        $('#new_location_name').parent().addClass('has-error');
        if ($('#new_location_name-error').length <= 0) {
            $('#new_location_name').after('<p id="new_location_name-error" class="text-danger">Please provide required information.</p>');
        }
        return false
    } else {
        $('#new_location_name').parent().removeClass('has-error');
        $('#new_location_name-error').remove();
    }
    $.ajax({
        type: 'POST',
        data: {
            location_name: location_name,
            address: address,
            address2: address2,
            city: city,
            state: state,
            zip: zip
        },
        url: link
    }).done(function (response) {
        if ($.isNumeric(response)) {
            $('.location_fields.new').slideUp();
            $('.meeting_location #location').append('<option value="' + response + '" selected>' + location_name + '</option>');
            $("#location").selectpicker('refresh');
            alert_float('success', "Location added successfully!");
            $('#location_edit').removeClass('hide');
            $('#new_location_name').val('');
            $('.new_location_address').val('');
            $('.new_location_address2').val('');
            $('.new_location_city').val('');
            $('.new_location_state').val('');
            $('.new_location_zip').val('');

            $('#existing_location_name').val(location_name);
            $('#location_street_number').val(address);
            $('#location_route').val(address2);
            $('#location_locality').val(city);
            $('#location_administrative_area_level_1').val(state);
            $('#location_postal_code').val(zip);
            $('#locationid').val(response);

            $('#loc_autocomplete_new').val('');


        } else {
            alert_float('error', "Location not added!");
        }
    });
});
$('.edit_loc').click(function (e) {
    e.preventDefault();
    var locationid = $('#locationid').val();
    var location_name = $('#existing_location_name').val();
    var address = $('#location_street_number').val();
    var address2 = $('#location_route').val();
    var city = $('#location_locality').val();
    var state = $('#location_administrative_area_level_1').val();
    var zip = $('#location_postal_code').val();
    var link = admin_url + "meetings/editloc/" + locationid;

    if (location_name == "") {
        $('#existing_location_name').focus();
        $('#existing_location_name').parent().addClass('has-error');
        if ($('#existing_location_name-error').length <= 0) {
            $('#existing_location_name').after('<p id="existing_location_name-error" class="text-danger">Please provide required information.</p>');
        }
        return false
    } else {
        $('#existing_location_name').parent().removeClass('has-error');
        $('#existing_location_name-error').remove();
    }

    $.ajax({
        type: 'POST',
        data: {
            locationid: locationid,
            location_name: location_name,
            address: address,
            address2: address2,
            city: city,
            state: state,
            zip: zip
        },
        url: link
    }).done(function (response) {
        if (response == 1) {
            $('.location_fields.existing').slideUp();
            $('#location option[value=' + locationid + ']').text(location_name);
            $("#location").selectpicker('refresh');
            alert_float('success', "Location updated successfully!");
        } else {
            alert_float('error', "Location not updated!");
        }
    });
});


/*
End Code
Added by Munir
Dt:11/26/2018
*/
$('.delete_loc').click(function (e) {
    e.preventDefault();
    var alertTitle = 'Are you sure?';
    var confirmText = 'Yes, delete it!';
    locationid = $('#locationid').val();
    link = admin_url + "meetings/deleteloc/" + locationid;
    swal({
        title: alertTitle,
        text: "You won't be able to revert this!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonClass: 'btn btn-danger',
        confirmButtonText: confirmText,
        showLoaderOnConfirm: true,
        preConfirm: function () {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: link,
                    type: 'get'
                })
                    .done(function (response) {
                        if (response.indexOf(':') > -1 || response == 0) {
                            swal('Oops...', response.substring(response.indexOf(':') + 1), 'warning');
                        } else {
                            swal('Deleted!', response.message, response.status);
                            $('.location_fields.existing').slideUp();
                            $('#location option[value=' + locationid + ']').remove();
                            $("#location").selectpicker('refresh');
                        }
                    })
                    .fail(function () {
                        swal('Oops...', 'Something went wrong !', 'error');
                    });
            });
        },
        allowOutsideClick: false
    }).catch(swal.noop);
});
$('body').on('change', '#update_invite_stautus', function () {
    var status = $(this).val();
    if (status == "approved") {
        $(this).toggleClass('declined ' + status);
        $('.iaStatus .bootstrap-select').toggleClass('declined ' + status);

    } else if (status == "declined") {
        $(this).toggleClass('approved ' + status);
        $('.iaStatus .bootstrap-select').toggleClass('approved ' + status);
    }
    var inviteid = $(this).data('inviteid');
    $.ajax({
        url: admin_url + 'projects/invite_status_change',
        method: "post",
        data: "inviteid=" + inviteid + "&status=" + status,
        success: function (data) {
            if (data) {
                if (status == "approved") {
                    alert_float('success', "Invitation is approved");
                } else {
                    alert_float('danger', "Invitation is declined");
                }
                /*var totupd = parseInt($("#eventsupdate").val()) + parseInt(1);
                $("#eventsupdate").val(totupd);
                $('#td-' + projectid + inviteid).html('Approved by Account Owner');*/
                //$('#accept-'+projectid+inviteid).html('<i class="fa fa-2x fa-check" aria-hidden="true" style="color: #84c529;"></i>');
            }

            /*if ($("#eventsupdate").val() == $("#totevents").val()) {
                $("#btnSendEmail").removeClass("disabled");
            }*/
        }
    });
    $('.selectpicker').selectpicker('refresh');
});
$('body').on('click', '#leadToprojectClient', function (e) {
    var count = 0;
    $('.leadcontact').each(function () {
        if ($(this).prop('checked') === true) {
            count++;
        }
    });
    if (count == 0) {
        e.preventDefault();
        alert_float('warning', "Please select at least one contact as client ")
    }
});
$('body').on('change', 'select.clientselect', function (e) {
    var index = $(this).data('index');
    var name = $("option:selected", this).text();
    var value = $(this).val();
    $('#contactheader_' + index + ' span').text(name);
    var selectedclients = [];
    $('.multiplecontacts select.clientselect').each(function () {
        if ($(this).val() > 0) {
            selectedclients.push($(this).val());
        }
    });
    $('.multiplecontacts select.clientselect').each(function () {
        svalue = $(this).val();
        sindex = $(this).data('index')
        //$("option",this).removeAttr('disabled');
        $('option', this).each(function () {
            ovalue = $(this).val();
            if (jQuery.inArray(ovalue, selectedclients) !== -1) {
                if (svalue != ovalue) {
                    $(this).attr('disabled', 'disabled');
                }
            } else {
                $(this).removeAttr('disabled');
            }
        });
        $('.selectpicker').selectpicker('refresh');
    });

});

$('body').on('change', '.contact-options .radio input[type=radio]', function (e) {
    var index = $(this).data('index');
    var ctype = $(this).val();
    if (ctype == "existing") {
        var name = $("select.clientselect_" + index + " option:selected").text();
    } else {
        var name = $('.contact_' + index + '_firstname').val() + ' ' + $('.contact_' + index + '_lastname').val();
    }
    $('#contactheader_' + index + ' span').text(name);
});

$('body').on('click', '#emailpreview', function () {
    var value = CKEDITOR.instances.emailbody.getData();
    $('#createmailpreview').addClass('active');
    $('#previewemailbody').html(value);

});
$('body').on('click', '#closepreview', function (e) {
    e.preventDefault();
    var value = CKEDITOR.instances.emailbody.getData();
    $('#createmailpreview').removeClass('active');

});

$('body').on('change', '#project_dashboard_sattus', function () {
    var status = $(this).val();
    var projectid = $('#projectid').val();
    $.ajax({
        url: admin_url + 'projects/project_status_change',
        method: "post",
        data: "projectid=" + projectid + "&status=" + status,
        success: function (result) {
            if (result == 1) {
                alert_float('success', "Status updated");
            } else {
                alert_float('danger', "Status update failed");
            }
        }
    });
});

/*$('.customInput').click(function () {
    $('.paymenttotal').focus();
});*/

$(window).resize(function () {
    if ($(window).width() <= 1024 && $('.leadlistrow').length > 0) {
        location.reload();
    }
});

function formatCurrency(total) {
    var neg = false;
    if (total < 0) {
        neg = true;
        total = Math.abs(total);
    }
    return (neg ? "-$" : '$') + parseFloat(total, 10).toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,").toString();
}

function readFile(input, type, index = "") {
    $('.cr-slider').removeAttr('disabled');
    $fileVal = $('.' + type + '-pic' + index + ' div.clicktoaddimage input[type=file]').val();
    $filename = $('.' + type + '-pic' + index + ' div.clicktoaddimage input[type=file]').val().split('.').pop();
    if ($fileVal != "") {
        if ($filename == "jpg" || $filename == "jpeg" || $filename == "png") {
            $('.' + type + '-pic' + index + ' div.clicktoaddimage').hide();
            $('#' + type + '_croppie' + index).addClass('show');
            $('.' + type + '_imageview' + index).addClass('hidden');
            $('.cr-slider').removeAttr('disabled', 'disabled');
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#' + type + '-cropper' + index).croppie('bind', {
                        url: e.target.result
                    });
                }
                reader.readAsDataURL(input.files[0]);
            }
        } else {
            $filename = $('.' + type + '-pic' + index + ' div.clicktoaddimage input[type=file]').val('');
            alert_float('warning', "Please select valid image format");
        }
    } else {
        croppedDelete(type, index);
    }

}

function inititCroppie(t, w, h, shape, b = 0, index = "") {
    $('.cr-slider').attr('disabled', 'disabled');
    if (t == "banner") {
        w = $('#' + t + '-pic' + index).width();
    }
    var resize = false;
    if (t == "brandimage" || t == "favicon") {
        resize = true;
    }
    var t = $('#' + t + '-cropper' + index).croppie({
        viewport: {width: w, height: h, type: shape},
        boundary: {width: (w + b), height: (h + b)},
        showZoomer: true,
        //enforceBoundary: false,
        enableResize: resize,
    });
    return t;
}

var profile = inititCroppie('profile', 180, 180, 'circle');
var favicon = inititCroppie('favicon', 180, 180, 'square');
var proposal = inititCroppie('proposal', 340, 340, 'square', 20);
var banner = inititCroppie('banner', 1120, 200, 'square', 2);
var oloc = inititCroppie('oloc', 500, 200, 'square', 2);
var brandimage = inititCroppie('brandimage', 350, 80, 'square', 2);

function croppedResullt(type, index = "") {
    var img = "#imagebase64";
    if (type == "favicon") {
        img = "#favicon64";
    } else if (type == "banner") {
        img = "#bannerbase64";
    } else if (type == "brandimage") {
        img = "#brandimagebase64";
    }
    $('#' + type + '-cropper' + index).croppie('result', {
        type: 'canvas',
        size: 'original'
    }).then(function (resp) {
        $('#' + type + '_croppie' + index).removeClass('show');
        $(img + index).val(resp);
        $('.' + type + '-pic' + index + ' div.clicktoaddimage').hide();
        $('.' + type + '_imageview' + index + ' img').attr('src', resp);
        $('.' + type + '_imageview' + index).removeClass('hidden');
        $('.cr-slider').attr('disabled', 'disabled');
    });
}

function croppedCancel(type, index = "") {
    var isrc = $('.' + type + '_imageview' + index + ' img').attr('src');
    $('#' + type + '_croppie' + index).removeClass('show');
    if (isrc == "") {
        $('.' + type + '-pic' + index + ' div.clicktoaddimage input[type=file]').val('');
        $('.' + type + '-pic' + index + ' div.clicktoaddimage').show();
    } else {
        $('.' + type + '_imageview' + index).removeClass('hidden');
    }
}

function croppedDelete(type, index = "") {
    var isrc = $('.' + type + '_imageview' + index + ' img').attr('src', "");
    $('#' + type + '_croppie' + index).removeClass('show');
    $('.' + type + '-pic' + index + ' div.clicktoaddimage input[type=file]').val('');
    $('.' + type + '-pic' + index + ' div.clicktoaddimage').show();
    $('.' + type + '-pic' + index + ' div.clicktoaddimage').removeClass('hidden');
    $('.' + type + '_imageview' + index).addClass('hidden');
    //$('.cropper .actionChange').show();
    $('#' + type + '_croppie' + index + ' .actionChange').show();
}

function croppedChange(type, index = "") {
    $('.' + type + '-pic' + index + ' div.clicktoaddimage input[type=file]').trigger('click');
}

function reCropp(type, index = "") {
    var contents = $('#' + type + '_image' + index)[0]; //returns a HTML DOM Object
    $('#' + type + '_croppie' + index + ' .actionChange').hide();
    readFile(contents, type, index);
}

$('.actionRecrop').on('click', function () {
    var contents = $('#profile_image')[0]; //returns a HTML DOM Object
    profile.bind({
        url: url,
    });
    $('#profile_croppie').addClass('show');
});


autosize('checkmessage');
autosize('cashmessage');
$('#checkmessage, #cashmessage').keyup(function () {
    autosize('checkmessage');
    autosize('cashmessage');
});

function autosize(el) {
    if ($("#" + el).length > 0) {
        el = document.getElementById(el);
        setTimeout(function () {
            el.style.cssText = 'height:auto; padding:0';
            el.style.cssText = 'height:' + (el.scrollHeight + 20) + 'px';
        }, 0);
    }

}

//$('#line_item_category').on('change', function () {
$('body').on('change', 'select#line_item_category', function () {
    var parent_cat = $(this).val();
    $('select#line_item_sub_category option.option').addClass('hide');
    if (parent_cat > 0) {
        $('select#line_item_sub_category option.' + parent_cat).removeClass('hide');
    }
    $('select#line_item_sub_category').selectpicker('val', '');
    $('.selectpicker').selectpicker('refresh');
});
//$('select#line_item_sub_category').on('change', function () {
$('body').on('change', 'select#line_item_sub_category', function () {
    var parent_cat = $(this).children("option:selected").data('parent');
    $('select#line_item_category').selectpicker('val', parent_cat);
    if (parent_cat > 0) {
        $('select#line_item_sub_category option.option').addClass('hide');
        $('select#line_item_sub_category option.' + parent_cat).removeClass('hide');
    }
    $('.selectpicker').selectpicker('refresh');
});

$('body').on('change', '#manualprogress', function () {
    if ($(this).prop('checked') == true) {
        var manualprogress = 1;
    } else {
        var manualprogress = 0;
    }

    var taskid = $(this).data('taskid');
    $.ajax({
        url: admin_url + 'tasks/progressmanaual/' + taskid,
        method: "post",
        data: "manualprogress=" + manualprogress,
        success: function (result) {
            if (result > 0) {
                $('.checklistsprogress, .manualprogress').toggleClass('hide');
            } else {
            }
        }
    });
});

$('body').on('change', '#myRange', function () {
    var progress = progresspercent = $(this).val();
    $('.task-manual-progress-bar').width(progress + "%");
    $('.task-manual-progress-bar').html(progress + "%");
    $('.task-manual-progress-bar').attr('data-percent', progress);
    $(".task-manual-progress-bar").removeClass('zero-progress');
    /*if($(this).prop('checked')== true){
        var manualprogress = 1;
    }else {
        var manualprogress = 0;
    }*/

    var taskid = $(this).data('taskid');
    $.ajax({
        url: admin_url + 'tasks/progressmanaual/' + taskid,
        method: "post",
        data: "progresspercent=" + progresspercent,
        success: function (result) {
            if (result > 0) {
            } else {
            }
        }
    });
});

$('body').on('change', 'input[type=file].image_upload', function () {
    var filename = $(this).val();
    var extension = filename.replace(/^.*\./, '');
    if (extension == filename) {
        extension = '';
    } else {
        extension = extension.toLowerCase();
    }
    if (extension != 'jpg' && extension != 'png' && extension != 'jpeg' && extension != 'gif') {
        alert('Please select JPG, PNG or GIF image only! ');
        $(this).val('');
        /*var error = '<p id="lead-logo-error" class="text-danger">Please select valid image.</p>';
        $(this).parent().parent().after(error);
        $(this).parent().parent().parent().addClass('.has-error');*/
        $(this).parent().parent().find('.form-control').html('');
    }
});

_validate_form($('#category_form'), {
    name: {
        required: true,
        remote: {
            url: admin_url + "invoice_items/category_name_exists",
            type: 'post',
            data: {
                id: function () {
                    return $('input[name="id"]').val();
                }
            }
        }
    }
});

_validate_form($('#sub_cat_form'), {
    name: {
        required: true,
        remote: {
            url: admin_url + "invoice_items/subcategory_name_exists",
            type: 'post',
            data: {
                id: function () {
                    return $('input[name="id"]').val();
                },
                parent_id: function () {
                    return $('#parent_id').val();
                }
            }
        }
    },
    parent_id: {required: true},
});

$('#lineitem_cat_save').on('click', function (e) {
    e.preventDefault();
    var name = $('#name.line_item_category_name').val();
    if (name != '') {
        $.post(admin_url + 'invoice_items/add_line_item_category', {name: name}).done(function (result) {
            if (result > 0) {
                var option = "<option value=" + result + " selected >" + name + "</option>";
                $('select#line_item_category').append(option);
                $('select#parent_id').append(option);
                alert_float("success", "Category added successfully");
                $('#lineitem_category_modal').modal('hide');
                $('.selectpicker').selectpicker('refresh');
            }
        });
    }
});

$('#new_line_item_sub_category').on('click', function () {
    $('#parent_id').val($('#line_item_category').val());
    $('.selectpicker').selectpicker('refresh');
});

$('#lineitem_sub_cat_save').on('click', function (e) {
    e.preventDefault();
    if (!$('#sub_cat_form .form-group').hasClass('has-error')) {
        var name = $('#name.line_item_sub_category_name').val();
        var parent_id = $("#parent_id option:selected").val();
        parent_id = parseInt(parent_id);

        if (name != '') {
            var postData = {
                'name': name,
                'parent_id': parent_id
            };
            $.post(admin_url + 'invoice_items/update_line_item_sub_category', postData).done(function (result) {
                if (result > 0) {
                    var option = "<option class='option " + parent_id + "' value=" + result + " selected  data-parent='" + parent_id + "'>" + name + "</option>";
                    $('select#line_item_sub_category').append(option);
                    alert_float("success", "Sub category added successfully");
                    $('#lineitem_sub_category_modal').modal('hide');
                    $('#line_item_category').val(parent_id);
                    $('select#line_item_sub_category option.option').addClass('hide');
                    $('select#line_item_sub_category option.' + parent_id).removeClass('hide');
                    $('.selectpicker').selectpicker('refresh');
                }
            });
        }
    }
});

$('body').on('change', 'select#update_invite_stautus', function () {
    $class = $(this).val();
    $(this).removeClass('pending declined approved');
    $('.update_invite_stautus').removeClass('pending declined approved');
    $('.update_invite_stautus').addClass($class);
    $(this).addClass($class);

});


$('body').on('change', 'select.reltype, #rel_type', function () {
    $class = $(this).val();
    if ($class != "") {
        $pid = $('#' + $class).val();
        get_project_team($pid);
    }
});
$('body').on('change', 'select.relid', function () {
    $pid = $(this).val();
    get_project_team($pid);
});

function get_project_team(pid) {
    $.ajax({
        url: admin_url + 'tasks/get_project_task_team/' + pid,
        method: "post",
        success: function (result) {
            $('#assigned optgroup').each(function () {
                $(this).remove();
            });
            if (result != 0) {
                var users = JSON.parse(result);
                var members = users.members;
                var contacts = users.contact;
                var optgroup1 = $('<optgroup>');
                optgroup1.attr('label', 'Team Members');
                $.each(members, function (i, member) {
                    var option = $("<option></option>");
                    option.val(member.staffid);
                    option.text(member.firstname + " " + member.lastname);
                    optgroup1.append(option);
                });
                var optgroup2 = $('<optgroup>');
                optgroup2.attr('label', 'Contacts');
                $.each(contacts, function (i, contact) {
                    var option = $("<option></option>");
                    option.val(contact.staffid);
                    option.text(contact.name);
                    optgroup2.append(option);
                });
                $('select.team-member').append(optgroup1);
                $('select.team-member').append(optgroup2);
                $('.selectpicker').selectpicker('refresh');
            }
        }
    });
    $.ajax({
        url: admin_url + 'tasks/get_project_brandid/' + pid,
        method: "post",
        success: function (result) {
            if (result > 0) {
                $('#brandid').val(result);
            }
        }
    });
}

$('body').on('click', 'a.defaultBrand', function () {
    var brandid = $(this).data("id");
    $('#side-menutop li> a.defaultBrand').removeClass('isdefault');
    $(this).addClass('isdefault');
    if (brandid > 0) {
        $.ajax({
            url: admin_url + "home/defaultBrand",
            method: "post",
            data: "brandid=" + brandid,
            success: function (result) {
                if (result > 0) {
                    alert_float('success', 'Default brand changed');
                } else {
                    alert_float('danger', 'Failed! to change Default brand');
                }
            }
        });
    }

});

$('body').on('click', 'a.summary', function (e) {
    e.preventDefault();
    var brandid = $(this).data("id");
    var link = $(this).attr("href");
    var page = $(this).data("page");
    if (brandid > 0) {
        $.ajax({
            url: admin_url+'home/updatebrand',
            method: "post",
            data: "brandid=" + brandid+"&page="+page,
            success: function (data) {
                $.ajax({
                    url: admin_url+'home/updatenotification',
                    method: "post",
                    data: "brandid=" + brandid +"&page="+page,
                    success: function (data) {
                        window.location.href = link;
                    }
                });
            }
        });
    }

});